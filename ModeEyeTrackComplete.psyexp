<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'test mode': '[&quot;online&quot;, &quot;lab&quot;]', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['resources/overview.png', 'resources/rule_color_independent.png', 'resources/valid_draw_area.png', 'resources/valid_click_area.png', 'resources/trial_type_1_draw.png', 'resources/trial_type_1_click.png', 'resources/trial_type_0_draw.png', 'resources/trial_type_0_click.png', 'resources/star.png', 'resources/star_2.png', 'resources/star_1.png', 'resources/noise.png', 'resources/empty_star.png', 'resources/empty_star_2.png', 'resources/empty_star_1.png', 'resources/drawing.png', 'resources/dot_2.png', 'resources/dot_1.png', 'resources/clicking.png', 'resources/button.png', 'resources/arrow.png']" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="False" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="error" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="ModeEyeTrackInstr" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="error" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="fullInstruction">
      <RoutineSettingsComponent name="fullInstruction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="fullInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeFullInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseFullInstruction.getPressed()[0]&amp;#10;mouse_position = mouseFullInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseFullInstruction.getPressed()[0];&amp;#10;mouse_position = mouseFullInstruction.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeFullInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textInstruction" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'In this experiment, you will complete tasks that involve remembering and reproducing visual patterns.\n\n In each trial, you will see two oriented patches. Your task is to remember them for a few seconds and reproduce them afterward. \n\n The experiment consists of '+ str(n_kinds_of_tasks) + ' types of tasks. For each type, you will first see instructions, followed by a few practice trials before starting the actual task.'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.2" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseFullInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseFullInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="prepareComponents">
      <RoutineSettingsComponent name="prepareComponents" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareComponents" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareComponents" plugin="None">
        <Param val="import random&amp;#10;import math&amp;#10;&amp;#10;MAX_DRAWINGS = 3&amp;#10;MAX_STROKES = 10&amp;#10;CLICK_REGION_FACTOR = 3&amp;#10;&amp;#10;# define some helper functions&amp;#10;# functions for ori comparison&amp;#10;def funcComputeOriDiff(s1, s2):&amp;#10;    diff = (s1 - s2 + 90) % 180 - 90&amp;#10;    if diff == -90:&amp;#10;        diff = 90&amp;#10;    return diff&amp;#10;&amp;#10;# functions to create buttons&amp;#10;class SelfDefinedButton:&amp;#10;    def __init__(self, window, text, pos, size):&amp;#10;        # load background&amp;#10;        img_path = &quot;resources/button.png&quot;&amp;#10;        self.img = visual.ImageStim(&amp;#10;            win=window, image=img_path,&amp;#10;            size=size, pos=pos)&amp;#10;        &amp;#10;        # load text&amp;#10;        text_height = size[1] / 2&amp;#10;        self.text = visual.TextStim(&amp;#10;            win=window, text=text, pos=pos, color='black',&amp;#10;            height=text_height, anchorHoriz='center', anchorVert='center')&amp;#10;            &amp;#10;        # get stats&amp;#10;        self.left = pos[0] - size[0] / 2&amp;#10;        self.right = pos[0] + size[0] / 2&amp;#10;        self.top = pos[1] + size[1] / 2&amp;#10;        self.bottom = pos[1] - size[1] / 2&amp;#10;        &amp;#10;        # set auto draw&amp;#10;        self.setAutoDraw(True)&amp;#10;        &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.img.setAutoDraw(autoDraw)&amp;#10;        self.text.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;    def contains(self, pos):&amp;#10;        px = pos[0]&amp;#10;        py = pos[1]&amp;#10;        on_button = (&amp;#10;            (px &gt; self.left) &amp; (px &lt; self.right) &amp; (&amp;#10;            py &gt; self.bottom) &amp; (py &lt; self.top))&amp;#10;        return on_button&amp;#10;&amp;#10;def funcCreateButton(window, text, pos, size):&amp;#10;    button = SelfDefinedButton(window, text, pos, size)&amp;#10;    return button&amp;#10;    &amp;#10;def createPatch(window, pos, radius, fill_color='white', line_color='black'):&amp;#10;    scaled_border = radius * 10 / 0.2&amp;#10;    patch = visual.Circle(&amp;#10;        window, pos=pos, radius=radius,&amp;#10;        fillColor=fill_color, lineColor=line_color, colorSpace='rgb',&amp;#10;        lineWidth=scaled_border)&amp;#10;    return patch&amp;#10;    &amp;#10;def createEnabledDrawPatch(window, pos, radius):&amp;#10;    patch = createPatch(&amp;#10;        window, pos, radius, &amp;#10;        fill_color='white', line_color='black')&amp;#10;    return patch&amp;#10;    &amp;#10;def createDisabledDrawPatch(window, pos, radius):&amp;#10;    gray_color = [-0.3, -0.3, -0.3]&amp;#10;    patch = createPatch(&amp;#10;        window, pos, radius, &amp;#10;        fill_color=gray_color, line_color=gray_color)&amp;#10;    return patch&amp;#10;&amp;#10;# define the function to display the stimuli&amp;#10;def funcDrawStim(window, ori, loc, radius):&amp;#10;    # ori: 0-180 (degrees)&amp;#10;    # loc: position of the grating&amp;#10;    grating = visual.GratingStim(&amp;#10;        window, tex='sin', mask='gauss', &amp;#10;        sf=5.0, size=radius*2, &amp;#10;        ori=ori, pos=loc)&amp;#10;    grating.autoDraw = True&amp;#10;    return grating&amp;#10;&amp;#10;# define the function to make report&amp;#10;# define the function to process mouse response&amp;#10;class WheelClickRegister:&amp;#10;    def __init__(self, wheel, pos_point, opp_point, wheel_pos):&amp;#10;        self.wheel = wheel&amp;#10;        self.wheel_c = wheel_pos[0]&amp;#10;        self.wheel_r = wheel_pos[1]&amp;#10;        self.click_radius = wheel_pos[2]&amp;#10;        self.point_click_selected = pos_point&amp;#10;        self.opposite_point = opp_point&amp;#10;        self.clicks_x = []&amp;#10;        self.clicks_y = []&amp;#10;        self.clicks_time = []&amp;#10;        &amp;#10;        # flag for whether there are any response&amp;#10;        self.is_valid = True&amp;#10;        self.ever_have_response = False&amp;#10;        &amp;#10;        # initialize only the wheel&amp;#10;        self.wheel.setAutoDraw(True)&amp;#10;        self.point_click_selected.setAutoDraw(False)&amp;#10;        self.opposite_point.setAutoDraw(False)&amp;#10;   &amp;#10;    def register_click(self, mouse_position, mouse_time):&amp;#10;        mouse_x = mouse_position[0]&amp;#10;        mouse_y = mouse_position[1]&amp;#10;        mouse_r = math.sqrt(&amp;#10;            (mouse_x-self.wheel_c[0]) ** 2 +  &amp;#10;            (mouse_y-self.wheel_c[1]) ** 2)&amp;#10;&amp;#10;        click_min_r = self.wheel_r - self.click_radius * CLICK_REGION_FACTOR&amp;#10;        click_max_r = self.wheel_r + self.click_radius * CLICK_REGION_FACTOR&amp;#10;        if mouse_r &gt;= click_min_r and mouse_r &lt;= click_max_r:&amp;#10;            # the click is treated as a valid response&amp;#10;            self.ever_have_response = True&amp;#10;            &amp;#10;            pos_x_scaled = (mouse_x-self.wheel_c[0]) / mouse_r&amp;#10;            pos_y_scaled = (mouse_y-self.wheel_c[1]) / mouse_r&amp;#10;            pos_select_x = self.wheel_c[0] + pos_x_scaled * self.wheel_r&amp;#10;            pos_select_y = self.wheel_c[1] + pos_y_scaled * self.wheel_r&amp;#10;            opp_select_x = self.wheel_c[0] - pos_x_scaled * self.wheel_r&amp;#10;            opp_select_y = self.wheel_c[1] - pos_y_scaled * self.wheel_r&amp;#10;            &amp;#10;            if len(self.clicks_x) == 0:&amp;#10;                # initialize the two points&amp;#10;                self.point_click_selected.autoDraw = True&amp;#10;                self.opposite_point.autoDraw = True&amp;#10;            # update the position of two_points&amp;#10;            self.point_click_selected.setPos(&amp;#10;                (pos_select_x, pos_select_y))&amp;#10;            self.opposite_point.setPos(&amp;#10;                (opp_select_x, opp_select_y))&amp;#10;            # add the selected&amp;#10;            self.clicks_x.append(pos_x_scaled)&amp;#10;            self.clicks_y.append(pos_y_scaled)&amp;#10;            self.clicks_time.append(mouse_time)&amp;#10;            &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.wheel.setAutoDraw(autoDraw)&amp;#10;        self.point_click_selected.setAutoDraw(autoDraw)&amp;#10;        self.opposite_point.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;    def compute_response(self):&amp;#10;        # convert response to orientation&amp;#10;        if self.ever_have_response:&amp;#10;            x_resp = self.clicks_x[-1]&amp;#10;            y_resp = self.clicks_y[-1]&amp;#10;            rad = np.arctan2(y_resp, x_resp)&amp;#10;            deg = np.rad2deg(rad)&amp;#10;            deg = deg % 180&amp;#10;            deg = 90 - deg&amp;#10;            deg = deg % 180&amp;#10;            return deg&amp;#10;        else:&amp;#10;            return None&amp;#10;            &amp;#10;class FakeWheelClickRegister:&amp;#10;    def __init__(self, wheel, wheel_pos):&amp;#10;        self.wheel = wheel&amp;#10;        self.wheel_c = wheel_pos[0]&amp;#10;        self.wheel_r = wheel_pos[1]&amp;#10;        self.click_radius = wheel_pos[2]&amp;#10;        &amp;#10;        # if it's valid&amp;#10;        self.is_valid = False&amp;#10;        self.has_response = False&amp;#10;        &amp;#10;        # change the color of some&amp;#10;        &amp;#10;        # initialize&amp;#10;        self.setAutoDraw(True)&amp;#10;   &amp;#10;    def register_click(self, mouse_position, mouse_time):&amp;#10;        mouse_x = mouse_position[0]&amp;#10;        mouse_y = mouse_position[1]&amp;#10;        mouse_r = math.sqrt(&amp;#10;            (mouse_x-self.wheel_c[0]) ** 2 +  &amp;#10;            (mouse_y-self.wheel_c[1]) ** 2)&amp;#10;&amp;#10;        click_min_r = self.wheel_r - self.click_radius * CLICK_REGION_FACTOR&amp;#10;        click_max_r = self.wheel_r + self.click_radius * CLICK_REGION_FACTOR&amp;#10;        if mouse_r &gt;= click_min_r and mouse_r &lt;= click_max_r:&amp;#10;            # the click is within the valid region&amp;#10;            self.has_response = True&amp;#10;            &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.wheel.setAutoDraw(autoDraw)&amp;#10;&amp;#10;# define the function to collect free-form drawing&amp;#10;class CanvasDrawRegister:&amp;#10;    def __init__(self, canvas, strokes, redo_button,&amp;#10;            canvas_pos, redo_button_pos):&amp;#10;        self.canvas = canvas&amp;#10;        self.strokes = strokes&amp;#10;        self.redo_button = redo_button&amp;#10;        self.canvas_c = canvas_pos[0]&amp;#10;        self.canvas_r = canvas_pos[1]&amp;#10;        self.redo_button_pos = redo_button_pos # left, right, top, bottom&amp;#10;        &amp;#10;        # this is a valid response object&amp;#10;        self.is_valid = True&amp;#10;        &amp;#10;        # temporary inner states&amp;#10;        self.all_drawings_x = []&amp;#10;        self.all_drawings_y = []&amp;#10;        self.all_drawings_time = []&amp;#10;        self.drawing_index = 0&amp;#10;        self.initialize_drawing()&amp;#10;        &amp;#10;        # flag for whether there are any response&amp;#10;        self.ever_have_response = False&amp;#10;        &amp;#10;        # if we have strokes not saved yet&amp;#10;        self.has_unsaved_drawing = False&amp;#10;        self.has_unsaved_stroke = False&amp;#10;        &amp;#10;        # start drawing&amp;#10;        self.canvas.setAutoDraw(True)&amp;#10;        self.redo_button.setAutoDraw(True)&amp;#10;    &amp;#10;    def initialize_drawing(self):&amp;#10;        self.stroke_time = []&amp;#10;        self.stroke_data_x = []&amp;#10;        self.stroke_data_y = []&amp;#10;        self.stroke_index = 0&amp;#10;        self.current_vertices = []&amp;#10;        self.current_stroke_x = []&amp;#10;        self.current_stroke_y = []&amp;#10;        self.current_stroke_time = []&amp;#10;        self.has_started_drawing = False&amp;#10;        self.has_stopped_drawing = True&amp;#10;        &amp;#10;        self.last_x = None&amp;#10;        self.last_y = None&amp;#10;        &amp;#10;        # initialize all strokes&amp;#10;        for i in range(len(self.strokes)):&amp;#10;            stroke = self.strokes[i]&amp;#10;            stroke.autoDraw = False&amp;#10;            stroke.vertices = [(0, 0)]&amp;#10;        &amp;#10;    def register_mouse(self, mouse_position, mouse_time):&amp;#10;        has_redo = False # sent back to timer&amp;#10;        stroke = self.strokes[self.stroke_index]&amp;#10;        if self.stroke_index &lt; len(self.strokes):&amp;#10;            # only process the first max_strokes strokes&amp;#10;            # Get the current mouse position and state&amp;#10;            # check if it's within the region to draw&amp;#10;            mouse_x = mouse_position[0]&amp;#10;            mouse_y = mouse_position[1]&amp;#10;            mouse_r = mouse_r = math.sqrt(&amp;#10;                (mouse_x-self.canvas_c[0]) ** 2 +  &amp;#10;                (mouse_y-self.canvas_c[1]) ** 2)&amp;#10;        &amp;#10;            if mouse_r &lt; self.canvas_r:&amp;#10;                # the click is treated as a valid response&amp;#10;                self.ever_have_response = True&amp;#10;                &amp;#10;                # if within the drawing region&amp;#10;                if not self.has_started_drawing:&amp;#10;                    # initialize a stroke&amp;#10;                    stroke.autoDraw = True&amp;#10;                    self.current_vertices = []&amp;#10;                    self.current_stroke_x = []&amp;#10;                    self.current_stroke_y = []&amp;#10;                    self.current_stroke_time = []&amp;#10;                    self.has_started_drawing = True&amp;#10;                    self.has_stopped_drawing = False&amp;#10;                &amp;#10;                if self.last_x == None or abs(self.last_x - mouse_x) &gt; 0.01 or abs(self.last_y - mouse_y) &gt; 0.01:&amp;#10;                    # Update &amp;#10;                    pos_x_scaled = (mouse_x-self.canvas_c[0]) / self.canvas_r&amp;#10;                    pos_y_scaled = (mouse_y-self.canvas_c[1]) / self.canvas_r&amp;#10;                    self.current_vertices.append(mouse_position)&amp;#10;                    self.current_stroke_x.append(pos_x_scaled)&amp;#10;                    self.current_stroke_y.append(pos_y_scaled)&amp;#10;                    self.current_stroke_time.append(mouse_time)&amp;#10;                    stroke.vertices = self.current_vertices&amp;#10;                &amp;#10;                    # flag that there are unsaved drawings&amp;#10;                    self.has_unsaved_stroke = True&amp;#10;                    self.has_unsaved_drawing = True&amp;#10;                    &amp;#10;                    self.last_x = mouse_x&amp;#10;                    self.last_y = mouse_y&amp;#10;            else:&amp;#10;                # if out of the region&amp;#10;                if self.has_started_drawing:&amp;#10;                    # if have already start drawing, stop&amp;#10;                    self.deregister_mouse(mouse_position, mouse_time)&amp;#10;                    self.has_stopped_drawing = False&amp;#10;                else:&amp;#10;                    # if over the buttons and click and has unsaved&amp;#10;                    if self.has_stopped_drawing:&amp;#10;                        on_redo = (&amp;#10;                            (mouse_x &gt; self.redo_button_pos[0]) &amp;#10;                            &amp; (mouse_x &lt; self.redo_button_pos[1])) &amp; (&amp;#10;                            (mouse_y &gt; self.redo_button_pos[3]) &amp;#10;                            &amp; (mouse_y &lt; self.redo_button_pos[2]))&amp;#10;                        &amp;#10;                        if on_redo and self.has_unsaved_drawing:&amp;#10;                            # only allow redo if it does not exceed the limit:&amp;#10;                            if self.drawing_index &lt; MAX_DRAWINGS:&amp;#10;                                # save the drawings&amp;#10;                                self.save_drawing()&amp;#10;                                # clear the canvas&amp;#10;                                self.initialize_drawing()&amp;#10;                                # later signal to the timer&amp;#10;                                has_redo = True&amp;#10;                            &amp;#10;        return has_redo&amp;#10;    &amp;#10;    def deregister_mouse(self, mouse_position, mouse_time):&amp;#10;        self.has_stopped_drawing = True&amp;#10;        if self.has_started_drawing:&amp;#10;            self.save_stroke()&amp;#10;            self.has_started_drawing = False&amp;#10;            &amp;#10;    def save_stroke(self):&amp;#10;        # only save valid stroke&amp;#10;        if len(self.current_stroke_time) &gt; 0:&amp;#10;            self.stroke_time.append(self.current_stroke_time)&amp;#10;            self.stroke_data_x.append(self.current_stroke_x)&amp;#10;            self.stroke_data_y.append(self.current_stroke_y)&amp;#10;            self.stroke_index += 1&amp;#10;        self.has_unsaved_stroke = False&amp;#10;            &amp;#10;    def save_drawing(self):&amp;#10;        # only save valid drawing&amp;#10;        if len(self.stroke_time) &gt; 0:&amp;#10;            self.all_drawings_time.append(self.stroke_time)&amp;#10;            self.all_drawings_x.append(self.stroke_data_x)&amp;#10;            self.all_drawings_y.append(self.stroke_data_y)&amp;#10;            self.drawing_index += 1&amp;#10;        &amp;#10;        # mark that everything has veen saved&amp;#10;        self.has_unsaved_drawing = False&amp;#10;        &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.canvas.autoDraw = autoDraw&amp;#10;        for i in range(len(self.strokes)):&amp;#10;            self.strokes[i].autoDraw = autoDraw&amp;#10;        self.redo_button.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;    def compute_response(self):&amp;#10;        # convert response to orientation&amp;#10;        if len(self.all_drawings_time) &gt; 0:&amp;#10;            x_to_analyze = self.all_drawings_x[-1]&amp;#10;            y_to_analyze = self.all_drawings_y[-1]&amp;#10;            &amp;#10;            # the easiest way: start to end&amp;#10;            x_resp = x_to_analyze[-1][-1] - x_to_analyze[0][0]&amp;#10;            y_resp = y_to_analyze[-1][-1] - y_to_analyze[0][0]&amp;#10;            &amp;#10;            # compute all the rest&amp;#10;            rad = np.arctan2(y_resp, x_resp)&amp;#10;            deg = np.rad2deg(rad)&amp;#10;            deg = deg % 180&amp;#10;            deg = 90 - deg&amp;#10;            deg = deg % 180&amp;#10;            return deg&amp;#10;        else:&amp;#10;            return None&amp;#10;            &amp;#10;# define the function to collect free-form drawing&amp;#10;class FakeCanvasDrawRegister:&amp;#10;    def __init__(self, canvas, redo_button, canvas_pos, redo_button_pos):&amp;#10;        self.canvas = canvas&amp;#10;        self.redo_button = redo_button&amp;#10;        self.canvas_c = canvas_pos[0]&amp;#10;        self.canvas_r = canvas_pos[1]&amp;#10;        self.redo_button_pos = redo_button_pos # left, right, top, bottom&amp;#10;        &amp;#10;        # variable to keep track if there are unnecessary drawing&amp;#10;        self.is_valid = False&amp;#10;        self.has_response = False&amp;#10;        &amp;#10;        # initialize&amp;#10;        self.canvas.setAutoDraw(True)&amp;#10;        self.redo_button.setAutoDraw(False)&amp;#10;        &amp;#10;    def register_mouse(self, mouse_position, mouse_time):&amp;#10;        # register clicks as unvalid&amp;#10;        mouse_x = mouse_position[0]&amp;#10;        mouse_y = mouse_position[1]&amp;#10;        mouse_r = mouse_r = math.sqrt(&amp;#10;            (mouse_x-self.canvas_c[0]) ** 2 +  &amp;#10;            (mouse_y-self.canvas_c[1]) ** 2)&amp;#10;        &amp;#10;        if mouse_r &lt; self.canvas_r:&amp;#10;            # the click is within drawing&amp;#10;            self.has_response = True&amp;#10;            &amp;#10;        return False # place holder&amp;#10;    &amp;#10;    def deregister_mouse(self, mouse_position, mouse_time):&amp;#10;        pass&amp;#10;            &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.canvas.autoDraw = autoDraw&amp;#10;        self.redo_button.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;&amp;#10;def funcDrawAdjustResponse(window, loc, draw_radius, click_radius, is_valid):&amp;#10;    # set the drawing region&amp;#10;    ## for the wheel&amp;#10;    draw_area_x = loc[0]&amp;#10;    draw_area_y = loc[1]&amp;#10;    draw_area_bottom_y = draw_area_y - draw_radius&amp;#10;    &amp;#10;    wheel_pos = [&amp;#10;        (loc[0], loc[1]),&amp;#10;        draw_radius, click_radius]&amp;#10;    wheel_color = 'black'&amp;#10;    if is_valid:&amp;#10;        wheel_color = 'white'&amp;#10;    wheel = createPatch(&amp;#10;        window, pos=(draw_area_x, draw_area_y), radius=draw_radius,&amp;#10;        fill_color='gray', line_color=wheel_color)&amp;#10;    &amp;#10;    response_wheel_obj = None&amp;#10;    if is_valid:&amp;#10;        # create the point to represent orientation&amp;#10;        # initialize the two points&amp;#10;        point_click_selected = createPatch(&amp;#10;            window, pos=(draw_area_x, draw_area_y), radius=click_radius,&amp;#10;            fill_color='black', line_color='black')&amp;#10;        opposite_point = createPatch(&amp;#10;            window, pos=(draw_area_x, draw_area_y), radius=click_radius,&amp;#10;            fill_color='black', line_color='black')&amp;#10;    &amp;#10;        # register mouse click function&amp;#10;        response_wheel_obj = WheelClickRegister(&amp;#10;            wheel, pos_point=point_click_selected, &amp;#10;            opp_point=opposite_point, wheel_pos=wheel_pos)&amp;#10;    else:&amp;#10;        response_wheel_obj = FakeWheelClickRegister(&amp;#10;            wheel, wheel_pos=wheel_pos)&amp;#10;    return response_wheel_obj&amp;#10;&amp;#10;def funcDrawDrawResponse(window, loc, draw_radius, is_valid):&amp;#10;    # set the drawing region&amp;#10;    draw_area_x = loc[0]&amp;#10;    draw_area_y = loc[1]&amp;#10;    draw_area_bottom_y = draw_area_y - draw_radius&amp;#10;    # first define the canvas&amp;#10;    canvas_pos = [(loc[0], loc[1]), draw_radius]&amp;#10;    canvas = None&amp;#10;    if is_valid:&amp;#10;        canvas = createEnabledDrawPatch(&amp;#10;            window, pos=(draw_area_x, draw_area_y), radius=draw_radius)&amp;#10;    else:&amp;#10;        canvas = createDisabledDrawPatch(&amp;#10;            window, pos=(draw_area_x, draw_area_y), radius=draw_radius)&amp;#10;    canvas.setAutoDraw(True)&amp;#10;        &amp;#10;    # define the confirm and redo button&amp;#10;    button_width = draw_radius / 1.8 * 1.0&amp;#10;    button_height = draw_radius / 1.8 * 0.5&amp;#10;    button_x = draw_area_x&amp;#10;    button_y = draw_area_bottom_y - button_height / 2 - 0.01&amp;#10;    &amp;#10;    # redo button&amp;#10;    redo_button_pos = [&amp;#10;        button_x - button_width / 2, # left&amp;#10;        button_x + button_width / 2, # right&amp;#10;        button_y + button_height / 2, # top&amp;#10;        button_y - button_height / 2 # bottom&amp;#10;    ]&amp;#10;    redo_button = funcCreateButton(&amp;#10;        window, 'redo', &amp;#10;        pos=(button_x, button_y),&amp;#10;        size=(button_width, button_height))&amp;#10;        &amp;#10;    response_canvas_obj = None&amp;#10;    if is_valid:&amp;#10;        # this is a real drawing object&amp;#10;        # then define the strokes (on top of background)&amp;#10;        strokes = []&amp;#10;        for i in range(MAX_STROKES):&amp;#10;            new_stroke = visual.ShapeStim(&amp;#10;                window, vertices=[(0, 0)], &amp;#10;                fillColor=None, lineWidth=5, &amp;#10;                lineColor='black', closeShape=False)&amp;#10;            new_stroke.autoDraw = False&amp;#10;            strokes.append(new_stroke)&amp;#10;        &amp;#10;        response_canvas_obj = CanvasDrawRegister(&amp;#10;            canvas, strokes, redo_button,&amp;#10;            canvas_pos, redo_button_pos)&amp;#10;    else:&amp;#10;        response_canvas_obj = FakeCanvasDrawRegister(&amp;#10;            canvas, redo_button,&amp;#10;            canvas_pos, redo_button_pos)&amp;#10;        &amp;#10;    return response_canvas_obj&amp;#10;&amp;#10;# define the function to display cue&amp;#10;class SingleCueObject:&amp;#10;    def __init__(self, window, loc, cue_code, radius, cue_color=None):&amp;#10;        cue_r = radius * 0.3&amp;#10;        cue_type = int(cue_code)&amp;#10;        cue_ori = 180 * random.random()&amp;#10;        self.cue_object = self.load_report_cue(&amp;#10;            window, loc, (cue_r, cue_r), cue_ori, cue_type, cue_color)&amp;#10;            &amp;#10;        self.setAutoDraw(True)&amp;#10;            &amp;#10;    def load_report_cue(self, window, loc, cue_size, cue_ori, cue_type, cue_color):&amp;#10;        cue_img_path = None&amp;#10;        color_info = '' if cue_color is None else f'_{cue_color}'&amp;#10;        if cue_type == 99:&amp;#10;            cue_img_path = f&quot;resources/dot{color_info}.png&quot;&amp;#10;        elif cue_type==1:&amp;#10;            cue_img_path = f&quot;resources/star{color_info}.png&quot;&amp;#10;        elif cue_type==0:&amp;#10;            cue_img_path = f&quot;resources/empty_star{color_info}.png&quot;&amp;#10;        else:&amp;#10;            raise ValueError(f'Unknow cue type {cue_type}')&amp;#10;        cue_obj = visual.ImageStim(&amp;#10;            win=window, image=cue_img_path,&amp;#10;            ori=cue_ori, size=cue_size, pos=loc)&amp;#10;        return cue_obj&amp;#10;            &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        self.cue_object.setAutoDraw(auto_draw)&amp;#10;            &amp;#10;    &amp;#10;class CueObject:&amp;#10;    def __init__(self, window, loc, cue_codes, radius):&amp;#10;        self.cue_objects = []&amp;#10;        cue_r = radius * 0.3&amp;#10;        &amp;#10;        # create the center bar&amp;#10;        bar_object = self.load_report_cue(&amp;#10;            window, loc, (cue_r*1.2, cue_r*0.4), 0, 0)&amp;#10;        self.cue_objects.append(bar_object)&amp;#10;        &amp;#10;        # create the cues&amp;#10;        cue_locs = [&amp;#10;            (loc[0]-cue_r, loc[1]),&amp;#10;            (loc[0]+cue_r, loc[1])]&amp;#10;        for i in range(2):&amp;#10;            cue_object = SingleCueObject(&amp;#10;                window, cue_locs[i], cue_codes[i], radius)&amp;#10;            self.cue_objects.append(cue_object)&amp;#10;                &amp;#10;        self.setAutoDraw(True)&amp;#10;&amp;#10;    def load_report_cue(self, window, loc, cue_size, cue_ori, cue_type):&amp;#10;        cue_img_path = None&amp;#10;        if cue_type==0:&amp;#10;            cue_img_path = &quot;resources/bar.png&quot;&amp;#10;        else:&amp;#10;            raise ValueError(f'Unknow cue type {cue_type}')&amp;#10;        cue_obj = visual.ImageStim(&amp;#10;            win=window, image=cue_img_path,&amp;#10;            ori=cue_ori, size=cue_size, pos=loc)&amp;#10;        return cue_obj&amp;#10;        &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        for obj in self.cue_objects:&amp;#10;            obj.setAutoDraw(auto_draw)&amp;#10;&amp;#10;# define the function to display implicit cue&amp;#10;class ImplicitCueObject:&amp;#10;    def __init__(self, window, loc, radius, n_split, regions, offset):&amp;#10;        self.n_split = n_split&amp;#10;        self.cue_objects = []&amp;#10;        cue_r = radius * 0.5&amp;#10;        &amp;#10;        # create the background&amp;#10;        back_object = self.load_report_cue(&amp;#10;            window, loc, [cue_r, cue_r], 0, offset)&amp;#10;        self.cue_objects.append(back_object)&amp;#10;        &amp;#10;        # highlight the region to report&amp;#10;        for i in range(len(regions)):&amp;#10;            region_id = regions[i]&amp;#10;            cue_ori = 180 / self.n_split * region_id&amp;#10;            # cue_width = abs(cue_r * math.sin(math.radians(180 / self.n_split + offset)))&amp;#10;            cue_object = self.load_report_cue(&amp;#10;                window, loc, [cue_r, cue_r], 1, cue_ori + offset)&amp;#10;            self.cue_objects.append(cue_object)&amp;#10;                &amp;#10;        self.setAutoDraw(True)&amp;#10;&amp;#10;    def load_report_cue(self, window, loc, cue_size, cue_type, cue_ori=0):&amp;#10;        cue_img_path = None&amp;#10;        if cue_type==0:&amp;#10;            cue_img_path = f&quot;resources/implicit_cue_back_{self.n_split}.png&quot;&amp;#10;        elif cue_type==1:&amp;#10;            cue_img_path = f&quot;resources/implicit_cue_front_{self.n_split}.png&quot;&amp;#10;        cue_obj = visual.ImageStim(&amp;#10;            win=window, image=cue_img_path,&amp;#10;            ori=cue_ori, size=cue_size, pos=loc)&amp;#10;        return cue_obj&amp;#10;        &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        for obj in self.cue_objects:&amp;#10;            obj.setAutoDraw(auto_draw)&amp;#10;&amp;#10;def funcDrawArrow(window, radius, start_loc, end_loc):&amp;#10;    # compute orientation&amp;#10;    x_dir = end_loc[0] - start_loc[0]&amp;#10;    y_dir = end_loc[1] - start_loc[1]&amp;#10;    arrow_rad = np.arctan2(-y_dir, x_dir)&amp;#10;    arrow_ori = np.rad2deg(arrow_rad)&amp;#10;    arrow_pos = [&amp;#10;        (end_loc[0] + start_loc[0])/2, &amp;#10;        (end_loc[1] + start_loc[1])/2]&amp;#10;    cue_size = radius * 0.3&amp;#10;    arrow_img_path = &quot;resources/arrow.png&quot;&amp;#10;    arrow = visual.ImageStim(&amp;#10;        win=window, image=arrow_img_path,&amp;#10;        ori=arrow_ori, pos=arrow_pos,&amp;#10;        size=(cue_size, cue_size))&amp;#10;    arrow.setAutoDraw(True)&amp;#10;    return arrow&amp;#10;&amp;#10;def funcCheckNoPending(objs):&amp;#10;    no_unanswered = True&amp;#10;    for i in range(len(objs)):&amp;#10;        obj = objs[i]&amp;#10;        if obj.is_valid:&amp;#10;            no_unanswered = no_unanswered and obj.ever_have_response&amp;#10;    return no_unanswered&amp;#10;&amp;#10;# other components for feedback and training&amp;#10;class ClickAnswerObject:&amp;#10;    def __init__(self, window, ori, loc, radius, click_radius):&amp;#10;        ## for the wheel&amp;#10;        self.components = []&amp;#10;        self.wheel_r = radius&amp;#10;        self.wheel_c = [loc[0], loc[1]]&amp;#10;        self.click_radius = click_radius&amp;#10;        self.wheel = createPatch(&amp;#10;            window, pos=self.wheel_c, radius=self.wheel_r,&amp;#10;            fill_color='gray', line_color='white')&amp;#10;        self.components.append(self.wheel)&amp;#10;        &amp;#10;        ## create the point to represent orientation&amp;#10;        if ori is not None:&amp;#10;            converted_pos = self.convert_ori_to_pos(ori)&amp;#10;            ans_point_pos = converted_pos[0]&amp;#10;            opp_point_pos = converted_pos[1]&amp;#10;            self.point_click_selected = createPatch(&amp;#10;                window, pos=ans_point_pos, &amp;#10;                radius=self.click_radius,&amp;#10;                fill_color='black', line_color='black')&amp;#10;            self.opposite_point = createPatch(&amp;#10;                window, pos=opp_point_pos, &amp;#10;                radius=self.click_radius,&amp;#10;                fill_color='black', line_color='black')&amp;#10;            self.components.append(self.point_click_selected)&amp;#10;            self.components.append(self.opposite_point)&amp;#10;    &amp;#10;        # make all objects visible&amp;#10;        self.setAutoDraw(True)&amp;#10;&amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        n_comp = len(self.components)&amp;#10;        for i in range(n_comp):&amp;#10;            comp = self.components[i]&amp;#10;            comp.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;    def convert_ori_to_pos(self, ori):&amp;#10;        # convert orientation to x,y&amp;#10;        deg = 90 - ori&amp;#10;        deg = deg % 180&amp;#10;        rad = np.deg2rad(deg)&amp;#10;        &amp;#10;        # adjust point position&amp;#10;        x_ans = self.wheel_c[0] + np.cos(rad) * self.wheel_r&amp;#10;        y_ans = self.wheel_c[1] + np.sin(rad) * self.wheel_r&amp;#10;        x_opp = self.wheel_c[0] - np.cos(rad) * self.wheel_r&amp;#10;        y_opp = self.wheel_c[1] - np.sin(rad) * self.wheel_r&amp;#10;        return (x_ans, y_ans), (x_opp, y_opp)&amp;#10;&amp;#10;        &amp;#10;class DrawAnswerObject:&amp;#10;    def __init__(self, window, response, is_ori, loc, radius):&amp;#10;        self.components = []&amp;#10;        self.strokes = []&amp;#10;        &amp;#10;        # set the drawing region&amp;#10;        self.canvas_r = radius&amp;#10;        self.canvas_c = (loc[0], loc[1])&amp;#10;        self.canvas = canvas = createEnabledDrawPatch(&amp;#10;            window, pos=self.canvas_c, radius=self.canvas_r)&amp;#10;        self.components.append(self.canvas)&amp;#10;&amp;#10;        # then set the strokes&amp;#10;        if response is not None:&amp;#10;            strokes = response&amp;#10;            if is_ori:&amp;#10;                # the 'answer' provided is orientation&amp;#10;                strokes = self.convert_ori_to_drawing(response)&amp;#10;            x_strokes = strokes[0]&amp;#10;            y_strokes = strokes[1]&amp;#10;            n_strokes = len(x_strokes)&amp;#10;            for i in range(n_strokes):&amp;#10;                xs = x_strokes[i]&amp;#10;                ys = y_strokes[i]&amp;#10;                n_vertices = len(xs)&amp;#10;                vertices = []&amp;#10;                for j in range(n_vertices):&amp;#10;                    # convert the x,y to new coords&amp;#10;                    vx = self.canvas_c[0] + xs[j] * self.canvas_r&amp;#10;                    vy = self.canvas_c[1] + ys[j] * self.canvas_r&amp;#10;                    vertices.append((vx, vy))&amp;#10;                new_stroke = visual.ShapeStim(&amp;#10;                    win=window, vertices=vertices, &amp;#10;                    fillColor=None, lineWidth=5, &amp;#10;                    lineColor='black', closeShape=False)&amp;#10;                self.strokes.append(new_stroke)&amp;#10;                self.components.append(new_stroke)&amp;#10;            &amp;#10;        # make all objects visible&amp;#10;        self.setAutoDraw(True)&amp;#10;&amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        n_comp = len(self.components)&amp;#10;        for i in range(n_comp):&amp;#10;            comp = self.components[i]&amp;#10;            comp.setAutoDraw(autoDraw)&amp;#10;            &amp;#10;    def convert_ori_to_drawing(self, ori):&amp;#10;        # convert orientation to x,y&amp;#10;        deg = 90 - ori&amp;#10;        deg = deg % 180&amp;#10;        rad = np.deg2rad(deg)&amp;#10;        &amp;#10;        # adjust point position&amp;#10;        r_scale =  0.7&amp;#10;        x1 = np.cos(rad) * r_scale&amp;#10;        x2 = - np.cos(rad) * r_scale&amp;#10;        y1 = np.sin(rad) * r_scale &amp;#10;        y2 = - np.sin(rad) * r_scale &amp;#10;        drawing = [[[x1, x2]], [[y1, y2]]]&amp;#10;        return drawing&amp;#10;        &amp;#10;class FeedbackText:&amp;#10;    def __init__(self, window, text, loc, radius):&amp;#10;        self.text = text&amp;#10;        self.text_object = visual.TextStim(&amp;#10;            win=window, text=self.text, &amp;#10;            pos=(loc[0], loc[1]),&amp;#10;            height=radius * 0.2,&amp;#10;            color='black', colorSpace='rgb')&amp;#10;        # make components visible&amp;#10;        self.setAutoDraw(True)&amp;#10;    &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.text_object.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;class TrainingCue:&amp;#10;    def __init__(self, window, text, target_loc, display_r):&amp;#10;        # get the location&amp;#10;        vec_x = (1 - 2 * (target_loc[0] &lt; 0)) * display_r / math.sqrt(2)&amp;#10;        vec_y = (1 - 2 * (target_loc[1] &lt; 0)) * display_r / math.sqrt(2)&amp;#10;        x_offset_scale = 1&amp;#10;        text_loc = [&amp;#10;            target_loc[0] + vec_x * (1.4+x_offset_scale),&amp;#10;            target_loc[1] + vec_y * 1.4]&amp;#10;        &amp;#10;        # create the text&amp;#10;        self.text = text&amp;#10;        self.text_object = visual.TextStim(&amp;#10;            win=window, text=self.text, &amp;#10;            pos=text_loc,&amp;#10;            height=display_r * 0.2,&amp;#10;            color='white', colorSpace='rgb')&amp;#10;        # create the arrow&amp;#10;        arrow_start_loc = [&amp;#10;            target_loc[0] + vec_x * (1.2+x_offset_scale),&amp;#10;            target_loc[1] + vec_y * 1.2]&amp;#10;        arrow_end_loc = [&amp;#10;            target_loc[0] + vec_x * (1.02+x_offset_scale),&amp;#10;            target_loc[1] + vec_y * 1.02]&amp;#10;        self.arrow = funcDrawArrow(&amp;#10;            window, display_r * 0.5, &amp;#10;            arrow_start_loc, arrow_end_loc)&amp;#10;            &amp;#10;        # auto draw --&gt; true&amp;#10;        self.setAutoDraw(True)&amp;#10;        &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.text_object.setAutoDraw(autoDraw)&amp;#10;        self.arrow.setAutoDraw(autoDraw)&amp;#10;    &amp;#10;class NoisePatch:&amp;#10;    def __init__(self, window, loc, display_r):&amp;#10;        noise_img_path = &quot;resources/noise.png&quot;&amp;#10;        noise_ori = 180 * random.random()&amp;#10;        self.obj = visual.ImageStim(&amp;#10;            win=window, image=noise_img_path,&amp;#10;            ori=noise_ori, size=2*display_r, pos=loc) &amp;#10;        &amp;#10;        self.setAutoDraw(True)&amp;#10;        &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.obj.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;class DefaultFixation:&amp;#10;    def __init__(self, window):&amp;#10;        self.fixation = visual.ShapeStim(&amp;#10;            win=window, vertices='cross',&amp;#10;            size=(0.06, 0.06), lineWidth=1,&amp;#10;            lineColor='white', fillColor='white')&amp;#10;        &amp;#10;        self.setAutoDraw(True)&amp;#10;        &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.fixation.setAutoDraw(autoDraw)&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="const MAX_DRAWINGS = 3;&amp;#10;const MAX_STROKES = 10;&amp;#10;const CLICK_REGION_FACTOR = 3;&amp;#10;&amp;#10;// define some functions&amp;#10;function funcRandomUniform (vmin, vmax) {&amp;#10;    return Math.random() * (vmax - vmin) + vmin;&amp;#10;}&amp;#10;&amp;#10;function funcShuffleArray(arr) {&amp;#10;    let shuffled = arr.slice().sort(() =&gt; Math.random() - 0.5);&amp;#10;    return shuffled;&amp;#10;}&amp;#10;&amp;#10;function funcRandomSample (arr, m) {&amp;#10;    let n = arr.length;&amp;#10;    let shuffled = funcShuffleArray(arr);&amp;#10;    if (m &gt;= n) {&amp;#10;        // Return a copy if m is &gt;= n&amp;#10;        return shuffled; &amp;#10;    }&amp;#10;    return shuffled.slice(0, m);&amp;#10;}&amp;#10;&amp;#10;function sampleWithProb(arr, p, N) {&amp;#10;    if (arr.length !== p.length) {&amp;#10;        throw new Error(&quot;wrong size of p.&quot;);&amp;#10;    }&amp;#10;    &amp;#10;    // Calculate the cumulative distribution&amp;#10;    let csum = [];&amp;#10;    let sum = 0;&amp;#10;    for (let i = 0; i &lt; p.length; i++) {&amp;#10;        sum += p[i];&amp;#10;        csum.push(sum);&amp;#10;    }&amp;#10;&amp;#10;    // Sampling&amp;#10;    let samples = [];&amp;#10;    for (let i = 0; i &lt; N; i++) {&amp;#10;        let rand_val = Math.random();&amp;#10;        let index = csum.findIndex((c) =&gt; c &gt;= rand_val);&amp;#10;        samples.push(arr[index]);&amp;#10;    }&amp;#10;    &amp;#10;    return samples;&amp;#10;}&amp;#10;&amp;#10;function funcComputeOriDiff(s1, s2) {&amp;#10;    let diff = (s1 - s2 + 90) % 180;&amp;#10;    if (diff &lt; 0) {&amp;#10;        diff += 180;&amp;#10;    }&amp;#10;    diff -= 90;&amp;#10;    if (diff === -90) {&amp;#10;        diff = 90;&amp;#10;    }&amp;#10;    return diff;&amp;#10;}&amp;#10;&amp;#10;function funcCreateStroke(window) {&amp;#10;    let stroke = new visual.ShapeStim({&amp;#10;            &quot;win&quot;: window, &amp;#10;            &quot;vertices&quot;: stroke_vertex,&amp;#10;            &quot;closeShape&quot;: false,&amp;#10;            &quot;lineWidth&quot;: 5, &amp;#10;            &quot;lineColor&quot;: &quot;black&quot;});&amp;#10;    return stroke;&amp;#10;}&amp;#10;&amp;#10;function funcCreateRoundPatch(&amp;#10;        window, pos, radius, &amp;#10;        fillColor='white', lineColor='white') {&amp;#10;    let border_width = 5 * radius / 0.2;&amp;#10;    let fill_color = new util.Color(fillColor);&amp;#10;    let line_color = new util.Color(lineColor);&amp;#10;    let patch = new visual.Polygon({&amp;#10;        &quot;win&quot;: window, &amp;#10;        &quot;edges&quot;: 200, &quot;ori&quot;: 0.0, &quot;anchor&quot;: 'center', &quot;colorSpace&quot;: 'rgb', &amp;#10;        &quot;size&quot;: [radius*2, radius*2], &quot;pos&quot;: pos, &amp;#10;        &quot;lineWidth&quot;: border_width, &quot;lineColor&quot;: line_color, &amp;#10;        &quot;fillColor&quot;: fill_color, &amp;#10;        &quot;opacity&quot;: 1.0, &quot;colorSpace&quot;: 'rgb'});&amp;#10;    return patch;&amp;#10;}&amp;#10;&amp;#10;function funcCreateEnabledCanvas(window, pos, radius) {&amp;#10;    let patch = funcCreateRoundPatch(&amp;#10;        window, pos, radius, 'white', 'black');&amp;#10;    return patch;&amp;#10;}&amp;#10;&amp;#10;function funcCreateDisabledCanvas(window, pos, radius) {&amp;#10;    let patch = funcCreateRoundPatch(&amp;#10;        window, pos, radius, [-0.3, -0.3, -0.3], [-0.3, -0.3, -0.3]);&amp;#10;    return patch;&amp;#10;}&amp;#10;&amp;#10;class SelfDefinedButton {&amp;#10;      constructor(window, text, pos, size) {&amp;#10;            // Load background&amp;#10;            let img_path = &quot;resources/button.png&quot;;&amp;#10;            this.img = new visual.ImageStim({&amp;#10;              win:window, image:img_path,&amp;#10;              size:size, pos:pos});&amp;#10;&amp;#10;            // Load text&amp;#10;            let text_height = size[1] / 2;&amp;#10;            this.text = new visual.TextStim({&amp;#10;              win:window, text:text,&amp;#10;              pos:pos, color:'black',&amp;#10;              height:text_height, anchorHoriz:'center',&amp;#10;              anchorVert:'center'});&amp;#10;              &amp;#10;            //stats&amp;#10;            this.left = pos[0] - size[0] / 2;&amp;#10;            this.right = pos[0] + size[0] / 2;&amp;#10;            this.top = pos[1] + size[1] / 2;&amp;#10;            this.bottom = pos[1] - size[1] / 2;&amp;#10;&amp;#10;            // Set auto draw&amp;#10;            this.setAutoDraw(true);&amp;#10;      }&amp;#10;&amp;#10;      setAutoDraw(autoDraw) {&amp;#10;            this.img.setAutoDraw(autoDraw);&amp;#10;            this.text.setAutoDraw(autoDraw);&amp;#10;      }&amp;#10;  &amp;#10;      contains(pos) {&amp;#10;            let px = pos[0];&amp;#10;            let py = pos[1];&amp;#10;            let on_button = (&amp;#10;                px &gt; this.left &amp;&amp;&amp;#10;                px &lt; this.right &amp;&amp;&amp;#10;                py &gt; this.bottom &amp;&amp;&amp;#10;                py &lt; this.top&amp;#10;            );&amp;#10;            return on_button&amp;#10;      }&amp;#10;}&amp;#10;function funcCreateButton(window, text, pos, size) {&amp;#10;    let button = new SelfDefinedButton(window, text, pos, size);&amp;#10;    return button;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;// function to create stim or response objects&amp;#10;// define the function for display&amp;#10;function funcDrawStim(window, ori, loc, radius) {&amp;#10;    var grating;&amp;#10;    grating = new visual.GratingStim({&quot;win&quot;: window, &quot;tex&quot;: &quot;sin&quot;, &quot;mask&quot;: &quot;gauss&quot;, &quot;sf&quot;: 5.0, &quot;size&quot;: (radius * 2), &quot;ori&quot;: ori, &quot;pos&quot;: loc});&amp;#10;    grating.autoDraw = true;&amp;#10;    return grating;&amp;#10;}&amp;#10;&amp;#10;class WheelClickRegister {&amp;#10;    constructor(wheel, pos_point, opp_point, wheel_pos) {&amp;#10;        this.wheel = wheel;&amp;#10;        this.wheel_c = wheel_pos[0];&amp;#10;        this.wheel_r = wheel_pos[1];&amp;#10;        this.click_radius = wheel_pos[2];&amp;#10;        this.point_click_selected = pos_point;&amp;#10;        this.opposite_point = opp_point;&amp;#10;        this.clicks_x = [];&amp;#10;        this.clicks_y = [];&amp;#10;        this.clicks_time = [];&amp;#10;        this.is_valid = true;&amp;#10;        this.ever_have_response = false;&amp;#10;        this.wheel.setAutoDraw(true);&amp;#10;        this.point_click_selected.setAutoDraw(false);&amp;#10;        this.opposite_point.setAutoDraw(false);&amp;#10;    }&amp;#10;    register_click(mouse_position, mouse_time) {&amp;#10;        var click_max_r, click_min_r, mouse_r, mouse_x, mouse_y, opp_select_x, opp_select_y, pos_select_x, pos_select_y, pos_x_scaled, pos_y_scaled;&amp;#10;        mouse_x = mouse_position[0];&amp;#10;        mouse_y = mouse_position[1];&amp;#10;        mouse_r = Math.sqrt((Math.pow((mouse_x - this.wheel_c[0]), 2) + Math.pow((mouse_y - this.wheel_c[1]), 2)));&amp;#10;        click_min_r = (this.wheel_r - this.click_radius * CLICK_REGION_FACTOR);&amp;#10;        click_max_r = (this.wheel_r + this.click_radius * CLICK_REGION_FACTOR);&amp;#10;        if (((mouse_r &gt;= click_min_r) &amp;&amp; (mouse_r &lt;= click_max_r))) {&amp;#10;            this.ever_have_response = true;&amp;#10;            pos_x_scaled = ((mouse_x - this.wheel_c[0]) / mouse_r);&amp;#10;            pos_y_scaled = ((mouse_y - this.wheel_c[1]) / mouse_r);&amp;#10;            pos_select_x = (this.wheel_c[0] + (pos_x_scaled * this.wheel_r));&amp;#10;            pos_select_y = (this.wheel_c[1] + (pos_y_scaled * this.wheel_r));&amp;#10;            opp_select_x = (this.wheel_c[0] - (pos_x_scaled * this.wheel_r));&amp;#10;            opp_select_y = (this.wheel_c[1] - (pos_y_scaled * this.wheel_r));&amp;#10;            if ((this.clicks_x.length === 0)) {&amp;#10;                this.point_click_selected.autoDraw = true;&amp;#10;                this.opposite_point.autoDraw = true;&amp;#10;            }&amp;#10;            this.point_click_selected.setPos([pos_select_x, pos_select_y]);&amp;#10;            this.opposite_point.setPos([opp_select_x, opp_select_y]);&amp;#10;            this.clicks_x.push(pos_x_scaled);&amp;#10;            this.clicks_y.push(pos_y_scaled);&amp;#10;            this.clicks_time.push(mouse_time);&amp;#10;        }&amp;#10;    }&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.wheel.setAutoDraw(autoDraw);&amp;#10;        this.point_click_selected.setAutoDraw(autoDraw);&amp;#10;        this.opposite_point.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;    compute_response() {&amp;#10;        var deg, rad, x_resp, y_resp;&amp;#10;        if (this.ever_have_response) {&amp;#10;            x_resp = this.clicks_x.slice((- 1))[0];&amp;#10;            y_resp = this.clicks_y.slice((- 1))[0];&amp;#10;            rad = Math.atan2(y_resp, x_resp);&amp;#10;            deg = rad * (180 / Math.PI);&amp;#10;            deg = (90 - deg) % 180;&amp;#10;            if (deg &lt; 0) {&amp;#10;                deg += 180;&amp;#10;            }&amp;#10;            return deg;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class FakeWheelClickRegister {&amp;#10;    constructor(wheel, wheel_pos) {&amp;#10;        this.wheel = wheel;&amp;#10;        this.wheel_c = wheel_pos[0];&amp;#10;        this.wheel_r = wheel_pos[1];&amp;#10;        this.click_radius = wheel_pos[2];&amp;#10;        &amp;#10;        // Initialize properties&amp;#10;        this.is_valid = false;&amp;#10;        this.has_response = false;&amp;#10;        &amp;#10;        // Initialize and set auto draw&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;&amp;#10;    register_click(mouse_position, mouse_time) {&amp;#10;        let mouse_x = mouse_position[0];&amp;#10;        let mouse_y = mouse_position[1];&amp;#10;        let mouse_r = Math.sqrt(&amp;#10;            Math.pow(mouse_x - this.wheel_c[0], 2) +  &amp;#10;            Math.pow(mouse_y - this.wheel_c[1], 2)&amp;#10;        );&amp;#10;&amp;#10;        let click_min_r = this.wheel_r - this.click_radius * CLICK_REGION_FACTOR;&amp;#10;        let click_max_r = this.wheel_r + this.click_radius * CLICK_REGION_FACTOR;&amp;#10;        &amp;#10;        if (mouse_r &gt;= click_min_r &amp;&amp; mouse_r &lt;= click_max_r) {&amp;#10;            // The click is within the valid region&amp;#10;            this.has_response = true;&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.wheel.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class CanvasDrawRegister {&amp;#10;    constructor(canvas, strokes, redo_button, canvas_pos, redo_button_pos) {&amp;#10;        this.canvas = canvas;&amp;#10;        this.strokes = strokes;&amp;#10;        this.redo_button = redo_button;&amp;#10;        this.canvas_c = canvas_pos[0];&amp;#10;        this.canvas_r = canvas_pos[1];&amp;#10;        this.redo_button_pos = redo_button_pos;&amp;#10;        &amp;#10;        // this is a valid response object&amp;#10;        this.is_valid = true;&amp;#10;        &amp;#10;        // temporary inner states&amp;#10;        this.all_drawings_x = [];&amp;#10;        this.all_drawings_y = [];&amp;#10;        this.all_drawings_time = [];&amp;#10;        this.drawing_index = 0;&amp;#10;        this.initialize_drawing();&amp;#10;        &amp;#10;        // flag for whether there are any response&amp;#10;        this.ever_have_response = false;&amp;#10;        &amp;#10;        // if we have strokes not saved yet&amp;#10;        this.has_unsaved_drawing = false;&amp;#10;        this.has_unsaved_stroke = false;&amp;#10;        &amp;#10;        // start drawing&amp;#10;        this.canvas.setAutoDraw(true);&amp;#10;        this.redo_button.setAutoDraw(true);&amp;#10;        &amp;#10;    }&amp;#10;    initialize_drawing() {&amp;#10;        var stroke;&amp;#10;        this.stroke_time = [];&amp;#10;        this.stroke_data_x = [];&amp;#10;        this.stroke_data_y = [];&amp;#10;        this.stroke_index = 0;&amp;#10;        this.current_vertices = [];&amp;#10;        this.current_stroke_x = [];&amp;#10;        this.current_stroke_y = [];&amp;#10;        this.current_stroke_time = [];&amp;#10;        this.has_started_drawing = false;&amp;#10;        this.has_stopped_drawing = true;&amp;#10;        this.last_x = null;&amp;#10;        this.last_y = null;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(this.strokes.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            stroke = this.strokes[i];&amp;#10;            stroke.autoDraw = false;&amp;#10;            stroke.vertices = [[0, 0]];&amp;#10;        }&amp;#10;    }&amp;#10;    register_mouse(mouse_position, mouse_time) {&amp;#10;        var mouse_r, mouse_x, mouse_y, on_confirm, on_redo, pos_x_scaled, pos_y_scaled, stroke;&amp;#10;        let has_redo = false; // sent back to timer&amp;#10;        stroke = this.strokes[this.stroke_index];&amp;#10;        if ((this.stroke_index &lt; this.strokes.length)) {&amp;#10;            mouse_x = mouse_position[0];&amp;#10;            mouse_y = mouse_position[1];&amp;#10;            mouse_r = Math.sqrt((Math.pow((mouse_x - this.canvas_c[0]), 2) + Math.pow((mouse_y - this.canvas_c[1]), 2)));&amp;#10;            if ((mouse_r &lt; this.canvas_r)) {&amp;#10;                this.ever_have_response = true;&amp;#10;                if ((! this.has_started_drawing)) {&amp;#10;                    stroke.autoDraw = true;&amp;#10;                    this.current_vertices = [];&amp;#10;                    this.current_stroke_x = [];&amp;#10;                    this.current_stroke_y = [];&amp;#10;                    this.current_stroke_time = [];&amp;#10;                    this.has_started_drawing = true;&amp;#10;                    this.has_stopped_drawing = false;&amp;#10;                }&amp;#10;                if ((((this.last_x === null) || (Math.abs((this.last_x - mouse_x)) &gt; 0.01)) || (Math.abs((this.last_y - mouse_y)) &gt; 0.01))) {&amp;#10;                    pos_x_scaled = (mouse_x - this.canvas_c[0]) / this.canvas_r;&amp;#10;                    pos_y_scaled = (mouse_y - this.canvas_c[1]) / this.canvas_r;&amp;#10;                    this.current_vertices.push(mouse_position);&amp;#10;                    this.current_stroke_x.push(pos_x_scaled);&amp;#10;                    this.current_stroke_y.push(pos_y_scaled);&amp;#10;                    this.current_stroke_time.push(mouse_time);&amp;#10;                    stroke.vertices = this.current_vertices;&amp;#10;                    this.has_unsaved_stroke = true;&amp;#10;                    this.has_unsaved_drawing = true;&amp;#10;                    this.last_x = mouse_x;&amp;#10;                    this.last_y = mouse_y;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if (this.has_started_drawing) {&amp;#10;                    this.deregister_mouse(mouse_position, mouse_time);&amp;#10;                    this.has_stopped_drawing = false;&amp;#10;                } else {&amp;#10;                    if (this.has_stopped_drawing) {&amp;#10;                        on_redo = (((mouse_x &gt; this.redo_button_pos[0]) &amp; (mouse_x &lt; this.redo_button_pos[1])) &amp; ((mouse_y &gt; this.redo_button_pos[3]) &amp; (mouse_y &lt; this.redo_button_pos[2])));&amp;#10;                        if ((on_redo &amp;&amp; this.has_unsaved_drawing)) {&amp;#10;                            // only allow redo if it does not exceed the limit:&amp;#10;                            if (this.drawing_index &lt; MAX_DRAWINGS) {&amp;#10;                                // save the drawings&amp;#10;                                this.save_drawing();&amp;#10;                                // clear the canvas&amp;#10;                                this.initialize_drawing();&amp;#10;                                // later signal to the timer&amp;#10;                                has_redo = true;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        return has_redo;&amp;#10;    }&amp;#10;&amp;#10;    deregister_mouse(mouse_position, mouse_time) {&amp;#10;        this.has_stopped_drawing = true;&amp;#10;        if (this.has_started_drawing) {&amp;#10;            this.save_stroke();&amp;#10;            this.has_started_drawing = false;&amp;#10;        }&amp;#10;    }&amp;#10;    save_stroke() {&amp;#10;        // only save valid stroke&amp;#10;        if (this.current_stroke_time.length &gt; 0) {&amp;#10;            this.stroke_time.push(this.current_stroke_time);&amp;#10;            this.stroke_data_x.push(this.current_stroke_x);&amp;#10;            this.stroke_data_y.push(this.current_stroke_y);&amp;#10;            this.stroke_index += 1;&amp;#10;        }&amp;#10;        // mark the stroke has been updated&amp;#10;        this.has_unsaved_stroke = false;&amp;#10;    }&amp;#10;    save_drawing() {&amp;#10;        if (this.stroke_time.length &gt; 0) {&amp;#10;            this.all_drawings_time.push(this.stroke_time);&amp;#10;            this.all_drawings_x.push(this.stroke_data_x);&amp;#10;            this.all_drawings_y.push(this.stroke_data_y);&amp;#10;            this.drawing_index += 1;&amp;#10;        }&amp;#10;        // mark that drawing has been saved&amp;#10;        this.has_unsaved_drawing = false;&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.canvas.autoDraw = autoDraw;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(this.strokes.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            this.strokes[i].autoDraw = autoDraw;&amp;#10;        }&amp;#10;        this.redo_button.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;&amp;#10;    compute_response() {&amp;#10;        // convert response to orientation&amp;#10;        if (this.all_drawings_time.length &gt; 0) {&amp;#10;            let x_to_analyze = this.all_drawings_x[this.all_drawings_x.length - 1];&amp;#10;            let y_to_analyze = this.all_drawings_y[this.all_drawings_y.length - 1];&amp;#10;&amp;#10;            // The easiest way: start to end&amp;#10;            let x_resp = x_to_analyze[x_to_analyze.length - 1][x_to_analyze[x_to_analyze.length - 1].length - 1] - x_to_analyze[0][0];&amp;#10;            let y_resp = y_to_analyze[y_to_analyze.length - 1][y_to_analyze[y_to_analyze.length - 1].length - 1] - y_to_analyze[0][0];&amp;#10;&amp;#10;            // Compute all the rest&amp;#10;            let rad = Math.atan2(y_resp, x_resp);&amp;#10;            let deg = (rad * (180 / Math.PI)) % 180;&amp;#10;            deg = 90 - deg;&amp;#10;            deg = deg % 180;&amp;#10;            return deg;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class FakeCanvasDrawRegister {&amp;#10;    constructor(canvas, redo_button, canvas_pos, redo_button_pos) {&amp;#10;        this.canvas = canvas;&amp;#10;        this.redo_button = redo_button;&amp;#10;        this.canvas_c = canvas_pos[0];&amp;#10;        this.canvas_r = canvas_pos[1];&amp;#10;        this.redo_button_pos = redo_button_pos; // left, right, top, bottom&amp;#10;&amp;#10;        // Variables to keep track of unnecessary drawing&amp;#10;        this.is_valid = false;&amp;#10;        this.has_response = false;&amp;#10;&amp;#10;        // Initialization&amp;#10;        this.canvas.setAutoDraw(true);&amp;#10;        this.redo_button.setAutoDraw(false);&amp;#10;    }&amp;#10;&amp;#10;    register_mouse(mouse_position, mouse_time) {&amp;#10;        // Register clicks as invalid&amp;#10;        let mouse_x = mouse_position[0];&amp;#10;        let mouse_y = mouse_position[1];&amp;#10;        let mouse_r = Math.sqrt(&amp;#10;            Math.pow(mouse_x - this.canvas_c[0], 2) +&amp;#10;            Math.pow(mouse_y - this.canvas_c[1], 2)&amp;#10;        );&amp;#10;&amp;#10;        if (mouse_r &lt; this.canvas_r) {&amp;#10;            // The click is within the drawing&amp;#10;            this.has_response = true;&amp;#10;        }&amp;#10;&amp;#10;        return false; // Placeholder&amp;#10;    }&amp;#10;&amp;#10;    deregister_mouse(mouse_position, mouse_time) {&amp;#10;        // Placeholder for mouse deregistration&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.canvas.setAutoDraw(autoDraw);&amp;#10;        this.redo_button.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function funcDrawAdjustResponse(window, loc, draw_radius, click_radius, is_valid) {&amp;#10;    var draw_area_bottom_y, draw_area_x, draw_area_y, opposite_point, point_click_selected, response_wheel_obj, wheel, wheel_pos;&amp;#10;    draw_area_x = loc[0];&amp;#10;    draw_area_y = loc[1];&amp;#10;    draw_area_bottom_y = (draw_area_y - draw_radius);&amp;#10;    // create the wheel the circle to move along&amp;#10;    wheel_pos = [[loc[0], loc[1]], draw_radius, click_radius];&amp;#10;    let wheel_color = 'black';&amp;#10;    if (is_valid) {&amp;#10;        wheel_color = 'white';&amp;#10;    }&amp;#10;    wheel = funcCreateRoundPatch(&amp;#10;        window, [draw_area_x, draw_area_y], draw_radius, &amp;#10;        'gray', wheel_color);&amp;#10;    &amp;#10;    // create the handlers&amp;#10;    if (is_valid) {&amp;#10;        // create the handlers&amp;#10;        point_click_selected = funcCreateRoundPatch(&amp;#10;            window, [draw_area_x, draw_area_y], click_radius, &amp;#10;            'black', 'black');&amp;#10;        point_click_selected.setAutoDraw(false);&amp;#10;        opposite_point = funcCreateRoundPatch(&amp;#10;            window, [draw_area_x, draw_area_y], click_radius, &amp;#10;            'black', 'black');&amp;#10;        opposite_point.setAutoDraw(false);&amp;#10;        &amp;#10;        // register the response object&amp;#10;        response_wheel_obj = new WheelClickRegister(&amp;#10;            wheel, point_click_selected, opposite_point, wheel_pos);&amp;#10;    } else {&amp;#10;        response_wheel_obj = new FakeWheelClickRegister(wheel, wheel_pos);&amp;#10;    }&amp;#10;    return response_wheel_obj;&amp;#10;}&amp;#10;&amp;#10;function funcDrawDrawResponse(window, loc, draw_radius, is_valid) {&amp;#10;    var button_x, button_y, canvas, canvas_pos, confirm_button, confirm_button_pos, confirm_button_x, draw_area_bottom_y, draw_area_x, draw_area_y, new_stroke, redo_button, redo_button_pos, redo_button_x, response_canvas_obj, strokes;&amp;#10;    strokes = [];&amp;#10;    draw_area_x = loc[0];&amp;#10;    draw_area_y = loc[1];&amp;#10;    draw_area_bottom_y = (draw_area_y - draw_radius);&amp;#10;    &amp;#10;    // define the canvas&amp;#10;    canvas_pos = [[loc[0], loc[1]], draw_radius];&amp;#10;    if (is_valid) {&amp;#10;        canvas = funcCreateEnabledCanvas(&amp;#10;            window, [draw_area_x, draw_area_y], draw_radius);&amp;#10;    } else {&amp;#10;        canvas = funcCreateDisabledCanvas(&amp;#10;            window, [draw_area_x, draw_area_y], draw_radius);&amp;#10;    }&amp;#10;&amp;#10;    // define the button&amp;#10;    button_width = draw_radius / 1.8 * 1.0;&amp;#10;    button_height = draw_radius / 1.8 * 0.5;&amp;#10;    button_x = draw_area_x;&amp;#10;    button_y = ((draw_area_bottom_y - (button_height / 2)) - 0.01);&amp;#10;    redo_button_x = button_x;&amp;#10;    redo_button_pos = [(redo_button_x - (button_width / 2)), (redo_button_x + (button_width / 2)), (button_y + (button_height / 2)), (button_y - (button_height / 2))];&amp;#10;    redo_button = funcCreateButton(window, &amp;#10;        'redo', [redo_button_x, button_y], [button_width, button_height])&amp;#10;&amp;#10;    if (is_valid) {&amp;#10;        // define strokes&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(MAX_STROKES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            new_stroke = new visual.ShapeStim({&amp;#10;                &quot;win&quot;: window, &amp;#10;                &quot;vertices&quot;: [(0, 0)],&amp;#10;                &quot;closeShape&quot;: false,&amp;#10;                &quot;lineWidth&quot;: 5, &amp;#10;                &quot;lineColor&quot;: &quot;black&quot;});&amp;#10;            new_stroke.autoDraw = false;&amp;#10;            strokes.push(new_stroke);&amp;#10;        }&amp;#10;        response_canvas_obj = new CanvasDrawRegister(&amp;#10;            canvas, strokes, redo_button, &amp;#10;            canvas_pos, redo_button_pos);&amp;#10;    } else {&amp;#10;        response_canvas_obj = new FakeCanvasDrawRegister(&amp;#10;            canvas, redo_button,&amp;#10;            canvas_pos, redo_button_pos);&amp;#10;    }&amp;#10;    return response_canvas_obj;&amp;#10;}&amp;#10;&amp;#10;// display cue&amp;#10;class SingleCueObject {&amp;#10;    constructor(window, loc, cue_code, radius, cue_color=null) {&amp;#10;        let cue_r = radius * 0.3;&amp;#10;        let cue_type = Number(cue_code);&amp;#10;        // console.log(`CUE DEBUG: cue code ${cue_code}, cue code number ${cue_type}`);&amp;#10;        // throw new error(&quot;DEBUG&quot;);&amp;#10;        let cue_ori = 180 * Math.random();&amp;#10;        this.cue_object = this.load_report_cue(window, loc, [cue_r, cue_r], cue_ori, cue_type, cue_color);&amp;#10;        &amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;    &amp;#10;    load_report_cue(window, loc, cue_size, cue_ori, cue_type, cue_color) {&amp;#10;        let cue_img_path = null;&amp;#10;        let color_info = cue_color === null ? '' : `_${cue_color}`;&amp;#10;        if (cue_type === 99) {&amp;#10;            cue_img_path = `resources/dot${color_info}.png`;&amp;#10;        } else if (cue_type === 1) {&amp;#10;            cue_img_path = `resources/star${color_info}.png`;&amp;#10;        } else if (cue_type === 0) {&amp;#10;            cue_img_path = `resources/empty_star${color_info}.png`;&amp;#10;        } else {&amp;#10;            throw new Error(`Unknown cue type ${cue_type}`);&amp;#10;        }&amp;#10;&amp;#10;        let cue_obj = new visual.ImageStim({&amp;#10;            win: window,&amp;#10;            image: cue_img_path,&amp;#10;            ori: cue_ori,&amp;#10;            size: cue_size,&amp;#10;            pos: loc&amp;#10;        });&amp;#10;        return cue_obj;&amp;#10;    }&amp;#10;    &amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        this.cue_object.setAutoDraw(auto_draw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class CueObject {&amp;#10;    constructor(window, loc, cue_codes, radius) {&amp;#10;        this.cue_objects = [];&amp;#10;        let cue_r = radius * 0.3;&amp;#10;        &amp;#10;        // Create the center bar&amp;#10;        let bar_object = this.load_report_cue(&amp;#10;            window, loc, [cue_r * 1.2, cue_r * 0.4], 0, 0);&amp;#10;        this.cue_objects.push(bar_object);&amp;#10;        &amp;#10;        // Create the cues&amp;#10;        let cue_locs = [&amp;#10;            [loc[0] - cue_r, loc[1]],&amp;#10;            [loc[0] + cue_r, loc[1]]&amp;#10;        ];&amp;#10;        &amp;#10;        for (let i = 0; i &lt; 2; i++) {&amp;#10;            let cue_object = new SingleCueObject(&amp;#10;                window, cue_locs[i], cue_codes[i], radius);&amp;#10;            this.cue_objects.push(cue_object);&amp;#10;        }&amp;#10;                &amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;&amp;#10;    load_report_cue(window, loc, cue_size, cue_ori, cue_type) {&amp;#10;        let cue_img_path;&amp;#10;        if (cue_type === 0) {&amp;#10;            cue_img_path = &quot;resources/bar.png&quot;;&amp;#10;        } else {&amp;#10;            throw new Error(`Unknown cue type ${cue_type}`);&amp;#10;        }&amp;#10;        &amp;#10;        let cue_obj = new visual.ImageStim({&amp;#10;            win: window,&amp;#10;            image: cue_img_path,&amp;#10;            ori: cue_ori,&amp;#10;            size: cue_size,&amp;#10;            pos: loc&amp;#10;        });&amp;#10;        &amp;#10;        return cue_obj;&amp;#10;    }&amp;#10;        &amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        for (let obj of this.cue_objects) {&amp;#10;            obj.setAutoDraw(auto_draw);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function funcDrawSingleCue(window, loc, cue_code, radius, cue_color=null) {&amp;#10;    let cue_obj = new SingleCueObject(window, loc, cue_code, radius, cue_color);&amp;#10;    return cue_obj;&amp;#10;}&amp;#10;&amp;#10;function funcDrawCue(window, loc, cue_codes, radius) {&amp;#10;    let cue_obj = new CueObject(window, loc, cue_codes, radius);&amp;#10;    return cue_obj;&amp;#10;}&amp;#10;&amp;#10;// display implicit cue&amp;#10;class ImplicitCueObject {&amp;#10;    constructor(window, loc, radius, n_split, regions, offset) {&amp;#10;        this.n_split = n_split;&amp;#10;        this.cue_objects = [];&amp;#10;        let cue_r = radius * 0.5;&amp;#10;        &amp;#10;        // Create the center bar&amp;#10;        let back_object = this.load_report_cue(&amp;#10;            window, loc, [cue_r, cue_r], 0, offset);&amp;#10;        this.cue_objects.push(back_object);&amp;#10;&amp;#10;        // Create the cues&amp;#10;        for (let i = 0; i &lt; regions.length; i++) {&amp;#10;            let region_id = regions[i];&amp;#10;            let cue_ori = 180 / this.n_split * region_id;&amp;#10;            let cue_object = this.load_report_cue(&amp;#10;                window, loc, [cue_r, cue_r], 1, cue_ori+offset);&amp;#10;            this.cue_objects.push(cue_object);&amp;#10;        }&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;&amp;#10;    load_report_cue(window, loc, cue_size, cue_type, cue_ori=0) {&amp;#10;        let cue_img_path = null;&amp;#10;        if (cue_type === 0) {&amp;#10;            cue_img_path = `resources/implicit_cue_back_${this.n_split}.png`;&amp;#10;        } else if (cue_type === 1) {&amp;#10;            cue_img_path = `resources/implicit_cue_front_${this.n_split}.png`;&amp;#10;        }&amp;#10;        let cue_obj = new visual.ImageStim({&amp;#10;            win: window, image: cue_img_path,&amp;#10;            ori: cue_ori, size: cue_size, pos: loc&amp;#10;        });&amp;#10;        return cue_obj;&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        this.cue_objects.forEach(obj =&gt; {&amp;#10;            obj.setAutoDraw(auto_draw);&amp;#10;        });&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function funcDrawArrow(window, radius, start_loc, end_loc) {&amp;#10;  // Compute orientation&amp;#10;  let xDir = end_loc[0] - start_loc[0];&amp;#10;  let yDir = end_loc[1] - start_loc[1];&amp;#10;  let arrowRad = Math.atan2(-yDir, xDir);&amp;#10;  let arrowOri = (arrowRad * (180 / Math.PI)) % 180;&amp;#10;  let arrowPos = [&amp;#10;        (end_loc[0] + start_loc[0])/2, &amp;#10;        (end_loc[1] + start_loc[1])/2];&amp;#10;  let cueSize = radius * 0.3;&amp;#10;&amp;#10;  let arrowImgPath = &quot;resources/arrow.png&quot;;&amp;#10;  let arrow = new visual.ImageStim({&amp;#10;    win: window,&amp;#10;    image: arrowImgPath,&amp;#10;    ori: arrowOri,&amp;#10;    pos: arrowPos,&amp;#10;    size: [cueSize, cueSize]&amp;#10;  });&amp;#10;&amp;#10;  arrow.setAutoDraw(true);&amp;#10;  return arrow;&amp;#10;}&amp;#10;&amp;#10;function funcCheckNoPending (objs) {&amp;#10;  let no_unanswered = true;&amp;#10;  for (let i = 0; i &lt; objs.length; i++) {&amp;#10;    let obj = objs[i];&amp;#10;    if (obj.is_valid) {&amp;#10;      no_unanswered = no_unanswered &amp;&amp; obj.ever_have_response;&amp;#10;    }&amp;#10;  }&amp;#10;  return no_unanswered;&amp;#10;}&amp;#10;&amp;#10;// functions for feedback&amp;#10;// to show click answer&amp;#10;class ClickAnswerObject {&amp;#10;    constructor(window, ori, loc, radius, click_radius) {&amp;#10;        var ans_point_pos, converted_pos, opp_point_pos;&amp;#10;        this.components = [];&amp;#10;        this.wheel_r = radius;&amp;#10;        this.wheel_c = [loc[0], loc[1]];&amp;#10;        this.click_radius = click_radius;&amp;#10;        this.wheel = funcCreateRoundPatch(&amp;#10;            window, this.wheel_c, this.wheel_r, &amp;#10;            'gray', 'white');&amp;#10;        this.components.push(this.wheel);&amp;#10;        if ((ori !== null)) {&amp;#10;            converted_pos = this.convert_ori_to_pos(ori);&amp;#10;            ans_point_pos = converted_pos[0];&amp;#10;            opp_point_pos = converted_pos[1];&amp;#10;            this.point_click_selected = funcCreateRoundPatch(&amp;#10;                window, ans_point_pos, this.click_radius, &amp;#10;                'black', 'black');&amp;#10;            this.opposite_point = funcCreateRoundPatch(&amp;#10;                window, opp_point_pos, this.click_radius,&amp;#10;                'black', 'black');&amp;#10;            this.components.push(this.point_click_selected);&amp;#10;            this.components.push(this.opposite_point);&amp;#10;        }&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        var comp, n_comp;&amp;#10;        n_comp = this.components.length;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(n_comp), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            comp = this.components[i];&amp;#10;            comp.setAutoDraw(autoDraw);&amp;#10;        }&amp;#10;    }&amp;#10;    convert_ori_to_pos(ori) {&amp;#10;        var deg, rad, x_ans, x_opp, y_ans, y_opp;&amp;#10;        deg = (90 - ori);&amp;#10;        deg = (deg % 180);&amp;#10;        rad = deg * Math.PI / 180;&amp;#10;        x_ans = (this.wheel_c[0] + (Math.cos(rad) * this.wheel_r));&amp;#10;        y_ans = (this.wheel_c[1] + (Math.sin(rad) * this.wheel_r));&amp;#10;        x_opp = (this.wheel_c[0] - (Math.cos(rad) * this.wheel_r));&amp;#10;        y_opp = (this.wheel_c[1] - (Math.sin(rad) * this.wheel_r));&amp;#10;        return [[x_ans, y_ans], [x_opp, y_opp]];&amp;#10;    }&amp;#10;}&amp;#10;class DrawAnswerObject {&amp;#10;    constructor(window, response, is_ori, loc, radius) {&amp;#10;        var n_strokes, n_vertices, new_stroke, strokes, vertices, vx, vy, x_strokes, xs, y_strokes, ys;&amp;#10;        this.components = [];&amp;#10;        this.strokes = [];&amp;#10;        this.canvas_r = radius;&amp;#10;        this.canvas_c = [loc[0], loc[1]];&amp;#10;        this.canvas = funcCreateEnabledCanvas(&amp;#10;            window, this.canvas_c, this.canvas_r);&amp;#10;        this.components.push(this.canvas);&amp;#10;        if ((response !== null)) {&amp;#10;            strokes = response;&amp;#10;            if (is_ori) {&amp;#10;                strokes = this.convert_ori_to_drawing(response);&amp;#10;            }&amp;#10;            x_strokes = strokes[0];&amp;#10;            y_strokes = strokes[1];&amp;#10;            n_strokes = x_strokes.length;&amp;#10;            for (var i, _pj_c = 0, _pj_a = util.range(n_strokes), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                i = _pj_a[_pj_c];&amp;#10;                xs = x_strokes[i];&amp;#10;                ys = y_strokes[i];&amp;#10;                n_vertices = xs.length;&amp;#10;                vertices = [];&amp;#10;                for (var j, _pj_f = 0, _pj_d = util.range(n_vertices), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                    j = _pj_d[_pj_f];&amp;#10;                    vx = (this.canvas_c[0] + (xs[j] * this.canvas_r));&amp;#10;                    vy = (this.canvas_c[1] + (ys[j] * this.canvas_r));&amp;#10;                    vertices.push([vx, vy]);&amp;#10;                }&amp;#10;                new_stroke = new visual.ShapeStim({&quot;win&quot;: window, &quot;vertices&quot;: vertices, &quot;fillColor&quot;: null, &quot;lineWidth&quot;: 5, &quot;lineColor&quot;: &quot;black&quot;, &quot;closeShape&quot;: false});&amp;#10;                this.strokes.push(new_stroke);&amp;#10;                this.components.push(new_stroke);&amp;#10;            }&amp;#10;        }&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        var comp, n_comp;&amp;#10;        n_comp = this.components.length;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(n_comp), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            comp = this.components[i];&amp;#10;            comp.setAutoDraw(autoDraw);&amp;#10;        }&amp;#10;    }&amp;#10;    convert_ori_to_drawing(ori) {&amp;#10;        var deg, drawing, r_scale, rad, x1, x2, y1, y2;&amp;#10;        deg = (90 - ori);&amp;#10;        deg = (deg % 180);&amp;#10;        rad = deg * Math.PI / 180;&amp;#10;        r_scale = 0.7;&amp;#10;        x1 = (Math.cos(rad) * r_scale);&amp;#10;        x2 = ((- Math.cos(rad)) * r_scale);&amp;#10;        y1 = (Math.sin(rad) * r_scale);&amp;#10;        y2 = ((- Math.sin(rad)) * r_scale);&amp;#10;        drawing = [[[x1, x2]], [[y1, y2]]];&amp;#10;        return drawing;&amp;#10;    }&amp;#10;}&amp;#10;class FeedbackText {&amp;#10;    constructor(window, text, loc, radius) {&amp;#10;        this.text = text;&amp;#10;        this.text_object = new visual.TextStim({&amp;#10;            &quot;win&quot;: window, &quot;text&quot;: this.text, &amp;#10;            &quot;pos&quot;: [loc[0], loc[1]], &quot;height&quot;: (radius * 0.2), &amp;#10;            &quot;color&quot;: &quot;black&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;});&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.text_object.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// to fix the defined issues...&amp;#10;function funcCreateClickAnswerObject(window, ori, loc, radius, click_radius) {&amp;#10;    return new ClickAnswerObject(window, ori, loc, radius, click_radius);&amp;#10;}&amp;#10;&amp;#10;function funcCreateDrawAnswerObject(window, response, is_ori, loc, radius) {&amp;#10;    return new DrawAnswerObject(window, response, is_ori, loc, radius);&amp;#10;}&amp;#10;&amp;#10;function funcCreateFeedbackText(window, text, loc, radius) {&amp;#10;    return new FeedbackText(window, text, loc, radius);&amp;#10;}&amp;#10;&amp;#10;class TrainingCue {&amp;#10;    constructor(window, text, target_loc, display_r) {&amp;#10;        // Get the location&amp;#10;        let vec_x = (1 - 2 * (target_loc[0] &lt; 0)) * display_r / Math.sqrt(2);&amp;#10;        let vec_y = (1 - 2 * (target_loc[1] &lt; 0)) * display_r / Math.sqrt(2);&amp;#10;        let x_offset_scale = 1;&amp;#10;        let text_loc = [&amp;#10;            target_loc[0] + vec_x * (1.4+x_offset_scale),&amp;#10;            target_loc[1] + vec_y * 1.4&amp;#10;        ];&amp;#10;&amp;#10;        // Create the text&amp;#10;        this.text = text;&amp;#10;        this.text_object = new visual.TextStim({&amp;#10;            win: psychoJS.window,&amp;#10;            text: this.text,&amp;#10;            pos: text_loc,&amp;#10;            height: display_r * 0.2,&amp;#10;            color: new util.Color('white'),&amp;#10;            colorSpace: 'rgb'&amp;#10;        });&amp;#10;&amp;#10;        // Create the arrow&amp;#10;        let arrow_start_loc = [&amp;#10;            target_loc[0] + vec_x * (1.2+x_offset_scale),&amp;#10;            target_loc[1] + vec_y * 1.2&amp;#10;        ];&amp;#10;        let arrow_end_loc = [&amp;#10;            target_loc[0] + vec_x * (1.02+x_offset_scale),&amp;#10;            target_loc[1] + vec_y * 1.02&amp;#10;        ];&amp;#10;        this.arrow = funcDrawArrow(&amp;#10;            psychoJS.window, display_r * 0.5,&amp;#10;            arrow_start_loc, arrow_end_loc&amp;#10;        );&amp;#10;&amp;#10;        // Auto draw --&gt; true&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.text_object.setAutoDraw(autoDraw);&amp;#10;        this.arrow.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class NoisePatch {&amp;#10;    constructor(window, loc, display_r) {&amp;#10;        let noise_img_path = &quot;resources/noise.png&quot;;&amp;#10;        let noise_ori = 180 * Math.random();&amp;#10;        this.obj = new visual.ImageStim({&amp;#10;            win: window,&amp;#10;            image: noise_img_path,&amp;#10;            ori: noise_ori,&amp;#10;            size: 2*display_r,&amp;#10;            pos: loc&amp;#10;        });&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.obj.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class DefaultFixation {&amp;#10;    constructor(window) {&amp;#10;        // Create a new ShapeStim object with a cross shape&amp;#10;        let white_color = new util.Color(&quot;white&quot;);&amp;#10;        this.fixation = new visual.ShapeStim({&amp;#10;            &quot;win&quot;: window,&amp;#10;            &quot;vertices&quot;: 'cross',&amp;#10;            &quot;size&quot;: [0.06, 0.06],  &amp;#10;            &quot;lineWidth&quot;: 1,&amp;#10;            &quot;lineColor&quot;: white_color, &amp;#10;            &quot;fillColor&quot;: white_color&amp;#10;        });&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.fixation.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# show the cursor&amp;#10;win.mouseVisible = True" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// show the cursor&amp;#10;psychoJS.window.mouseVisible = true;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareComponents" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prepareExperiment">
      <RoutineSettingsComponent name="prepareExperiment" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareExperiment" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareExperiment" plugin="None">
        <Param val="VALID_N_REGIONS = [4,]&amp;#10;&amp;#10;class StimSampler:&amp;#10;    def __init__(self, n_sample_regions):&amp;#10;        if n_sample_regions not in VALID_N_REGIONS:&amp;#10;            raise ValueError(&amp;#10;                f'{VALID_N_REGIONS} is not a valid number of sample regions ')&amp;#10;        self.n_sample_regions = n_sample_regions&amp;#10;        self.count = 0&amp;#10;        &amp;#10;    def sample_sample_region(self, sample_strategy):&amp;#10;        result_regions = None&amp;#10;        if self.n_sample_regions == 4:&amp;#10;            if sample_strategy == 'single':&amp;#10;                result_regions = self.sample_single_sample_region()&amp;#10;            elif sample_strategy == 'adjacent':&amp;#10;                result_regions = self.sample_adjacent_sample_region()&amp;#10;            elif sample_strategy == 'orthogonal':&amp;#10;                result_regions = self.sample_orthogonal_sample_region()&amp;#10;            elif sample_strategy == 'all':&amp;#10;                result_regions = self.sample_all_sample_region()&amp;#10;            elif sample_strategy == 'same':&amp;#10;                result_regions = self.sample_same_sample_region()&amp;#10;            elif sample_strategy == 'opp':&amp;#10;                result_regions = self.sample_opp_sample_region()&amp;#10;            elif sample_strategy == 'mixed':&amp;#10;                result_regions = self.sample_mixed_sample_region()&amp;#10;            else:&amp;#10;                raise ValueError(&amp;#10;                    f'{sample_strategy} is not valid for '&amp;#10;                    f'for {self.n_sample_regions} regions')&amp;#10;        else:&amp;#10;            raise NotImplementedError(f'{sample_strategy} not implemented')&amp;#10;        return result_regions&amp;#10;        &amp;#10;    def sample_single_sample_region(self):&amp;#10;        region = random.randint(0, self.n_sample_regions - 1)&amp;#10;        return [region,]&amp;#10;    &amp;#10;    def sample_adjacent_sample_region(self):&amp;#10;        region_1 = random.randint(0, self.n_sample_regions - 1)&amp;#10;        region_2 = (region_1 + 1) % self.n_sample_regions&amp;#10;        return [region_1, region_2]&amp;#10;        &amp;#10;    def sample_orthogonal_sample_region(self):&amp;#10;        region_1 = random.randint(0, self.n_sample_regions - 1)&amp;#10;        region_2 = (region_1 + self.n_sample_regions // 2) % self.n_sample_regions&amp;#10;        return [region_1, region_2]&amp;#10;        &amp;#10;    def sample_all_sample_region(self):&amp;#10;        regions = []&amp;#10;        for i in range(self.n_sample_regions):&amp;#10;            regions.append(i)&amp;#10;        return regions&amp;#10;        &amp;#10;    def sample_same_sample_region(self):&amp;#10;        big_region_id = random.randint(0, 1)&amp;#10;        region_1 = big_region_id * 2 + random.randint(0, 1)&amp;#10;        region_2 = big_region_id * 2 + random.randint(0, 1)&amp;#10;        return [region_1, region_2]&amp;#10;        &amp;#10;    def sample_opp_sample_region(self):&amp;#10;        big_region_id = random.randint(0, 1)&amp;#10;        region_1 = big_region_id * 2 + random.randint(0, 1)&amp;#10;        region_2 = (1 - big_region_id) * 2 + random.randint(0, 1)&amp;#10;        return [region_1, region_2]&amp;#10;        &amp;#10;    def sample_mixed_sample_region(self):&amp;#10;        region_1 = random.randint(0, 3)&amp;#10;        region_2 = random.randint(0, 3)&amp;#10;        return [region_1, region_2]&amp;#10;        &amp;#10;    def sample_from_given_regions(self, regions, allow_same_region):&amp;#10;        # sample the regions to sample from&amp;#10;        stim_region_ids_selected = []&amp;#10;        if allow_same_region:&amp;#10;            for i in range(2):&amp;#10;                stim_region_id = random.choice(regions)&amp;#10;                stim_region_ids_selected.append(stim_region_id)&amp;#10;        else:&amp;#10;            if len(regions) &lt; 2:&amp;#10;                raise ValueError('Unable to sample without duplicate twice')&amp;#10;            stim_region_ids_selected = random.sample(regions, 2)&amp;#10;        &amp;#10;        stims_selected = []&amp;#10;        for i in range(2):&amp;#10;            stim_region_id = stim_region_ids_selected[i]&amp;#10;            stim = random.uniform(&amp;#10;                stim_region_id * 180 / self.n_sample_regions,&amp;#10;                (stim_region_id+1) * 180 / self.n_sample_regions)&amp;#10;            stims_selected.append(stim)&amp;#10;            &amp;#10;        return stim_region_ids_selected, stims_selected&amp;#10;&amp;#10;&amp;#10;class StimSamplingScheduler:&amp;#10;    def __init__(self, n_sample_regions, stage_strategies):&amp;#10;        self.n_sample_regions = n_sample_regions&amp;#10;        self.stage_strategies = stage_strategies&amp;#10;        self.n_stages = len(self.stage_strategies)&amp;#10;        self.sampler = StimSampler(n_sample_regions)&amp;#10;        &amp;#10;        # keep a record&amp;#10;        self.strategy = None&amp;#10;        self.regions = None&amp;#10;        self.stage_idx = -1&amp;#10;        self.block_idx = -1&amp;#10;        self.block_within_stage_idx = -1&amp;#10;        self.n_trials = 0&amp;#10;    &amp;#10;    def initialize_stage(self):&amp;#10;        self.stage_idx += 1&amp;#10;        self.block_within_stage_idx = -1&amp;#10;        self.n_trials = 0&amp;#10;        self.strategy = self.stage_strategies[self.stage_idx]&amp;#10;        &amp;#10;    def initialize_block(self):&amp;#10;        self.block_idx += 1&amp;#10;        self.block_within_stage_idx += 1&amp;#10;        self.n_trials = 0&amp;#10;        self.regions = self.sampler.sample_sample_region(self.strategy)&amp;#10;        &amp;#10;    def sample_for_trial(self, allow_same_region):&amp;#10;        self.n_trials += 1&amp;#10;        selected_regions, selected_stims = self.sampler.sample_from_given_regions(&amp;#10;            self.regions, allow_same_region)&amp;#10;        # change regions every trial&amp;#10;        self.regions = self.sampler.sample_sample_region(self.strategy)&amp;#10;        return selected_regions, selected_stims&amp;#10;        " valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="const VALID_N_REGIONS = [4];&amp;#10;&amp;#10;class StimSampler {&amp;#10;    constructor(n_sample_regions) {&amp;#10;        if (!VALID_N_REGIONS.includes(n_sample_regions)) {&amp;#10;            throw new Error(`${VALID_N_REGIONS} is not a valid number of sample regions`);&amp;#10;        }&amp;#10;        this.n_sample_regions = n_sample_regions;&amp;#10;    }&amp;#10;&amp;#10;    sample_sample_region(sample_strategy) {&amp;#10;        let result_regions = null;&amp;#10;        if (this.n_sample_regions === 4) {&amp;#10;            switch (sample_strategy) {&amp;#10;                case 'single':&amp;#10;                    result_regions = this.sample_single_sample_region();&amp;#10;                    break;&amp;#10;                case 'adjacent':&amp;#10;                    result_regions = this.sample_adjacent_sample_region();&amp;#10;                    break;&amp;#10;                case 'orthogonal':&amp;#10;                    result_regions = this.sample_orthogonal_sample_region();&amp;#10;                    break;&amp;#10;                case 'all':&amp;#10;                    result_regions = this.sample_all_sample_region();&amp;#10;                    break;&amp;#10;                case 'same':&amp;#10;                    result_regions = this.sample_same_sample_region();&amp;#10;                    break;&amp;#10;                case 'opp':&amp;#10;                    result_regions = this.sample_opp_sample_region();&amp;#10;                    break;&amp;#10;                case 'mixed':&amp;#10;                    result_regions = this.sample_mixed_sample_region();&amp;#10;                    break;&amp;#10;                default:&amp;#10;                    throw new Error(`${sample_strategy} is not valid for ${this.n_sample_regions} regions`);&amp;#10;            }&amp;#10;        } else {&amp;#10;            throw new Error(`${sample_strategy} not implemented`);&amp;#10;        }&amp;#10;        return result_regions;&amp;#10;    }&amp;#10;&amp;#10;    sample_single_sample_region() {&amp;#10;        let region = util.randint(this.n_sample_regions);&amp;#10;        return [region];&amp;#10;    }&amp;#10;&amp;#10;    sample_adjacent_sample_region() {&amp;#10;        let region_1 = util.randint(this.n_sample_regions);&amp;#10;        let region_2 = (region_1 + 1) % this.n_sample_regions;&amp;#10;        return [region_1, region_2];&amp;#10;    }&amp;#10;&amp;#10;    sample_orthogonal_sample_region() {&amp;#10;        let region_1 = util.randint(this.n_sample_regions);&amp;#10;        let region_2 = (region_1 + Math.floor(this.n_sample_regions / 2)) % this.n_sample_regions;&amp;#10;        return [region_1, region_2];&amp;#10;    }&amp;#10;&amp;#10;    sample_all_sample_region() {&amp;#10;        let regions = [];&amp;#10;        for (let i = 0; i &lt; this.n_sample_regions; i++) {&amp;#10;            regions.push(i);&amp;#10;        }&amp;#10;        return regions;&amp;#10;    }&amp;#10;&amp;#10;    sample_same_sample_region() {&amp;#10;        let big_region_id = util.randint(2);&amp;#10;        let region_1 = big_region_id * 2 + util.randint(2);&amp;#10;        let region_2 = big_region_id * 2 + util.randint(2);&amp;#10;        return [region_1, region_2];&amp;#10;    }&amp;#10;&amp;#10;    sample_opp_sample_region() {&amp;#10;        let big_region_id = util.randint(2);&amp;#10;        let region_1 = big_region_id * 2 + util.randint(2);&amp;#10;        let region_2 = (1 - big_region_id) * 2 + util.randint(2);&amp;#10;        return [region_1, region_2];&amp;#10;    }&amp;#10;&amp;#10;    sample_mixed_sample_region() {&amp;#10;        let region_1 = util.randint(4);&amp;#10;        let region_2 = util.randint(4);&amp;#10;        return [region_1, region_2];&amp;#10;    }&amp;#10;&amp;#10;    sample_from_given_regions(regions, allow_same_region) {&amp;#10;        let stim_region_ids_selected = [];&amp;#10;        if (allow_same_region) {&amp;#10;            for (let i = 0; i &lt; 2; i++) {&amp;#10;                let stim_region_id = util.randchoice(regions);&amp;#10;                stim_region_ids_selected.push(stim_region_id);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if (regions.length &lt; 2) {&amp;#10;                throw new Error('Unable to sample without duplicate twice');&amp;#10;            }&amp;#10;            stim_region_ids_selected = funcRandomSample(regions, 2);&amp;#10;        }&amp;#10;&amp;#10;        let stims_selected = [];&amp;#10;        for (let i = 0; i &lt; 2; i++) {&amp;#10;            let stim_region_id = stim_region_ids_selected[i];&amp;#10;            let stim = funcRandomUniform(&amp;#10;                stim_region_id * 180 / this.n_sample_regions, &amp;#10;                (stim_region_id + 1) * 180 / this.n_sample_regions);&amp;#10;            stims_selected.push(stim);&amp;#10;        }&amp;#10;&amp;#10;        return [stim_region_ids_selected, stims_selected];&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class StimSamplingScheduler {&amp;#10;    constructor(n_sample_regions, stage_strategies) {&amp;#10;        this.n_sample_regions = n_sample_regions;&amp;#10;        this.stage_strategies = stage_strategies;&amp;#10;        this.n_stages = this.stage_strategies.length;&amp;#10;        this.sampler = new StimSampler(n_sample_regions);&amp;#10;&amp;#10;        // Keep a record&amp;#10;        this.strategy = null;&amp;#10;        this.regions = null;&amp;#10;        this.stage_idx = -1;&amp;#10;        this.block_idx = -1;&amp;#10;        this.block_within_stage_idx = -1;&amp;#10;        this.n_trials = 0&amp;#10;    }&amp;#10;&amp;#10;    initialize_stage() {&amp;#10;        this.stage_idx++;&amp;#10;        this.block_within_stage_idx = -1;&amp;#10;        this.n_trials = 0;&amp;#10;        this.strategy = this.stage_strategies[this.stage_idx];&amp;#10;    }&amp;#10;&amp;#10;    initialize_block() {&amp;#10;        this.block_idx++;&amp;#10;        this.block_within_stage_idx++;&amp;#10;        this.n_trials = 0;&amp;#10;        this.regions = this.sampler.sample_sample_region(this.strategy);&amp;#10;    }&amp;#10;&amp;#10;    sample_for_trial(allow_same_region) {&amp;#10;        this.n_trials += 1&amp;#10;        let [selected_regions, selected_stims] = this.sampler.sample_from_given_regions(&amp;#10;            this.regions, allow_same_region&amp;#10;        );&amp;#10;        // change regions every trial&amp;#10;        this.regions = this.sampler.sample_sample_region(this.strategy);&amp;#10;        return [selected_regions, selected_stims];&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import random&amp;#10;&amp;#10;random.seed()&amp;#10;&amp;#10;# split the space into 4 regions&amp;#10;n_ori_regions = 4&amp;#10;&amp;#10;# TODO: read the allowed trial code&amp;#10;trial_types_allowed = [1, 0]&amp;#10;n_trial_types_allowed = len(trial_types_allowed)&amp;#10;&amp;#10;# TODO: read the allowed sampling strategies&amp;#10;sampling_strategies_allowed = ['mixed',]&amp;#10;n_sampling_strategies_allowed = len(sampling_strategies_allowed)&amp;#10;&amp;#10;# TODO: figure out if we have cases where people only do one mode?&amp;#10;response_modes_allowed = ['draw', 'click']&amp;#10;n_response_modes_allowed = len(response_modes_allowed)&amp;#10;&amp;#10;# TODO: define n blocks each sub type?&amp;#10;n_blocks_each_subtype = 4&amp;#10;&amp;#10;# THE PATH TO BACKUP RECORDS&amp;#10;BACKUP_IDX = 0&amp;#10;N_BACKUPS = 2&amp;#10;BACKUP_FOLDER_PATH = thisExp.dataFileName&amp;#10;if not os.path.exists(BACKUP_FOLDER_PATH):&amp;#10;    os.makedirs(BACKUP_FOLDER_PATH)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// split the space into 8 regions&amp;#10;n_ori_regions = 4;&amp;#10;&amp;#10;// TODO: read the allowed trial code&amp;#10;trial_types_allowed = [0, 1];&amp;#10;n_trial_types_allowed = trial_types_allowed.length;&amp;#10;&amp;#10;// TODO: read the allowed sampling strategies&amp;#10;sampling_strategies_allowed = [&quot;mixed&quot;];&amp;#10;n_sampling_strategies_allowed = sampling_strategies_allowed.length;&amp;#10;&amp;#10;// TODO: figure out if we have cases where people only do one mode?&amp;#10;response_modes_allowed = [&quot;draw&quot;, &quot;click&quot;]&amp;#10;n_response_modes_allowed = response_modes_allowed.length;&amp;#10;&amp;#10;// TODO: define n blocks each sub type?&amp;#10;n_blocks_each_subtype = 4;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// keep track of errors&amp;#10;experiment_error_records = [];&amp;#10;&amp;#10;// initialize the list of trials to run&amp;#10;sampling_type_to_sample = sampling_strategies_allowed.length;&amp;#10;trial_type_list = funcRandomSample(trial_types_allowed, n_trial_types_allowed);&amp;#10;mode_type_list = funcRandomSample(response_modes_allowed, n_response_modes_allowed);&amp;#10;sampling_type_list = funcRandomSample(sampling_strategies_allowed, n_sampling_strategies_allowed);&amp;#10;&amp;#10;// compute the stats&amp;#10;n_kinds_of_tasks = n_trial_types_allowed&amp;#10;n_blocks_each_subtask = n_sampling_strategies_allowed * n_blocks_each_subtype;&amp;#10;n_blocks_each_task = n_blocks_each_subtask * n_response_modes_allowed;&amp;#10;n_trials_each_block = 10; &amp;#10;if (expInfo[&quot;test mode&quot;] === &quot;online&quot;) {&amp;#10;    n_trials_each_block = 10;&amp;#10;}" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# keep track of errors&amp;#10;experiment_error_records = []&amp;#10;&amp;#10;# initialize the list of trials to run&amp;#10;sampling_type_to_sample = len(sampling_strategies_allowed)&amp;#10;trial_type_list = random.sample(trial_types_allowed, n_trial_types_allowed)&amp;#10;mode_type_list = random.sample(response_modes_allowed, n_response_modes_allowed)&amp;#10;sampling_type_list = random.sample(sampling_strategies_allowed, n_sampling_strategies_allowed)&amp;#10;&amp;#10;# compute the stats&amp;#10;n_kinds_of_tasks = n_trial_types_allowed&amp;#10;n_blocks_each_subtask = n_sampling_strategies_allowed * n_blocks_each_subtype&amp;#10;n_blocks_each_task = n_blocks_each_subtask * n_response_modes_allowed&amp;#10;n_trials_each_block = 10&amp;#10;if expInfo[&quot;test mode&quot;] == &quot;online&quot;:&amp;#10;    n_trials_each_block = 10" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareExperiment" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="el_ctrl" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="eyetracking = 1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="eyetracking = 1 #0 is off tracker; 1 is on tracker" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="el_ctrl" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trialTypeInstruction">
      <RoutineSettingsComponent name="trialTypeInstruction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trialTypeInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTrialTypeInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# if we have finished rehearsal&amp;#10;has_finished_instruction = False&amp;#10;has_finished_rehearsal = False" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// if we have unfinished rehearsal&amp;#10;has_finished_instruction = false;&amp;#10;has_finished_rehearsal = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// stim sampler for instruction&amp;#10;instruction_sampler = new StimSamplingScheduler(&amp;#10;    n_ori_regions, ['orthogonal']);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# sampler for instruction&amp;#10;instruction_sampler = StimSamplingScheduler(&amp;#10;    n_ori_regions, ['orthogonal'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTrialTypeInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trialTypePractice">
      <RoutineSettingsComponent name="trialTypePractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trialTypePractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTrialTypePractice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="practice_sampler = new StimSamplingScheduler(&amp;#10;    n_ori_regions, ['all']);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="practice_sampler = StimSamplingScheduler(&amp;#10;    n_ori_regions, ['all'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTrialTypePractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="test">
      <RoutineSettingsComponent name="test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="testText" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="testText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Hello" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="responseInstruction">
      <RoutineSettingsComponent name="responseInstruction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="responseInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeResponseInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_mode = response_modes_allowed[&amp;#10;    response_instruction_loop.thisN];&amp;#10;continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_mode = response_modes_allowed[response_instruction_loop.thisN]&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseResponseInstruction.getPressed()[0]&amp;#10;mouse_position = mouseResponseInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseResponseInstruction.getPressed()[0];&amp;#10;mouse_position = mouseResponseInstruction.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeResponseInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textResponseInstruction" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textResponseInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'For reporting orientation by ' + instruction_mode + 'ing, here is an example of a grating stimulus and the correct response'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.4" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="imageResponseInstruction" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$'resources/'+instruction_mode+'ing.png'" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imageResponseInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.12, 0.63)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <MouseComponent name="mouseResponseInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseResponseInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="responseAreaInstruction">
      <RoutineSettingsComponent name="responseAreaInstruction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="responseAreaInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeResponseRegionInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseResponseRegionInstruction.getPressed()[0]&amp;#10;mouse_position = mouseResponseRegionInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseResponseRegionInstruction.getPressed()[0];&amp;#10;mouse_position = mouseResponseRegionInstruction.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeResponseRegionInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textResponseRegionInstruction" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textResponseRegionInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The correspondence between stimuli and reporting regions." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.4" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="imageResponseRegionInstruction" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$'resources/'+instruction_mode+'_regions.png'" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imageResponseRegionInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.12, 0.63)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <MouseComponent name="mouseResponseRegionInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseResponseRegionInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="responseValidAreaInstruction">
      <RoutineSettingsComponent name="responseValidAreaInstruction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="responseValidAreaInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeValidAreaInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseValidAreaInstruction.getPressed()[0]&amp;#10;mouse_position = mouseValidAreaInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseValidAreaInstruction.getPressed()[0];&amp;#10;mouse_position = mouseValidAreaInstruction.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeValidAreaInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textValidAreaInstruction" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textValidAreaInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Further instructions on how to use the reporting regions." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.4" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="imageValidAreaInstruction" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$'resources/valid_'+instruction_mode+'_area.png'" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imageValidAreaInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.12, 0.63)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <MouseComponent name="mouseValidAreaInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseValidAreaInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="prepareGeneralType">
      <RoutineSettingsComponent name="prepareGeneralType" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareGeneralType" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareGeneralType" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareGeneralType" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prepareQuiz">
      <RoutineSettingsComponent name="prepareQuiz" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareQuiz" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareQuiz" plugin="None">
        <Param val="class QuizDiagram:&amp;#10;    def __init__(self, window, loc, width, height, diagram_type, params):&amp;#10;        self.obj_display = []&amp;#10;        loc_x = loc[0]&amp;#10;        loc_y = loc[1]&amp;#10;        stim_r = height * 0.36&amp;#10;        if diagram_type == 'stims':&amp;#10;            stims = params['stims']&amp;#10;            n_stims = len(stims)&amp;#10;            unit_width = width / n_stims&amp;#10;            for i in range(n_stims):&amp;#10;                # compute the location of this stim&amp;#10;                stim_ori = stims[i]&amp;#10;                stim_x = loc_x + (2*i+1-n_stims) * unit_width / 2&amp;#10;                stim_y = loc_y&amp;#10;                new_stim_obj = funcDrawStim(&amp;#10;                    window, stim_ori, [stim_x, stim_y], stim_r)&amp;#10;                self.obj_display.append(new_stim_obj)&amp;#10;        &amp;#10;        elif diagram_type == 'answers':&amp;#10;            ans_mode = params['mode']&amp;#10;            answers = params['answers']&amp;#10;            n_answers = len(answers)&amp;#10;            unit_width = width / n_answers&amp;#10;            for i in range(n_answers):&amp;#10;                # compute the location of this stim&amp;#10;                ans_ori = answers[i]&amp;#10;                ans_x = loc_x + (2*i+1-n_answers) * unit_width / 2&amp;#10;                ans_y = loc_y&amp;#10;                ans_r = stim_r&amp;#10;                &amp;#10;                # create the correct answer&amp;#10;                new_ans_obj = None&amp;#10;                if ans_mode == 'click':&amp;#10;                    new_ans_obj = ClickAnswerObject(&amp;#10;                        window, ans_ori, &amp;#10;                        [ans_x, ans_y], ans_r, 0.01)&amp;#10;                elif ans_mode == 'draw':&amp;#10;                    new_ans_obj = DrawAnswerObject(&amp;#10;                        window, ans_ori, True, &amp;#10;                        [ans_x, ans_y], ans_r)&amp;#10;                self.obj_display.append(new_ans_obj)&amp;#10;                &amp;#10;        elif diagram_type == 'stims_with_cue':&amp;#10;            stims = params['stims']&amp;#10;            n_stims = len(stims)&amp;#10;            unit_width = width / (n_stims+1)&amp;#10;            &amp;#10;            stim_locs = []&amp;#10;            if n_stims == 2:&amp;#10;                stim_locs = [&amp;#10;                    [loc_x-unit_width, loc_y],&amp;#10;                    [loc_x+unit_width, loc_y]]&amp;#10;            else:&amp;#10;                raise NotImplementedError()&amp;#10;            &amp;#10;            for i in range(n_stims):&amp;#10;                # draw the stims&amp;#10;                stim_ori = stims[i]&amp;#10;                stim_loc = stim_locs[i]&amp;#10;                new_stim_obj = funcDrawStim(&amp;#10;                    window, stim_ori, stim_loc, stim_r)&amp;#10;                self.obj_display.append(new_stim_obj)&amp;#10;            &amp;#10;                # draw the cue&amp;#10;                cue_type = params['cue_type']&amp;#10;                color_code = params[&quot;color_code&quot;][i]&amp;#10;                cue_obj = None&amp;#10;                if cue_type == &quot;explicit&quot;:&amp;#10;                    to_report_code = params[&quot;to_report_code&quot;][i]&amp;#10;                    cue_obj = SingleCueObject(&amp;#10;                        window, stim_loc, to_report_code, stim_r, color_code)&amp;#10;                self.obj_display.append(cue_obj)&amp;#10;            &amp;#10;    &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        for i in range(len(self.obj_display)):&amp;#10;            self.obj_display[i].setAutoDraw(auto_draw)&amp;#10;&amp;#10;class singleSelectionButton:&amp;#10;    def __init__(self, window, selection_id, text, loc):&amp;#10;        self.selection_id = selection_id&amp;#10;        self.text = text&amp;#10;        &amp;#10;        # predefine&amp;#10;        height = 0.04&amp;#10;        &amp;#10;        # create the button&amp;#10;        self.check_box = visual.Rect(&amp;#10;            window, width=height, height=height,&amp;#10;            pos=loc, lineColor='black', fillColor='white')&amp;#10;        &amp;#10;        # create the text&amp;#10;        self.text_obj = visual.TextStim(&amp;#10;            window, text=text, pos=(loc[0]+height * 1.5, loc[1]),&amp;#10;            anchorHoriz='left', alignText='left', height=height)&amp;#10;            &amp;#10;        # make everything visible&amp;#10;        self.setAutoDraw(True)&amp;#10;        &amp;#10;    def contains(self, pos):&amp;#10;        return self.check_box.contains(pos)&amp;#10;        &amp;#10;    def to_select(self):&amp;#10;        self.check_box.setFillColor('black')&amp;#10;        &amp;#10;    def to_unselect(self):&amp;#10;        self.check_box.setFillColor('white')&amp;#10;        &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        self.check_box.setAutoDraw(auto_draw)&amp;#10;        self.text_obj.setAutoDraw(auto_draw)&amp;#10;        &amp;#10;class QuizSelectionObjects:&amp;#10;    def __init__(self, window, texts, locs):&amp;#10;        self.choice_objs = []&amp;#10;        self.selected = None&amp;#10;        n_choices = len(texts)&amp;#10;        self.choices = []&amp;#10;        for i in range(n_choices):&amp;#10;            one_choice = singleSelectionButton(window, i, texts[i], locs[i])&amp;#10;            self.choice_objs.append(one_choice)&amp;#10;    &amp;#10;    def check_click(self, pos):&amp;#10;        for i in range(len(self.choice_objs)):&amp;#10;            to_check = self.choice_objs[i]&amp;#10;            if to_check.contains(pos):&amp;#10;                # deselect previous one&amp;#10;                if self.selected is not None:&amp;#10;                    self.choice_objs[self.selected].to_unselect()&amp;#10;                self.selected = i&amp;#10;                to_check.to_select()&amp;#10;                return True # something got selected&amp;#10;        return False # nothing got selected&amp;#10;                &amp;#10;    def get_selected_text(self):&amp;#10;        if self.selected is not None:&amp;#10;            return self.choice_objs[self.selected].text&amp;#10;        else:&amp;#10;            return None&amp;#10;                &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        for i in range(len(self.choice_objs)):&amp;#10;            to_check = self.choice_objs[i]&amp;#10;            to_check.setAutoDraw(auto_draw)&amp;#10;&amp;#10;class quizManagementObj:&amp;#10;    def __init__(self):&amp;#10;        self.obj_display = []&amp;#10;        self.question_diagram_objs = []&amp;#10;        self.choice_diagram_objs = []&amp;#10;        self.choices = None&amp;#10;        self.people_answer = None&amp;#10;        self.correct_answer_id = None&amp;#10;        self.correct_answer = None&amp;#10;        self.continue_button = None&amp;#10;        self.question_text = ''&amp;#10;        &amp;#10;        # layout&amp;#10;        self.quiz_title_loc = [0, 0.35] &amp;#10;        self.quiz_title_width = 1.3&amp;#10;        self.question_diagram_loc = [0, 0]&amp;#10;        self.question_diagram_size = [0, 0]&amp;#10;        self.choice_diagram_loc = [0, 0]&amp;#10;        self.choice_diagram_size = [0, 0]&amp;#10;        self.question_prompt_loc = [0, 0]&amp;#10;        self.question_prompt_width = 0&amp;#10;        self.choices_loc = [0, 0]&amp;#10;        self.continue_button_loc = []&amp;#10;        self.answer_width = 0&amp;#10;        &amp;#10;    def initiate_quiz(self, window, question_type, params):&amp;#10;        if question_type == 'response_instruction':&amp;#10;            # given a stim, what is the correct response?&amp;#10;            # create the title&amp;#10;            title_text = &quot;[Quiz] What is the correct response?&quot;&amp;#10;            self.create_quiz_title(window, title_text)&amp;#10;            &amp;#10;            # create stimulus&amp;#10;            stims = [random.uniform(0, 180)]&amp;#10;            # create question diagram&amp;#10;            self.question_diagram_loc = [-0.3, 0.1]&amp;#10;            self.question_diagram_size = [0.36, 0.36]&amp;#10;            self.create_question_diagram(window, &amp;#10;                'stims', {'stims': stims})&amp;#10;                &amp;#10;            # create choice diagram&amp;#10;            response_mode = params['mode']&amp;#10;            correct_ans = stims[0]&amp;#10;            wrong_ans = (correct_ans + 90) % 180&amp;#10;            left_correct = random.random() &gt; 0.5&amp;#10;            choice_values = None&amp;#10;            if left_correct:&amp;#10;                self.correct_answer_id = 0&amp;#10;                choice_values = [correct_ans, wrong_ans]&amp;#10;            else:&amp;#10;                self.correct_answer_id = 1&amp;#10;                choice_values = [wrong_ans, correct_ans]&amp;#10;            self.choice_diagram_loc = [-0.3, -0.2]&amp;#10;            self.choice_diagram_size = [0.6, 0.36]&amp;#10;            self.create_choice_diagram(window, &amp;#10;                'answers', {'answers': choice_values, &amp;#10;                'mode': response_mode})&amp;#10;                &amp;#10;            # create question prompt&amp;#10;            self.question_prompt_loc = [0.2, 0.1]&amp;#10;            self.question_prompt_width = 0.7&amp;#10;            self.answer_width = 0.6&amp;#10;            self.question_text = &quot;For the grating patch on the top, \n&quot; +\&amp;#10;                &quot;which of the response at the bottom is correct?&quot;&amp;#10;            question_text_display = self.question_text + &quot;\n Choose your answer and click 'continue' to check.&quot;&amp;#10;            self.question_prompt = visual.TextStim(&amp;#10;                window, text=question_text_display, height=0.04,&amp;#10;                pos=self.question_prompt_loc,&amp;#10;                wrapWidth=self.question_prompt_width)&amp;#10;            self.question_prompt.setAutoDraw(True)&amp;#10;            self.obj_display.append(self.question_prompt)&amp;#10;            &amp;#10;            # create choices&amp;#10;            self.choices_loc = [[0.1, -0.1], [0.1, -0.2]]&amp;#10;            choice_texts = ['the left one', 'the right one']&amp;#10;            self.correct_answer = choice_texts[self.correct_answer_id]&amp;#10;            self.choices = QuizSelectionObjects(&amp;#10;                window, choice_texts, self.choices_loc)&amp;#10;            self.obj_display.append(self.choices)&amp;#10;                &amp;#10;            # set continue button position&amp;#10;            self.continue_button_loc = [0.2, -0.35]&amp;#10;            self.continue_button = funcCreateButton(&amp;#10;                window, 'continue', self.continue_button_loc, [0.24, 0.1])&amp;#10;            self.obj_display.append(self.continue_button)&amp;#10;        elif question_type == 'cue':&amp;#10;            # how to respond to a implicit cue?&amp;#10;            ## create the title&amp;#10;            cue_type = params[&quot;cue_type&quot;]&amp;#10;            title_text = &quot;[Quiz] What to report when there is an &quot; + cue_type + &quot; cue?&quot;&amp;#10;            self.create_quiz_title(window, title_text)&amp;#10;            &amp;#10;            ## set up question diagram&amp;#10;            ## create stimulus&amp;#10;            self.question_diagram_loc = [0, 0.15]&amp;#10;            self.question_diagram_size = [1, 0.5]&amp;#10;            sampler = params['stim_sampler']&amp;#10;            stim_region_ids, stims = sampler.sample_for_trial(&amp;#10;                allow_same_region=False)&amp;#10;            diagram_params = {&amp;#10;                &quot;stims&quot;: stims, &amp;#10;                &quot;cue_type&quot;: cue_type}&amp;#10;                &amp;#10;            # decide the cue to report&amp;#10;            # report_type_id = random.randint(0, 2)&amp;#10;            report_type_id = sampler.n_trials % 3&amp;#10;            self.correct_answer_id = report_type_id&amp;#10;            if cue_type == &quot;explicit&quot;:&amp;#10;                to_report = []&amp;#10;                if report_type_id == 0:&amp;#10;                    to_report = [True, False]&amp;#10;                elif report_type_id == 1:&amp;#10;                    to_report = [False, True]&amp;#10;                else:&amp;#10;                    to_report = [True, True]&amp;#10;                diagram_params[&quot;to_report_code&quot;] = to_report&amp;#10;                &amp;#10;            # set color code&amp;#10;            diagram_params[&quot;color_code&quot;] = [1, 2] if random.random() &lt; 0.5 else [2, 1]&amp;#10;            &amp;#10;            self.create_question_diagram(&amp;#10;                window, 'stims_with_cue', params=diagram_params)&amp;#10;&amp;#10;            # create question prompt&amp;#10;            self.question_prompt_loc = [-0.3, -0.15]&amp;#10;            self.question_prompt_width = 0.7&amp;#10;            self.answer_width = 0.6&amp;#10;            self.question_text = &quot;Given the cue in the center, \n&quot; +\&amp;#10;                &quot;which of the stimuli you need to remember and report?&quot;&amp;#10;            question_text_display = self.question_text + &quot;\n Choose your answer and click 'continue' to check.&quot;&amp;#10;            self.question_prompt = visual.TextStim(&amp;#10;                window, text=question_text_display, height=0.04,&amp;#10;                pos=self.question_prompt_loc,&amp;#10;                wrapWidth=self.question_prompt_width)&amp;#10;            self.question_prompt.setAutoDraw(True)&amp;#10;            self.obj_display.append(self.question_prompt)&amp;#10;            &amp;#10;            # create choices&amp;#10;            self.choices_loc = [[0.1, -0.1], [0.1, -0.17], [0.1, -0.24]]&amp;#10;            choice_texts = ['the left one', 'the right one', 'both']&amp;#10;            self.correct_answer = choice_texts[self.correct_answer_id]&amp;#10;            self.choices = QuizSelectionObjects(&amp;#10;                window, choice_texts, self.choices_loc)&amp;#10;            self.obj_display.append(self.choices)&amp;#10;            &amp;#10;            # set continue button position&amp;#10;            self.continue_button_loc = [0, -0.35]&amp;#10;            self.continue_button = funcCreateButton(&amp;#10;                window, 'continue', self.continue_button_loc, [0.24, 0.1])&amp;#10;            self.obj_display.append(self.continue_button)&amp;#10;&amp;#10;        else:&amp;#10;            pass&amp;#10;            &amp;#10;    def create_quiz_title(self, window, title_text):&amp;#10;        self.title = visual.TextStim(&amp;#10;            window, text=title_text, height=0.06,&amp;#10;            pos=self.quiz_title_loc,&amp;#10;            wrapWidth=self.quiz_title_width)&amp;#10;        self.title.setAutoDraw(True)&amp;#10;        self.obj_display.append(self.title)&amp;#10;            &amp;#10;    def create_question_diagram(self, window, diagram_type, params):&amp;#10;        self.question_diagram_objs = QuizDiagram(&amp;#10;            window, self.question_diagram_loc, &amp;#10;            self.question_diagram_size[0],&amp;#10;            self.question_diagram_size[1], &amp;#10;            diagram_type, params)&amp;#10;        self.obj_display.append(self.question_diagram_objs)&amp;#10;        &amp;#10;    def create_choice_diagram(self, window, diagram_type, params):&amp;#10;        self.choice_diagram_objs = QuizDiagram(&amp;#10;            window, self.choice_diagram_loc, &amp;#10;            self.choice_diagram_size[0],&amp;#10;            self.choice_diagram_size[1], &amp;#10;            diagram_type, params)&amp;#10;        self.obj_display.append(self.choice_diagram_objs)&amp;#10;            &amp;#10;    def collect_quiz_answer(self):&amp;#10;        self.people_answer = self.choices.get_selected_text()&amp;#10;        return self.people_answer is not None&amp;#10;        &amp;#10;    def create_quiz_feedback_obj(self, window):&amp;#10;        # remove choices&amp;#10;        self.choices.setAutoDraw(False)&amp;#10;        self.choices = []&amp;#10;        &amp;#10;        # change question&amp;#10;        self.question_prompt.setText(self.question_text)&amp;#10;        &amp;#10;        # display answer&amp;#10;        answer_msg = ''&amp;#10;        if self.people_answer == self.correct_answer:&amp;#10;            # the person get correct answer&amp;#10;            answer_msg += &quot;Your are right! &quot;&amp;#10;            answer_msg += &quot;The correct answer is '&quot; + self.correct_answer + &quot;'\n&quot;&amp;#10;        else:&amp;#10;            answer_msg += &quot;Thanks for your input! However, &quot;&amp;#10;            answer_msg += &quot;the correct answer is '&quot; + self.correct_answer + &quot;'\n&quot;&amp;#10;        answer_msg_width = self.answer_width&amp;#10;        answer_msg_x = self.choices_loc[0][0] + 0.2&amp;#10;        answer_msg_y = (self.choices_loc[0][1] + self.choices_loc[-1][1]) / 2&amp;#10;        self.answer_msg_obj = visual.TextStim(&amp;#10;            window, text=answer_msg, height=0.04,&amp;#10;            pos=[answer_msg_x, answer_msg_y], &amp;#10;            wrapWidth=answer_msg_width)&amp;#10;        self.answer_msg_obj.setAutoDraw(True)&amp;#10;        self.obj_display.append(self.answer_msg_obj)&amp;#10;        &amp;#10;    def setAutoDraw(self, auto_draw):&amp;#10;        n_objs = len(self.obj_display)&amp;#10;        for i in range(n_objs):&amp;#10;            obj = self.obj_display[i]&amp;#10;            obj.setAutoDraw(auto_draw)&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class QuizDiagram{&amp;#10;    constructor(window, loc, width, height, diagram_type, params) {&amp;#10;        this.obj_display = [];&amp;#10;        let loc_x = loc[0];&amp;#10;        let loc_y = loc[1];&amp;#10;        let stim_r = (height * 0.36);&amp;#10;        if ((diagram_type === &quot;stims&quot;)) {&amp;#10;            let stims = params[&quot;stims&quot;];&amp;#10;            let n_stims = stims.length;&amp;#10;            let unit_width = (width / n_stims);&amp;#10;            for (var i = 0; i&lt; n_stims; i++) {&amp;#10;                let stim_ori = stims[i];&amp;#10;                let stim_x = loc_x + (2 * i + 1 - n_stims) * unit_width / 2;&amp;#10;                let stim_y = loc_y;&amp;#10;                let new_stim_obj = funcDrawStim(window, stim_ori, [stim_x, stim_y], stim_r);&amp;#10;                this.obj_display.push(new_stim_obj);&amp;#10;            }&amp;#10;        } else if (diagram_type === 'answers') {&amp;#10;            let ans_mode = params['mode'];&amp;#10;            let answers = params['answers'];&amp;#10;            let n_answers = answers.length;&amp;#10;            let unit_width = width / n_answers;&amp;#10;            for (var i = 0; i &lt; n_answers; i++) {&amp;#10;                // Compute the location of this stim&amp;#10;                let ans_ori = answers[i];&amp;#10;                let ans_x = loc_x + (2 * i + 1 - n_answers) * unit_width / 2;&amp;#10;                let ans_y = loc_y;&amp;#10;                let ans_r = stim_r;&amp;#10;        &amp;#10;                // Create the correct answer&amp;#10;                let new_ans_obj = null;&amp;#10;                if (ans_mode === 'click') {&amp;#10;                    new_ans_obj = new ClickAnswerObject(&amp;#10;                        window, ans_ori, [ans_x, ans_y], ans_r, 0.01);&amp;#10;                } else if (ans_mode === 'draw') {&amp;#10;                    new_ans_obj = new DrawAnswerObject(&amp;#10;                        window, ans_ori, true, [ans_x, ans_y], ans_r);&amp;#10;                }&amp;#10;                this.obj_display.push(new_ans_obj);&amp;#10;            }&amp;#10;        } else if (diagram_type === &quot;stims_with_cue&quot;) {&amp;#10;            let stims = params['stims'];&amp;#10;            let n_stims = stims.length;&amp;#10;            let unit_width = width / (n_stims+1);&amp;#10;            let stim_locs = [];&amp;#10;            if (n_stims === 2) {&amp;#10;                stim_locs = [&amp;#10;                    [loc_x-unit_width, loc_y],&amp;#10;                    [loc_x+unit_width, loc_y]];&amp;#10;            } else {&amp;#10;                throw new Error(&quot;Not Implemented&quot;);&amp;#10;            }&amp;#10;        &amp;#10;            for (var i = 0; i &lt; n_stims; i++) {&amp;#10;                // draw the stims&amp;#10;                let stim_ori = stims[i];&amp;#10;                let stim_loc = stim_locs[i];&amp;#10;                let new_stim_obj = funcDrawStim(&amp;#10;                    window, stim_ori, stim_loc, stim_r);&amp;#10;                this.obj_display.push(new_stim_obj);&amp;#10;                &amp;#10;                // draw the cue&amp;#10;                let cue_type = params['cue_type'];&amp;#10;                let color_code = params[&quot;color_code&quot;][i];&amp;#10;                let cue_obj = null;&amp;#10;                if (cue_type === &quot;explicit&quot;) {&amp;#10;                    let to_report_code = params[&quot;to_report_code&quot;][i];&amp;#10;                    cue_obj = new SingleCueObject(&amp;#10;                        window, stim_loc, to_report_code, stim_r, color_code);&amp;#10;                }&amp;#10;                this.obj_display.push(cue_obj);&amp;#10;            }&amp;#10;        } else {}&amp;#10;    }&amp;#10;&amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        for (var i = 0; i&lt; this.obj_display.length; i++) {&amp;#10;            this.obj_display[i].setAutoDraw(auto_draw);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;class singleSelectionButton {&amp;#10;    constructor(window, selection_id, text, loc) {&amp;#10;        this.loc = loc&amp;#10;        this.height = 0.04;&amp;#10;        this.selection_id = selection_id;&amp;#10;        this.text = text;&amp;#10;        this.check_box = new visual.Rect(&amp;#10;            {&quot;win&quot;: window, &quot;width&quot;: this.height, &quot;height&quot;: this.height, &amp;#10;            &quot;pos&quot;: loc, &quot;lineColor&quot;: &quot;black&quot;, &quot;fillColor&quot;: &quot;white&quot;});&amp;#10;        this.text_obj = new visual.TextStim({&amp;#10;            &quot;win&quot;: window, &quot;text&quot;: text, &quot;pos&quot;: [(loc[0] + (this.height * 5)), loc[1]],&amp;#10;            &quot;anchorHoriz&quot;: &quot;left&quot;, &quot;alignText&quot;: &quot;left&quot;, &quot;height&quot;: this.height});&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;    contains(pos) {&amp;#10;        let left = this.loc[0] - this.height/2;&amp;#10;        let right = this.loc[0] + this.height/2;&amp;#10;        let bottom = this.loc[1] - this.height/2;&amp;#10;        let top = this.loc[1] + this.height/2;&amp;#10;        let within_x = (pos[0] &gt;= left) &amp;&amp; (pos[0] &lt;= right);&amp;#10;        let within_y = (pos[1] &gt;= bottom) &amp;&amp; (pos[1] &lt;= top);&amp;#10;        return within_x &amp;&amp; within_y;&amp;#10;    }&amp;#10;    to_select() {&amp;#10;        this.check_box.setFillColor(&quot;black&quot;);&amp;#10;    }&amp;#10;    to_unselect() {&amp;#10;        this.check_box.setFillColor(&quot;white&quot;);&amp;#10;    }&amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        this.check_box.setAutoDraw(auto_draw);&amp;#10;        this.text_obj.setAutoDraw(auto_draw);&amp;#10;    }&amp;#10;}&amp;#10;class QuizSelectionObjects {&amp;#10;    constructor(window, texts, locs) {&amp;#10;        var n_choices, one_choice;&amp;#10;        this.choice_objs = [];&amp;#10;        this.selected = null;&amp;#10;        n_choices = texts.length;&amp;#10;        this.choices = [];&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(n_choices), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            one_choice = new singleSelectionButton(window, i, texts[i], locs[i]);&amp;#10;            this.choice_objs.push(one_choice);&amp;#10;        }&amp;#10;    }&amp;#10;    check_click(pos) {&amp;#10;        var to_check;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(this.choice_objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            to_check = this.choice_objs[i];&amp;#10;            if (to_check.contains(pos)) {&amp;#10;                if ((this.selected !== null)) {&amp;#10;                    this.choice_objs[this.selected].to_unselect();&amp;#10;                }&amp;#10;                this.selected = i;&amp;#10;                to_check.to_select();&amp;#10;                return true;&amp;#10;            }&amp;#10;        }&amp;#10;        return false;&amp;#10;    }&amp;#10;    get_selected_text() {&amp;#10;        if ((this.selected !== null)) {&amp;#10;            return this.choice_objs[this.selected].text;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        var to_check;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(this.choice_objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            to_check = this.choice_objs[i];&amp;#10;            to_check.setAutoDraw(auto_draw);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;class quizManagementObj {&amp;#10;    constructor() {&amp;#10;        this.obj_display = [];&amp;#10;        this.question_diagram_objs = [];&amp;#10;        this.choice_diagram_objs = [];&amp;#10;        this.choices = null;&amp;#10;        this.people_answer = null;&amp;#10;        this.correct_answer_id = null;&amp;#10;        this.correct_answer = null;&amp;#10;        this.continue_button = null;&amp;#10;        this.question_text = &quot;&quot;;&amp;#10;        &amp;#10;        // layout&amp;#10;        this.quiz_title_loc = [0, 0.35];&amp;#10;        this.quiz_title_width = 1.3;&amp;#10;        this.question_diagram_loc = [0, 0];&amp;#10;        this.question_diagram_size = [0, 0];&amp;#10;        this.choice_diagram_loc = [0, 0];&amp;#10;        this.choice_diagram_size = [0, 0];&amp;#10;        this.question_prompt_loc = [0, 0];&amp;#10;        this.question_prompt_width = 0;&amp;#10;        this.choices_loc = [0, 0];&amp;#10;        this.continue_button_loc = [0, 0];&amp;#10;        this.answer_width = 0;&amp;#10;    }&amp;#10;    initiate_quiz(window, question_type, params) {&amp;#10;        if (question_type === &quot;response_instruction&quot;) {&amp;#10;            // given a stim, what is the correct response?&amp;#10;            &amp;#10;            // create the title&amp;#10;            let title_text = &quot;[Quiz] What is the correct response?&quot;;&amp;#10;            this.create_quiz_title(window, title_text);&amp;#10;            &amp;#10;            // create the stims&amp;#10;            let stims = [funcRandomUniform(0, 180)];&amp;#10;            &amp;#10;            // create question diagram&amp;#10;            this.question_diagram_loc = [-0.3, 0.1];&amp;#10;            this.question_diagram_size = [0.36, 0.36];&amp;#10;            this.create_question_diagram(window, &amp;#10;                &quot;stims&quot;, {&quot;stims&quot;: stims});&amp;#10;                &amp;#10;            // create choice diagram&amp;#10;            let response_mode = params['mode'];&amp;#10;            let correct_ans = stims[0];&amp;#10;            let wrong_ans = (correct_ans + 90) % 180;&amp;#10;            let left_correct = funcRandomUniform(0, 1) &gt; 0.5;&amp;#10;            let choice_values = null;&amp;#10;            if (left_correct) {&amp;#10;                this.correct_answer_id = 0;&amp;#10;                choice_values = [correct_ans, wrong_ans];&amp;#10;            } else {&amp;#10;                this.correct_answer_id = 1;&amp;#10;                choice_values = [wrong_ans, correct_ans];&amp;#10;            }&amp;#10;            this.choice_diagram_loc = [-0.3, -0.2];&amp;#10;            this.choice_diagram_size = [0.6, 0.36];&amp;#10;            this.create_choice_diagram(window, &amp;#10;                'answers', {'answers': choice_values, &amp;#10;                'mode': response_mode});&amp;#10;                &amp;#10;            // create question prompt&amp;#10;            this.question_prompt_loc = [0.2, 0.1];&amp;#10;            this.question_prompt_width = 0.7;&amp;#10;            this.answer_width = 0.6;&amp;#10;            this.question_text = &quot;For the grating patch on the top, \n&quot; +&amp;#10;                &quot;which of the response at the bottom is correct?&quot;&amp;#10;            let question_text_display = this.question_text + &amp;#10;                &quot;\n Choose your answer and click 'continue' to check.&quot;;&amp;#10;            this.question_prompt = new visual.TextStim({&amp;#10;                &quot;win&quot;: window, &quot;text&quot;: question_text_display, &quot;height&quot;: 0.04,&amp;#10;                &quot;pos&quot;: this.question_prompt_loc, &amp;#10;                &quot;wrapWidth&quot;: this.question_prompt_width});&amp;#10;            this.question_prompt.setAutoDraw(true);&amp;#10;            this.obj_display.push(this.question_prompt);&amp;#10;            &amp;#10;            // create choices&amp;#10;            this.choices_loc = [[0.1, - 0.1], [0.1, -0.2]];&amp;#10;            let choice_texts = [&quot;the left one&quot;, &quot;the right one&quot;];&amp;#10;            this.correct_answer = choice_texts[this.correct_answer_id];&amp;#10;            this.choices = new QuizSelectionObjects(&amp;#10;                window, choice_texts, &amp;#10;                this.choices_loc);&amp;#10;            this.obj_display.push(this.choices);&amp;#10;            &amp;#10;            // set continue button position&amp;#10;            this.continue_button_loc = [0.2, - 0.35];&amp;#10;            this.continue_button = funcCreateButton(&amp;#10;                window, &quot;continue&quot;, this.continue_button_loc, &amp;#10;                [0.24, 0.1]);&amp;#10;            this.obj_display.push(this.continue_button);&amp;#10;        } else if (question_type === &quot;cue&quot;) {&amp;#10;            // how to respond to a implicit cue?&amp;#10;            // create the title&amp;#10;            let cue_type = params[&quot;cue_type&quot;];&amp;#10;            let title_text = &quot;[Quiz] What to report when there is an &quot; + cue_type + &quot; cue?&quot;;&amp;#10;            this.create_quiz_title(window, title_text);&amp;#10;            &amp;#10;            // set up question diagram&amp;#10;            this.question_diagram_loc = [0, 0.15];&amp;#10;            this.question_diagram_size = [1, 0.5];&amp;#10;            // create stimulus&amp;#10;            let sampler = params[&quot;stim_sampler&quot;];&amp;#10;            let [stim_region_ids, stims] = sampler.sample_for_trial(false);&amp;#10;            let diagram_params = {&amp;#10;                &quot;stims&quot;: stims, &amp;#10;                &quot;cue_type&quot;: cue_type};&amp;#10;                &amp;#10;            // decide the cue to report&amp;#10;            // let report_type_id = util.randint(0, 3);&amp;#10;            let report_type_id = sampler.n_trials % 3;&amp;#10;            this.correct_answer_id = report_type_id;&amp;#10;            if (cue_type === &quot;explicit&quot;) {&amp;#10;                let to_report = [];&amp;#10;                if (report_type_id === 0) {&amp;#10;                    to_report = [true, false];&amp;#10;                } else if (report_type_id === 1) {&amp;#10;                    to_report = [false, true];&amp;#10;                } else {&amp;#10;                    to_report = [true, true];&amp;#10;                }&amp;#10;                diagram_params[&quot;to_report_code&quot;] = to_report;&amp;#10;            } else {}&amp;#10;        &amp;#10;            // set color code&amp;#10;            diagram_params[&quot;color_code&quot;] = (Math.random() &lt; 0.5) ? [1, 2] : [2, 1];&amp;#10;        &amp;#10;            // create question diagram&amp;#10;            this.create_question_diagram(&amp;#10;                window, &quot;stims_with_cue&quot;, diagram_params);&amp;#10;&amp;#10;            // create question prompt&amp;#10;            this.question_prompt_loc = [-0.3, -0.15];&amp;#10;            this.question_prompt_width = 0.7;&amp;#10;            this.answer_width = 0.6;&amp;#10;            this.question_text = &quot;Given the cue in the center, \n&quot; +&amp;#10;                &quot;which of the stimuli you need to remember and report?&quot;;&amp;#10;            let question_text_display = this.question_text + &quot;\n Choose your answer and click 'continue' to check.&quot;;&amp;#10;            this.question_prompt = new visual.TextStim({&amp;#10;                &quot;win&quot;: window, &quot;text&quot;: question_text_display, &quot;height&quot;: 0.04,&amp;#10;                &quot;pos&quot;: this.question_prompt_loc, &amp;#10;                &quot;wrapWidth&quot;: this.question_prompt_width});&amp;#10;            this.question_prompt.setAutoDraw(true);&amp;#10;            this.obj_display.push(this.question_prompt);&amp;#10;            &amp;#10;            // create choices&amp;#10;            this.choices_loc = [[0.1, -0.1], [0.1, -0.17], [0.1, -0.24]];&amp;#10;            let choice_texts = [&quot;the left one&quot;, &quot;the right one&quot;, &quot;both&quot;];&amp;#10;            this.correct_answer = choice_texts[this.correct_answer_id];&amp;#10;            this.choices = new QuizSelectionObjects(&amp;#10;                window, choice_texts, &amp;#10;                this.choices_loc);&amp;#10;            this.obj_display.push(this.choices);&amp;#10;    &amp;#10;            // set continue button position&amp;#10;            this.continue_button_loc = [0, -0.35];&amp;#10;            this.continue_button = funcCreateButton(&amp;#10;                window, &quot;continue&quot;, this.continue_button_loc, &amp;#10;                [0.24, 0.1]);&amp;#10;            this.obj_display.push(this.continue_button);&amp;#10;            &amp;#10;        } else {&amp;#10;        }&amp;#10;    }&amp;#10;    create_quiz_title(window, title_text) {&amp;#10;        this.title = new visual.TextStim({&amp;#10;            &quot;win&quot;: window, &quot;text&quot;: title_text, &quot;height&quot;: 0.06,&amp;#10;            &quot;pos&quot;: this.quiz_title_loc, &amp;#10;            &quot;wrapWidth&quot;: this.quiz_title_width});&amp;#10;        this.title.setAutoDraw(true);&amp;#10;        this.obj_display.push(this.title);&amp;#10;    }&amp;#10;    create_question_diagram(window, diagram_type, params) {&amp;#10;        this.question_diagram_objs = new QuizDiagram(&amp;#10;            window, this.question_diagram_loc, &amp;#10;            this.question_diagram_size[0], this.question_diagram_size[1], &amp;#10;            diagram_type, params);&amp;#10;        this.obj_display.push(this.question_diagram_objs);&amp;#10;    }&amp;#10;    create_choice_diagram(window, diagram_type, params) {&amp;#10;        this.choice_diagram_objs = new QuizDiagram(&amp;#10;            window, this.choice_diagram_loc, &amp;#10;            this.choice_diagram_size[0], &amp;#10;            this.choice_diagram_size[1], &amp;#10;            diagram_type, params);&amp;#10;        this.obj_display.push(this.choice_diagram_objs);&amp;#10;    }&amp;#10;    collect_quiz_answer() {&amp;#10;        this.people_answer = this.choices.get_selected_text();&amp;#10;        return (this.people_answer !== null);&amp;#10;    }&amp;#10;    create_quiz_feedback_obj(window) {&amp;#10;        // remove choices&amp;#10;        this.choices.setAutoDraw(false);&amp;#10;        this.choices = [];&amp;#10;        &amp;#10;        // change question&amp;#10;        this.question_prompt.setText(this.question_text)&amp;#10;        &amp;#10;        // Display answer&amp;#10;        let answer_msg = &quot;&quot;;&amp;#10;        if (this.people_answer === this.correct_answer) {&amp;#10;            // The person got the correct answer&amp;#10;            answer_msg += &quot;Your are right! &quot;;&amp;#10;            answer_msg += &quot;The correct answer is '&quot; + this.correct_answer + &quot;'\n&quot;;&amp;#10;        } else {&amp;#10;            answer_msg += &quot;Thanks for your input! However, &quot;;&amp;#10;            answer_msg += &quot;the correct answer is '&quot; + this.correct_answer + &quot;'\n&quot;;&amp;#10;        }&amp;#10;        let answer_msg_width = this.answer_width;&amp;#10;        let answer_msg_x = this.choices_loc[0][0] + 0.2;&amp;#10;        let answer_msg_y = (this.choices_loc[0][1] + &amp;#10;            this.choices_loc[this.choices_loc.length-1][1]) / 2;&amp;#10;        this.answer_msg_obj = new visual.TextStim({&amp;#10;            &quot;win&quot;: window, &quot;text&quot;: answer_msg, &quot;height&quot;: 0.04,&amp;#10;            &quot;pos&quot;: [answer_msg_x, answer_msg_y],&amp;#10;            &quot;wrapWidth&quot;: answer_msg_width});&amp;#10;        this.answer_msg_obj.setAutoDraw(true);&amp;#10;        this.obj_display.push(this.answer_msg_obj);&amp;#10;    }&amp;#10;    setAutoDraw(auto_draw) {&amp;#10;        var n_objs, obj;&amp;#10;        n_objs = this.obj_display.length;&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(n_objs), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            obj = this.obj_display[i];&amp;#10;            obj.setAutoDraw(auto_draw);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareQuiz" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="responseInstructionQuiz">
      <RoutineSettingsComponent name="responseInstructionQuiz" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="responseInstructionQuiz" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeResponseInstructionQuiz" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="quiz_obj = new quizManagementObj();&amp;#10;quiz_obj.initiate_quiz(&amp;#10;    psychoJS.window, &quot;response_instruction&quot;, &amp;#10;    {&quot;mode&quot;: instruction_mode});&amp;#10;has_revealed_answer = false;&amp;#10;offset_t = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="quiz_obj = quizManagementObj()&amp;#10;quiz_obj.initiate_quiz(&amp;#10;    win, 'response_instruction', &amp;#10;    {'mode': instruction_mode})&amp;#10;has_revealed_answer = False&amp;#10;offset_t = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseResponseInstructionQuiz.getPressed()[0]&amp;#10;mouse_pos = mouseResponseInstructionQuiz.getPos()&amp;#10;&amp;#10;# update selection&amp;#10;if left_button and (t &gt; 0.5 + offset_t):&amp;#10;    offset_t = t&amp;#10;    # logging.warning('LOGGING: left button clicked')&amp;#10;    if has_revealed_answer:&amp;#10;        # check if we should continue&amp;#10;        if quiz_obj.continue_button.contains(mouse_pos):&amp;#10;            continueRoutine = False&amp;#10;            # logging.warning('LOGGING: continue')&amp;#10;    else:&amp;#10;        # update selection&amp;#10;        has_new_select = quiz_obj.choices.check_click(mouse_pos)&amp;#10;        if has_new_select:&amp;#10;            # logging.warning('LOGGING: new selected')&amp;#10;            pass&amp;#10;        # check if people want to submit&amp;#10;        if quiz_obj.continue_button.contains(mouse_pos):&amp;#10;            # logging.warning('LOGGING: want to submit')&amp;#10;            have_selection = quiz_obj.collect_quiz_answer()&amp;#10;            if have_selection:&amp;#10;                # if has valid answer, update it&amp;#10;                quiz_obj.create_quiz_feedback_obj(win)&amp;#10;                has_revealed_answer = True&amp;#10;        else:&amp;#10;            # logging.warning('LOGGING: no submit button clicked')&amp;#10;            pass&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseResponseInstructionQuiz.getPressed()[0];&amp;#10;mouse_pos = mouseResponseInstructionQuiz.getPos();&amp;#10;&amp;#10;// update selection&amp;#10;if ((left_button &amp;&amp; (t &gt; (0.5 + offset_t)))) {&amp;#10;    offset_t = t;&amp;#10;    console.log(&quot;LOGGING: left button clicked&quot;);&amp;#10;    if (has_revealed_answer) {&amp;#10;        // check if we should continue&amp;#10;        if (quiz_obj.continue_button.contains(mouse_pos)) {&amp;#10;            continueRoutine = false;&amp;#10;            console.log(&quot;LOGGING: continue&quot;);&amp;#10;        }&amp;#10;    } else {&amp;#10;        // update selection&amp;#10;        let has_new_select = quiz_obj.choices.check_click(mouse_pos);&amp;#10;        if (has_new_select) {&amp;#10;            console.log(&quot;LOGGING: new selected&quot;);&amp;#10;        }&amp;#10;        // check if people want to submit&amp;#10;        if (quiz_obj.continue_button.contains(mouse_pos)) {&amp;#10;            console.log(&quot;LOGGING: want to submit&quot;);&amp;#10;            let has_selection = quiz_obj.collect_quiz_answer();&amp;#10;            if (has_selection) {&amp;#10;                // if has valid answer update it&amp;#10;                quiz_obj.create_quiz_feedback_obj(psychoJS.window);&amp;#10;                has_revealed_answer = true;&amp;#10;            }&amp;#10;        } else {&amp;#10;            console.log(&quot;LOGGING: no submit button clicked&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// collect data&amp;#10;let get_quiz_correct = (quiz_obj.correct_answer === quiz_obj.people_answer);&amp;#10;psychoJS.experiment.addData(&quot;response_instruction_quiz&quot;, get_quiz_correct);&amp;#10;psychoJS.experiment.addData(&quot;mode&quot;, instruction_mode);&amp;#10;&amp;#10;quiz_obj.setAutoDraw(false);&amp;#10;quiz_obj = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# collect result&amp;#10;get_quiz_correct = quiz_obj.correct_answer == quiz_obj.people_answer&amp;#10;thisExp.addData(f'response_instruction_quiz', get_quiz_correct)&amp;#10;thisExp.addData('mode', instruction_mode)&amp;#10;&amp;#10;quiz_obj.setAutoDraw(False)&amp;#10;quiz_obj = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeResponseInstructionQuiz" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseResponseInstructionQuiz" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseResponseInstructionQuiz" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="prepareSingleTrial">
      <RoutineSettingsComponent name="prepareSingleTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareSingleTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareSingleTrial" plugin="None">
        <Param val="class ResponseLocationSampler:&amp;#10;    def __init__(self, xs, ys, allow_diagonal, allow_off_axis, allow_row_align):&amp;#10;        self.xs = [0, ] + xs[:]&amp;#10;        self.ys = [0, ] + ys[:]&amp;#10;        &amp;#10;        # pre-register possible locations&amp;#10;        resp_loc_id_candidates = []&amp;#10;        &amp;#10;        # register locations on axis&amp;#10;        if allow_diagonal:&amp;#10;            for loc_flip in [0, 1]:&amp;#10;                resp_loc_ids = [&amp;#10;                    [1, 1+loc_flip],&amp;#10;                    [2, 2-loc_flip]]&amp;#10;                resp_loc_id_candidates.append(resp_loc_ids)&amp;#10;&amp;#10;        # register row- or column-align positions&amp;#10;        fix_pos_ids = [0, 1, 2] if allow_off_axis else [0, ]&amp;#10;        for fix_pos_id in fix_pos_ids:&amp;#10;            resp_loc_ids = [[fix_pos_id, 1], [fix_pos_id, 2]]&amp;#10;            resp_loc_id_candidates.append(resp_loc_ids)&amp;#10;            if allow_row_align:&amp;#10;                resp_loc_ids = [[1, fix_pos_id], [2, fix_pos_id]]&amp;#10;                resp_loc_id_candidates.append(resp_loc_ids)&amp;#10;                &amp;#10;        self.resp_loc_id_candidates = resp_loc_id_candidates&amp;#10;        &amp;#10;    def sample_location(self, allow_swap):&amp;#10;        loc_id_pos = random.randint(0, len(self.resp_loc_id_candidates)-1)&amp;#10;        loc_ids = self.resp_loc_id_candidates[loc_id_pos]&amp;#10;        resp_locs = []&amp;#10;        if allow_swap and random.random() &lt; 0.5:&amp;#10;            resp_locs = [&amp;#10;                [self.xs[loc_ids[1][0]], self.ys[loc_ids[1][1]]],&amp;#10;                [self.xs[loc_ids[0][0]], self.ys[loc_ids[0][1]]]]&amp;#10;        else:&amp;#10;            resp_locs = [&amp;#10;                [self.xs[loc_ids[0][0]], self.ys[loc_ids[0][1]]],&amp;#10;                [self.xs[loc_ids[1][0]], self.ys[loc_ids[1][1]]]]&amp;#10;&amp;#10;        return resp_locs" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class ResponseLocationSampler {&amp;#10;    constructor(xs, ys, allow_diagonal, allow_off_axis, allow_row_align) {&amp;#10;        this.xs = [0].concat([...xs]);&amp;#10;        this.ys = [0].concat([...ys]);&amp;#10;        &amp;#10;        // Pre-register possible locations&amp;#10;        this.resp_loc_id_candidates = [];&amp;#10;        &amp;#10;        // Register locations on axis&amp;#10;        if (allow_diagonal) {&amp;#10;            for (let loc_flip of [0, 1]) {&amp;#10;                let resp_loc_ids = [&amp;#10;                    [1, 1 + loc_flip],&amp;#10;                    [2, 2 - loc_flip]&amp;#10;                ];&amp;#10;                this.resp_loc_id_candidates.push(resp_loc_ids);&amp;#10;            }&amp;#10;        }&amp;#10;&amp;#10;        // Register row- or column-align positions&amp;#10;        let fix_pos_ids = allow_off_axis ? [0, 1, 2] : [0];&amp;#10;        for (let fix_pos_id of fix_pos_ids) {&amp;#10;            let resp_loc_ids = [[fix_pos_id, 1], [fix_pos_id, 2]];&amp;#10;            this.resp_loc_id_candidates.push(resp_loc_ids);&amp;#10;            if (allow_row_align) {&amp;#10;                resp_loc_ids = [[1, fix_pos_id], [2, fix_pos_id]];&amp;#10;                this.resp_loc_id_candidates.push(resp_loc_ids);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    &amp;#10;    sample_location(allow_swap) {&amp;#10;        let loc_id_pos = util.randint(0, this.resp_loc_id_candidates.length);&amp;#10;        let loc_ids = this.resp_loc_id_candidates[loc_id_pos];&amp;#10;        let resp_locs = [];&amp;#10;        if (allow_swap &amp;&amp; Math.random() &lt; 0.5) { // Randomly decide to swap&amp;#10;            resp_locs = [&amp;#10;                [this.xs[loc_ids[1][0]], this.ys[loc_ids[1][1]]],&amp;#10;                [this.xs[loc_ids[0][0]], this.ys[loc_ids[0][1]]]&amp;#10;            ];&amp;#10;        } else {&amp;#10;            resp_locs = [&amp;#10;                [this.xs[loc_ids[0][0]], this.ys[loc_ids[0][1]]],&amp;#10;                [this.xs[loc_ids[1][0]], this.ys[loc_ids[1][1]]]&amp;#10;            ];&amp;#10;        }&amp;#10;&amp;#10;        return resp_locs;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# define the 4 quadrants to display/response&amp;#10;quadrant_x_pos = [-0.25, 0.25]&amp;#10;quadrant_y_pos = [0.3, -0.24]&amp;#10;&amp;#10;# pre-register possible locations&amp;#10;allow_diagonal = False # TO TUNE&amp;#10;allow_off_axis = False # TO TUNE&amp;#10;allow_row_align = True # TO TUNE   &amp;#10;allow_location_swap = True # TO TUNE&amp;#10;resp_location_sampler = ResponseLocationSampler(&amp;#10;    xs=quadrant_x_pos, &amp;#10;    ys=quadrant_y_pos, &amp;#10;    allow_diagonal=allow_diagonal, &amp;#10;    allow_off_axis=allow_off_axis, &amp;#10;    allow_row_align=allow_location_swap)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// define the 4 quadrants to display/response&amp;#10;quadrant_x_pos = [-0.25, 0.25];&amp;#10;quadrant_y_pos = [0.3, -0.24];&amp;#10;&amp;#10;// Pre-register possible locations&amp;#10;allow_diagonal = false; // TO TUNE&amp;#10;allow_off_axis = false; // TO TUNE&amp;#10;allow_row_align = true; // TO TUNE   &amp;#10;allow_location_swap = true; // TO TUNE&amp;#10;&amp;#10;resp_location_sampler = new ResponseLocationSampler(&amp;#10;    quadrant_x_pos,&amp;#10;    quadrant_y_pos,&amp;#10;    allow_diagonal,&amp;#10;    allow_off_axis,&amp;#10;    allow_row_align);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// initialize stimuli&amp;#10;// during instruction, two stims are forced to be from different regions&amp;#10;stim_region_ids_selected = null;&amp;#10;stims_selected = null;&amp;#10;allow_same_region = false;&amp;#10;if (has_finished_instruction) {&amp;#10;  // In real trials, 2/3 allow same region&amp;#10;  // allow_same_region = Math.random() &lt; 2/3;&amp;#10;  allow_same_region = false;&amp;#10;}&amp;#10;[stim_region_ids_selected, stims_selected] = stim_sampler.sample_for_trial(&amp;#10;    allow_same_region=allow_same_region);&amp;#10;&amp;#10;// initialize which to report&amp;#10;// 0: to report only the first&amp;#10;// 1: to report only the second&amp;#10;// 2 or 3: to report both&amp;#10;report_type_id = util.randint(0, 4);&amp;#10;if (!has_finished_instruction) {&amp;#10;    report_type_id = block.thisN;&amp;#10;} &amp;#10;to_report_code = [true, true];&amp;#10;if (report_type_id === 0) {&amp;#10;    to_report_code[1] = false;&amp;#10;} else if (report_type_id === 1) {&amp;#10;    to_report_code[0] = false;&amp;#10;}&amp;#10;&amp;#10;// define the color of cues&amp;#10;color_codes = [1, 2];&amp;#10;if (Math.random() &lt; 0.5) {&amp;#10;    color_codes = [2, 1];&amp;#10;}&amp;#10;&amp;#10;// place holder: to record the future response&amp;#10;participant_responses = [null, null];&amp;#10;&amp;#10;// set where to display stimuli&amp;#10;// eyetracking: stimulus all at the center&amp;#10;stim_locs = [[0, 0], [0, 0]]&amp;#10;// select response locations&amp;#10;resp_locs = resp_location_sampler.sample_location(allow_location_swap);&amp;#10;&amp;#10;// set time limits&amp;#10;// total max time for response&amp;#10;response_time = (response_mode === &quot;draw&quot;) ? draw_response_time : click_response_time;&amp;#10;// set time limits for display&amp;#10;trial_display_time = display_time;&amp;#10;// set time limits for delay&amp;#10;delay_time = 4; // funcRandomUniform(delay_time_min, delay_time_max);&amp;#10;// set time limits for response&amp;#10;trial_resp_time = util.sum(to_report_code) * response_time;&amp;#10;// set time limits for ITI&amp;#10;total_duration_min = (((delay_time_min + display_time) + (util.sum(to_report_code) * response_time * 0.5)) + post_trial_time_min);&amp;#10;total_duration_max = (((delay_time_max + display_time) + (util.sum(to_report_code) * response_time * 0.5)) + (post_trial_time_max * 0.5));&amp;#10;&amp;#10;// make things slower for instruction&amp;#10;let slow_down_factor = 1.5&amp;#10;if (!has_finished_instruction) {&amp;#10;    trial_display_time *= slow_down_factor;&amp;#10;    display_cue_onset_time *= slow_down_factor;&amp;#10;    trial_resp_time *= slow_down_factor;&amp;#10;}&amp;#10;&amp;#10;// start the timer for the trial&amp;#10;trial_timer = new util.Clock();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# initialize stimuli&amp;#10;# during instruction, two stims are forced to be from different regions&amp;#10;allow_same_region = False&amp;#10;if has_finished_instruction:&amp;#10;    # in real trials, 2/3 allow same region&amp;#10;    # allow_same_region = random.random() &lt; 2/3&amp;#10;    allow_same_region = False&amp;#10;stim_region_ids_selected, stims_selected = stim_sampler.sample_for_trial(&amp;#10;    allow_same_region=allow_same_region)&amp;#10;    &amp;#10;# initialize which to report&amp;#10;# 0: to report only the first&amp;#10;# 1: to report only the second&amp;#10;# 2 or 3: to report both&amp;#10;report_type_id = random.randint(0, 3)&amp;#10;if not has_finished_instruction:&amp;#10;    report_type_id = block.thisN&amp;#10;to_report_code = [True, True]&amp;#10;if report_type_id == 0:&amp;#10;    to_report_code[1] = False&amp;#10;elif report_type_id == 1:&amp;#10;    to_report_code[0] = False&amp;#10;    &amp;#10;# define the color of cues&amp;#10;color_codes = (1, 2)&amp;#10;if random.random() &lt; 0.5:&amp;#10;    color_codes = (2, 1)&amp;#10;&amp;#10;# place holder: to record the future response&amp;#10;participant_responses = [None, None]&amp;#10;&amp;#10;# set where to display stimuli&amp;#10;# eyetracking: all at the center&amp;#10;stim_locs = [(0, 0), (0, 0)]&amp;#10;# select response locations&amp;#10;resp_locs = resp_location_sampler.sample_location(allow_location_swap)&amp;#10;&amp;#10;# set time limits&amp;#10;## total max time for response&amp;#10;response_time = draw_response_time if response_mode == &quot;draw&quot; else click_response_time&amp;#10;## for display&amp;#10;trial_display_time = display_time&amp;#10;## for delay&amp;#10;delay_time = 4 # random.uniform(delay_time_min, delay_time_max)&amp;#10;## for response&amp;#10;trial_resp_time = response_time * sum(to_report_code)&amp;#10;# generate a reasonable range of ITI total duration&amp;#10;total_duration_min = delay_time_min \&amp;#10;    + display_time + response_time * sum(to_report_code) * 0.5 + post_trial_time_min&amp;#10;total_duration_max = delay_time_max \&amp;#10;    + display_time + response_time * sum(to_report_code) * 0.5 + post_trial_time_max * 0.5&amp;#10;&amp;#10;# make things slower for instruction&amp;#10;slow_down_factor = 1.5&amp;#10;if not has_finished_instruction:&amp;#10;    trial_display_time *= slow_down_factor&amp;#10;    display_cue_onset_time *= slow_down_factor&amp;#10;    trial_resp_time *= slow_down_factor&amp;#10;&amp;#10;# start the timer for the trial&amp;#10;trial_timer = core.Clock()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// record data&amp;#10;// record whether this is a practice trial and other misc&amp;#10;psychoJS.experiment.addData('is_real_trial', has_finished_rehearsal);&amp;#10;psychoJS.experiment.addData('sample_stage', stim_sampler.stage_idx);&amp;#10;psychoJS.experiment.addData('block', stim_sampler.block_idx);&amp;#10;&amp;#10;// record the stimulip&amp;#10;psychoJS.experiment.addData(&quot;stim_1&quot;, stims_selected[0]);&amp;#10;psychoJS.experiment.addData(&quot;stim_2&quot;, stims_selected[1]);&amp;#10;psychoJS.experiment.addData(&quot;stim_region_1&quot;, stim_region_ids_selected[0]);&amp;#10;psychoJS.experiment.addData(&quot;stim_region_2&quot;, stim_region_ids_selected[1]);&amp;#10;psychoJS.experiment.addData(&quot;stim_1_loc_x&quot;, stim_locs[0][0]);&amp;#10;psychoJS.experiment.addData(&quot;stim_1_loc_y&quot;, stim_locs[0][1]);&amp;#10;psychoJS.experiment.addData(&quot;stim_2_loc_x&quot;, stim_locs[1][0]);&amp;#10;psychoJS.experiment.addData(&quot;stim_2_loc_y&quot;, stim_locs[1][1]);&amp;#10;psychoJS.experiment.addData(&quot;stim_1_color&quot;, color_codes[0]);&amp;#10;psychoJS.experiment.addData(&quot;stim_2_color&quot;, color_codes[1]);&amp;#10;&amp;#10;// record the trial type&amp;#10;psychoJS.experiment.addData(&quot;mode&quot;, response_mode);&amp;#10;psychoJS.experiment.addData(&quot;trial_code&quot;, trial_type);&amp;#10;// record which is asked to report&amp;#10;psychoJS.experiment.addData(&quot;stim_1_to_report&quot;, to_report_code[0]);&amp;#10;psychoJS.experiment.addData(&quot;stim_2_to_report&quot;, to_report_code[1]);&amp;#10;// record delay&amp;#10;psychoJS.experiment.addData(&quot;delay_post_stim&quot;, delay_post_stim);&amp;#10;psychoJS.experiment.addData(&quot;delay&quot;, delay_time);&amp;#10;// record response position&amp;#10;psychoJS.experiment.addData(&quot;resp_1_loc_x&quot;, resp_locs[0][0]);&amp;#10;psychoJS.experiment.addData(&quot;resp_1_loc_y&quot;, resp_locs[0][1]);&amp;#10;psychoJS.experiment.addData(&quot;resp_2_loc_x&quot;, resp_locs[1][0]);&amp;#10;psychoJS.experiment.addData(&quot;resp_2_loc_y&quot;, resp_locs[1][1]);&amp;#10;// record the strategy for stim generation&amp;#10;psychoJS.experiment.addData('stim_sample_method', stim_sampler.strategy);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# record data&amp;#10;# record whether this is a practice trial and other misc&amp;#10;thisExp.addData('is_real_trial', has_finished_rehearsal)&amp;#10;thisExp.addData('sample_stage', stim_sampler.stage_idx)&amp;#10;thisExp.addData('block', stim_sampler.block_idx)&amp;#10;&amp;#10;## record the stimuli&amp;#10;thisExp.addData('stim_1', stims_selected[0])&amp;#10;thisExp.addData('stim_2', stims_selected[1])&amp;#10;thisExp.addData('stim_region_1', stim_region_ids_selected[0])&amp;#10;thisExp.addData('stim_region_2', stim_region_ids_selected[1])&amp;#10;thisExp.addData('stim_1_loc_x', stim_locs[0][0])&amp;#10;thisExp.addData('stim_1_loc_y', stim_locs[0][1])&amp;#10;thisExp.addData('stim_2_loc_x', stim_locs[1][0])&amp;#10;thisExp.addData('stim_2_loc_y', stim_locs[1][1])&amp;#10;thisExp.addData('stim_1_color', color_codes[0])&amp;#10;thisExp.addData('stim_2_color', color_codes[1])&amp;#10;&amp;#10;## record the trial type&amp;#10;thisExp.addData('mode', response_mode)&amp;#10;thisExp.addData('trial_code', trial_type)&amp;#10;## record which is asked to report&amp;#10;thisExp.addData('stim_1_to_report', to_report_code[0])&amp;#10;thisExp.addData('stim_2_to_report', to_report_code[1])&amp;#10;## record delay&amp;#10;thisExp.addData('delay_post_stim', delay_post_stim)&amp;#10;thisExp.addData('delay', delay_time)&amp;#10;## record response position&amp;#10;thisExp.addData('resp_1_loc_x', resp_locs[0][0])&amp;#10;thisExp.addData('resp_1_loc_y', resp_locs[0][1])&amp;#10;thisExp.addData('resp_2_loc_x', resp_locs[1][0])&amp;#10;thisExp.addData('resp_2_loc_y', resp_locs[1][1])&amp;#10;## record the strategy for stim generation&amp;#10;thisExp.addData('stim_sample_method', stim_sampler.strategy)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareSingleTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="trlIDSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trlId = [expInfo[&quot;participant&quot;], block.thisN, EYETRACK_real_block_id];&amp;#10;psychoJS.experiment.addData(&quot;TRIALID&quot;, trlId);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trlId = (expInfo['participant'],block.thisN, EYETRACK_real_block_id)&amp;#10;thisExp.addData('TRIALID',trlId)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="trlIDSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="pre_trial">
      <RoutineSettingsComponent name="pre_trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="pre_trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePreTrial" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the fixation&amp;#10;pre_fixation = new DefaultFixation(psychoJS.window);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# create the fixation&amp;#10;pre_fixation = DefaultFixation(win)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# end routine when time up&amp;#10;if t &gt; pre_trial_time:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// end routine when time up&amp;#10;if (t &gt; pre_trial_time) {&amp;#10;    continueRoutine = false;&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="pre_fixation.setAutoDraw(false);&amp;#10;pre_fixation = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="pre_fixation.setAutoDraw(False)&amp;#10;pre_fixation = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePreTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPreTrial" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPreTrial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="elRecord_fixation" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="this_epoch = &quot;pretrial&quot;;&amp;#10;aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;fixation_rest_start&quot;, aaa().toString());&amp;#10;el_tracker.startRecording(1, 1, 1, 1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="this_epoch = 'fixation'&amp;#10;aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData('fixationStart',str(aaa()))&amp;#10;if eyetracking == 1:&amp;#10;    # get a reference to the currently active EyeLink connection&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    try:&amp;#10;        #start recording&amp;#10;        el_tracker.startRecording(1, 1, 1, 1) &amp;#10;        #send message to tracker to count trial number&amp;#10;        el_tracker.sendMessage('TRIALID %s' % str(trlId))&amp;#10;        el_tracker.sendMessage('fixationRest')&amp;#10;    except RuntimeError as error:&amp;#10;        print(&quot;ERROR:&quot;, error)&amp;#10;        abort_trial()&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData('fixationEnd',str(aaa()))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elRecord_fixation" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="display_stimuli">
      <RoutineSettingsComponent name="display_stimuli" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="display_stimuli" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <MouseComponent name="mouseStim" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseStim" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="trial_display_time" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <CodeComponent name="codeDisplayStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;&amp;#10;// hide the cursor&amp;#10;&amp;#10;// fetch the id of the stimulus&amp;#10;let i = seq_display_loop.thisN;&amp;#10;&amp;#10;// now display the stimulus&amp;#10;let ori = stims_selected[i];&amp;#10;let loc = stim_locs[i];&amp;#10;let stim_obj = funcDrawStim(psychoJS.window, ori, loc, patch_radius);&amp;#10;objs_display.push(stim_obj);&amp;#10;    &amp;#10;// dump the no delay condition&amp;#10;&amp;#10;// to detect whether a pressed has released&amp;#10;has_released = true;&amp;#10;&amp;#10;// to mark if the cue has displayed&amp;#10;has_cue_shown = false;&amp;#10;&amp;#10;// record mouse&amp;#10;display_mouse_xs = [];&amp;#10;display_mouse_ys = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;&amp;#10;# fetch the id of the stimulus&amp;#10;i = seq_display_loop.thisN&amp;#10;&amp;#10;# now display the stimulus&amp;#10;ori = stims_selected[i]&amp;#10;loc = stim_locs[i]&amp;#10;stim_obj = funcDrawStim(win, ori, loc, patch_radius)&amp;#10;objs_display.append(stim_obj)&amp;#10;&amp;#10;# dump the no delay condition&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True&amp;#10;&amp;#10;# to mark if the cue has displayed&amp;#10;has_cue_shown = False&amp;#10;&amp;#10;# record mouse&amp;#10;display_mouse_xs = []&amp;#10;display_mouse_ys = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# display the cue when onset&amp;#10;if (not has_cue_shown) and t &gt;= display_cue_onset_time:&amp;#10;    i = seq_display_loop.thisN&amp;#10;    cue_loc = stim_locs[i]&amp;#10;    cue_color = color_codes[i]&amp;#10;    report_cue = None&amp;#10;    cue_code = None&amp;#10;    if trial_type == 0 :&amp;#10;        # pre-cue&amp;#10;        cue_code = to_report_code[seq_display_loop.thisN]&amp;#10;    elif trial_type == 1:&amp;#10;        cue_code = True # remind them to remember it&amp;#10;    else:&amp;#10;        raise ValueError('Unknown trial type {trial_type}') &amp;#10;    report_cue = SingleCueObject(&amp;#10;        win, cue_loc, cue_code, patch_radius, cue_color)&amp;#10;    objs_display.append(report_cue)&amp;#10;    has_cue_shown = True&amp;#10;&amp;#10;# monitor mouse behavior&amp;#10;mouse_position = mouseStim.getPos()&amp;#10;display_mouse_xs.append(mouse_position[0])&amp;#10;display_mouse_ys.append(mouse_position[1])&amp;#10;            &amp;#10;# end routine when time up&amp;#10;if t &gt; trial_display_time:&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// check if we should start displaying the stimuli&amp;#10;if (!has_cue_shown &amp;&amp; t &gt;= display_cue_onset_time) {&amp;#10;    let i = seq_display_loop.thisN;&amp;#10;    let cue_loc = stim_locs[i];&amp;#10;    let cue_color = color_codes[i];&amp;#10;    let report_cue = null;&amp;#10;    let cue_code = null;&amp;#10;    if (trial_type === 0) {&amp;#10;        // Pre-cue&amp;#10;        cue_code = to_report_code[seq_display_loop.thisN];&amp;#10;    } else if (trial_type === 1) {&amp;#10;        cue_code = true; // remember it!&amp;#10;    } else {&amp;#10;        throw new Error(`Unknown trial type ${trial_type}`);&amp;#10;    }&amp;#10;    report_cue = new SingleCueObject(&amp;#10;        psychoJS.window, cue_loc, cue_code, patch_radius, cue_color);&amp;#10;    objs_display.push(report_cue);&amp;#10;    has_cue_shown = true;&amp;#10;    &amp;#10;    // Additionally, for instruction purpose&amp;#10;    // Show the verbal cue&amp;#10;    if (!has_finished_instruction) {&amp;#10;        // If this is to report&amp;#10;        let sloc = stim_locs[i];&amp;#10;        let s_to_cue = false;&amp;#10;        if (trial_type === 1) {&amp;#10;            // Post-cue: remember everything&amp;#10;            s_to_cue = true;&amp;#10;        } else if (trial_type === 0) {&amp;#10;            // Otherwise, only remember the cued&amp;#10;            s_to_cue = to_report_code[i];&amp;#10;        }&amp;#10;        if (s_to_cue) {&amp;#10;            let additional_cue = new TrainingCue(&amp;#10;                psychoJS.window, 'remember this', sloc, patch_radius&amp;#10;            );&amp;#10;            objs_display.push(additional_cue);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// # monitor mouse behavior&amp;#10;mouse_position = mouseStim.getPos();&amp;#10;display_mouse_xs.push(mouse_position[0]);&amp;#10;display_mouse_ys.push(mouse_position[1]);&amp;#10;&amp;#10;// end routine when time up&amp;#10;if (t &gt; trial_display_time) {&amp;#10;    continueRoutine = false;&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="has_released = true;&amp;#10;&amp;#10;// record mouse position&amp;#10;psychoJS.experiment.addData(`mouseStim.x_${seq_display_loop.thisN+1}`, display_mouse_xs);&amp;#10;psychoJS.experiment.addData(`mouseStim.y_${seq_display_loop.thisN+1}`, display_mouse_ys);&amp;#10;&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(objs_display.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;&amp;#10;objs_display = [];&amp;#10;response_objects = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;# record mouse position&amp;#10;thisExp.addData(f'mouseStim.x_{seq_display_loop.thisN+1}', display_mouse_xs)&amp;#10;thisExp.addData(f'mouseStim.y_{seq_display_loop.thisN+1}', display_mouse_ys)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;response_objects = []&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDisplayStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textDisplayStim" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textDisplayStim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="trial_display_time" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="elRecord_stim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="this_epoch = &quot;pretrial&quot;;&amp;#10;aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;fixation_rest_start&quot;, aaa().toString());&amp;#10;el_tracker.startRecording(1, 1, 1, 1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="this_epoch = 'stim'+str(seq_display_loop.thisN)&amp;#10;&amp;#10;aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'Start',str(aaa()))&amp;#10;&amp;#10;if eyetracking == 1:&amp;#10;    #el_tracker.startRecording(1, 1, 1, 1)&amp;#10;    el_tracker.sendMessage(this_epoch)&amp;#10;&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'End',str(aaa()))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elRecord_stim" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="delay">
      <RoutineSettingsComponent name="delay" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="delay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <MouseComponent name="mouseDelay" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseDelay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="every frame" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="delay_time" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <CodeComponent name="codeDelay" plugin="None">
        <Param val="def sample_n_from_trange(n, duration, min_space, tmin, tmax):&amp;#10;    result = []&amp;#10;    trange_start = tmin&amp;#10;    for i in range(n):&amp;#10;        trange_end = tmax- (n-i) * (min_space + duration)&amp;#10;        if trange_end &lt;= trange_start:&amp;#10;            # no more points available&amp;#10;            continue&amp;#10;        sample = random.uniform(trange_start, trange_end)&amp;#10;        result.append(sample)&amp;#10;        trange_start = sample + min_space + duration&amp;#10;    return result&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="function sample_n_from_trange(n, duration, min_space, tmin, tmax) {&amp;#10;    let result = [];&amp;#10;    let trange_start = tmin;&amp;#10;    &amp;#10;    for (let i = 0; i &lt; n; i++) {&amp;#10;        let trange_end = tmax - (n - i) * (min_space + duration);&amp;#10;        &amp;#10;        if (trange_end &lt;= trange_start) {&amp;#10;            // No more points available&amp;#10;            continue;&amp;#10;        }&amp;#10;        &amp;#10;        let sample = Math.random() * (trange_end - trange_start) + trange_start;&amp;#10;        result.push(sample);&amp;#10;        trange_start = sample + min_space + duration;&amp;#10;    }&amp;#10;    &amp;#10;    return result;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="n_max_cues = 0 # TO TUNE&amp;#10;delay_cue_duration = 0.5 &amp;#10;delay_cue_space = 1 # TO TUNE" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="n_max_cues = 0; // TO TUNE&amp;#10;delay_cue_duration = 0.5; &amp;#10;delay_cue_space = 1 // TO TUNE" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="incidental_cue = null;&amp;#10;t_start_delay_cue = delay_time;&amp;#10;t_end_delay_cue = delay_time;&amp;#10;&amp;#10;// Initialize the start of cues&amp;#10;let n_cues = Math.floor(Math.random() * (n_max_cues + 1));  &amp;#10;tstarts = sample_n_from_trange(&amp;#10;    n_cues, delay_cue_duration, &amp;#10;    delay_cue_space, &amp;#10;    0, delay_time&amp;#10;);&amp;#10;&amp;#10;// console.log(`delay: ${delay_time}, TSTARTS: ${tstarts}`);&amp;#10;n_cue_to_show = tstarts.length;&amp;#10;tindex = 0;&amp;#10;&amp;#10;// Initialize the stimulus they map to&amp;#10;stim_ids = (Math.random() &lt; 0.5) ? [0, 1] : [1, 0];&amp;#10;stim_ids = stim_ids.slice(0, n_cue_to_show); &amp;#10;// console.log(`stim ids ${stim_ids}`);&amp;#10;&amp;#10;// create fixation&amp;#10;// fixation = new DefaultFixation(psychoJS.window);&amp;#10;&amp;#10;// record mouse&amp;#10;long_delay_mouse_xs = [];&amp;#10;long_delay_mouse_ys = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="incidental_cue = None&amp;#10;t_start_delay_cue = delay_time&amp;#10;t_end_delay_cue = delay_time&amp;#10;&amp;#10;# initialize the start of cues&amp;#10;n_cues = random.randint(0, n_max_cues)&amp;#10;tstarts = sample_n_from_trange(&amp;#10;    n=n_cues, duration=delay_cue_duration, &amp;#10;    min_space=delay_cue_space, &amp;#10;    tmin=0, tmax=delay_time)&amp;#10;# logging.log(level=logging.WARN, msg=f'delay: {delay_time}, TSTARTS: {tstarts}')&amp;#10;n_cue_to_show = len(tstarts)&amp;#10;tindex = 0&amp;#10;&amp;#10;# initialize the stimulus they map to&amp;#10;stim_ids = [0, 1] if random.random() &lt; 0.5 else [1, 0]&amp;#10;stim_ids = stim_ids[0:n_cue_to_show]&amp;#10;# logging.log(level=logging.WARN, msg=f'stim ids {stim_ids}')&amp;#10;&amp;#10;# create fixation&amp;#10;# fixation = DefaultFixation(win)&amp;#10;&amp;#10;# record mouse&amp;#10;long_delay_mouse_xs = []&amp;#10;long_delay_mouse_ys = []&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# end routine when time up&amp;#10;if t &gt; delay_time:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if (incidental_cue is not None) and (t &gt; t_end_delay_cue):&amp;#10;    # time to kill the old cue&amp;#10;    incidental_cue.setAutoDraw(False)&amp;#10;    incidental_cue = None&amp;#10;    &amp;#10;if n_cue_to_show &gt; 0:&amp;#10;    # update time for the next&amp;#10;    t_start_delay_cue = tstarts[tindex]&amp;#10;    if t &gt; t_start_delay_cue:&amp;#10;        # update the end time&amp;#10;        t_end_delay_cue = t_start_delay_cue + delay_cue_duration&amp;#10;        # logging.log(level=logging.WARN, msg=f'time: {t_start_delay_cue} -- {t_end_delay_cue}')&amp;#10;        &amp;#10;        # fetch stim information&amp;#10;        stim_id = stim_ids[tindex]&amp;#10;        # logging.log(level=logging.WARN, msg=f'stim id: {stim_id}')&amp;#10;        cue_code= to_report_code[stim_id] if trial_type == 0 else False&amp;#10;        cue_loc = stim_locs[stim_id]&amp;#10;        cue_color = color_codes[stim_id]&amp;#10;        # logging.log(level=logging.WARN, msg=f'stim info:  code {cue_code}, loc {cue_loc}, color {cue_color}')&amp;#10;        &amp;#10;        # create the cue&amp;#10;        incidental_cue = SingleCueObject(&amp;#10;            win, cue_loc, cue_code, patch_radius, cue_color)&amp;#10;&amp;#10;        # update stats&amp;#10;        tindex += 1&amp;#10;        n_cue_to_show -= 1&amp;#10;    &amp;#10;# monitor mouse behavior&amp;#10;mouse_position = mouseDelay.getPos()&amp;#10;long_delay_mouse_xs.append(mouse_position[0])&amp;#10;long_delay_mouse_ys.append(mouse_position[1])&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// End routine when time is up&amp;#10;if (t &gt; delay_time) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;&amp;#10;if ((incidental_cue !== null) &amp;&amp; (t &gt; t_end_delay_cue)) {&amp;#10;    // Time to remove the old cue&amp;#10;    incidental_cue.setAutoDraw(false);&amp;#10;    incidental_cue = null;&amp;#10;}&amp;#10;&amp;#10;if (n_cue_to_show &gt; 0) {&amp;#10;    // Update time for the next cue&amp;#10;    t_start_delay_cue = tstarts[tindex];&amp;#10;    if (t &gt; t_start_delay_cue) {&amp;#10;        // Update the end time&amp;#10;        t_end_delay_cue = t_start_delay_cue + delay_cue_duration;&amp;#10;        // console.log(`time: ${t_start_delay_cue} -- ${t_end_delay_cue}`);&amp;#10;&amp;#10;        // Fetch stimulus information&amp;#10;        let stim_id = stim_ids[tindex];&amp;#10;        // console.log(`stim id: ${stim_id}`);&amp;#10;        let cue_code = (trial_type === 0) ? to_report_code[stim_id] : false;&amp;#10;        let cue_loc = stim_locs[stim_id];&amp;#10;        let cue_color = color_codes[stim_id];&amp;#10;        // console.log(`stim info: code ${cue_code}, loc ${cue_loc}, color ${cue_color}`);&amp;#10;&amp;#10;        // Create the cue&amp;#10;        incidental_cue = new SingleCueObject(&amp;#10;            psychoJS.window, cue_loc, cue_code, patch_radius, cue_color&amp;#10;        );&amp;#10;&amp;#10;        // Update statistics&amp;#10;        tindex += 1;&amp;#10;        n_cue_to_show -= 1;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// monitor mouse behavior&amp;#10;mouse_position = mouseDelay.getPos();&amp;#10;long_delay_mouse_xs.push(mouse_position[0]);&amp;#10;long_delay_mouse_ys.push(mouse_position[1]);&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (incidental_cue !== null) {&amp;#10;    incidental_cue.setAutoDraw(false);&amp;#10;    incidental_cue = null;&amp;#10;}&amp;#10;&amp;#10;// remove the fixation&amp;#10;// fixation.setAutoDraw(false);&amp;#10;&amp;#10;psychoJS.experiment.addData(&quot;inci_cue_time&quot;, tstarts);&amp;#10;psychoJS.experiment.addData(&quot;inci_cue_ids&quot;, stim_ids);&amp;#10;&amp;#10;// record mouse position&amp;#10;psychoJS.experiment.addData(`mouseDelay.x_${seq_display_loop.thisN+1}`, long_delay_mouse_xs);&amp;#10;psychoJS.experiment.addData(`mouseDelay.y_${seq_display_loop.thisN+1}`, long_delay_mouse_ys);&amp;#10;&amp;#10;// shwo the cursor&amp;#10;psychoJS.window.mouseVisible = true;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if incidental_cue is not None:&amp;#10;    incidental_cue.setAutoDraw(False)&amp;#10;    incidental_cue = None&amp;#10;    &amp;#10;# remove the fixation&amp;#10;# fixation.setAutoDraw(False)&amp;#10;    &amp;#10;thisExp.addData('inci_cue_time', tstarts)&amp;#10;thisExp.addData('inci_cue_ids', stim_ids)&amp;#10;&amp;#10;# record mouse position&amp;#10;thisExp.addData(f'mouseDelay.x_{seq_display_loop.thisN+1}', long_delay_mouse_xs)&amp;#10;thisExp.addData(f'mouseDelay.y_{seq_display_loop.thisN+1}', long_delay_mouse_ys)&amp;#10;&amp;#10;# show the cursor&amp;#10;win.mouseVisible = True&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDelay" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textDelay" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textDelay" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="elRecord_delay" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="this_epoch = &quot;pretrial&quot;;&amp;#10;aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;fixation_rest_start&quot;, aaa().toString());&amp;#10;el_tracker.startRecording(1, 1, 1, 1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="this_epoch = 'delay'&amp;#10;&amp;#10;aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'Start',str(aaa()))&amp;#10;&amp;#10;if eyetracking == 1:&amp;#10;    #el_tracker.startRecording(1, 1, 1, 1)&amp;#10;    el_tracker.sendMessage(this_epoch)&amp;#10;&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'End',str(aaa()))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elRecord_delay" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="response">
      <RoutineSettingsComponent name="response" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeDelayResp" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;response_objects = []&amp;#10;for i in range(2):&amp;#10;    loc = resp_locs[i]&amp;#10;    to_report = to_report_code[i]&amp;#10;    response_obj = None&amp;#10;    if response_mode == 'click':&amp;#10;        response_obj = funcDrawAdjustResponse(&amp;#10;            win, loc, patch_radius, click_radius, to_report)&amp;#10;    elif response_mode == 'draw':&amp;#10;        response_obj = funcDrawDrawResponse(&amp;#10;            win, loc, patch_radius, to_report)&amp;#10;    else:&amp;#10;        raise NotImplementedError(f'Unknown response mode: {response_mode}')&amp;#10;    objs_display.append(response_obj)&amp;#10;    response_objects.append(response_obj)&amp;#10;    &amp;#10;    # give order color cue&amp;#10;    if to_report: # only if its valid region&amp;#10;        report_cue = SingleCueObject(&amp;#10;            win, loc, 99, patch_radius*0.6, color_codes[i])&amp;#10;        objs_display.append(report_cue)&amp;#10;    &amp;#10;    # give cues for instruction&amp;#10;    if not has_finished_instruction:&amp;#10;        if to_report:&amp;#10;            additional_cue = TrainingCue(&amp;#10;                win, 'report here', &amp;#10;                loc, patch_radius)&amp;#10;            objs_display.append(additional_cue)&amp;#10;&amp;#10;# to add the confirm button&amp;#10;continue_button = None&amp;#10;if len(response_objects) &gt; 0:&amp;#10;    # loc_x = (resp_locs[0][0] + resp_locs[1][0]) / 2&amp;#10;    # loc_y = (resp_locs[0][1] + resp_locs[1][1]) / 2&amp;#10;    continue_button = funcCreateButton(&amp;#10;        win, 'continue', pos=(0, 0),&amp;#10;        size=(button_width*1.3, button_height*1.3))&amp;#10;    objs_display.append(continue_button)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# read mouse click&amp;#10;if len(response_objects) &gt; 0:&amp;#10;    # if there are objects clicked&amp;#10;    left_button = responseMouse.getPressed()[0]&amp;#10;    mouse_position = responseMouse.getPos()&amp;#10;    mouse_time = t&amp;#10;    if left_button:&amp;#10;        if continue_button.contains(mouse_position):&amp;#10;            # first check if it's over the continue button&amp;#10;            no_pending = funcCheckNoPending(response_objects)&amp;#10;            if no_pending:&amp;#10;                continueRoutine = False&amp;#10;        else:&amp;#10;            if response_mode == 'click':&amp;#10;                # only register the first click&amp;#10;                if has_released:&amp;#10;                    # this is a new press, register it&amp;#10;                    has_released = False&amp;#10;                    # otherwise, ignore it&amp;#10;                    for i in range(len(response_objects)):&amp;#10;                        # update each position with the click&amp;#10;                        resp_obj = response_objects[i]&amp;#10;                        resp_obj.register_click(mouse_position, mouse_time)&amp;#10;            elif response_mode == 'draw':&amp;#10;                # register all mouse movements&amp;#10;                has_released = False&amp;#10;                for i in range(len(response_objects)):&amp;#10;                    # update each position with the click&amp;#10;                    resp_obj = response_objects[i]&amp;#10;                    has_redo = resp_obj.register_mouse(&amp;#10;                        mouse_position, mouse_time)&amp;#10;                    # update the time limit&amp;#10;                    if has_redo:&amp;#10;                        trial_resp_time += response_time&amp;#10;                        # trial_display_time = t + response_time &amp;#10;    else:&amp;#10;        # check if we should update has_released&amp;#10;        has_released = True&amp;#10;        if response_mode == 'draw':&amp;#10;            for i in range(len(response_objects)):&amp;#10;                # update each position with the click&amp;#10;                resp_obj = response_objects[i]&amp;#10;                resp_obj.deregister_mouse(mouse_position, mouse_time)&amp;#10;&amp;#10;    # register click on space&amp;#10;    key_inputs = keyRespInput.getKeys(clear=True)&amp;#10;    if 'space' in key_inputs:&amp;#10;        # check if all required response is there&amp;#10;        no_pending = funcCheckNoPending(response_objects)&amp;#10;        if no_pending:&amp;#10;            continueRoutine = False&amp;#10;            &amp;#10;if enforce_response_time_limit and (t &gt; trial_resp_time):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (response_objects.length &gt; 0) {&amp;#10;    let left_button = responseMouse.getPressed()[0];&amp;#10;    let mouse_position = responseMouse.getPos();&amp;#10;    let mouse_time = t;&amp;#10;    if (left_button) {&amp;#10;        if (continue_button.contains(mouse_position)) {&amp;#10;            let no_pending = funcCheckNoPending(response_objects);&amp;#10;            if (no_pending) {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((response_mode === &quot;click&quot;)) {&amp;#10;                if (has_released) {&amp;#10;                    has_released = false;&amp;#10;                    for (var i, _pj_c = 0, _pj_a = util.range(response_objects.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        i = _pj_a[_pj_c];&amp;#10;                        let resp_obj = response_objects[i];&amp;#10;                        resp_obj.register_click(mouse_position, mouse_time);&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((response_mode === &quot;draw&quot;)) {&amp;#10;                    has_released = false;&amp;#10;                    for (var i, _pj_c = 0, _pj_a = util.range(response_objects.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                        i = _pj_a[_pj_c];&amp;#10;                        let resp_obj = response_objects[i];&amp;#10;                        let has_redo = resp_obj.register_mouse(&amp;#10;                            mouse_position, mouse_time);&amp;#10;                        // # update the time limit&amp;#10;                        if (has_redo) {&amp;#10;                            trial_resp_time += response_time;&amp;#10;                            // trial_display_time = t + response_time;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        has_released = true;&amp;#10;        if ((response_mode === &quot;draw&quot;)) {&amp;#10;            for (var i, _pj_c = 0, _pj_a = util.range(response_objects.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                i = _pj_a[_pj_c];&amp;#10;                let resp_obj = response_objects[i];&amp;#10;                resp_obj.deregister_mouse(mouse_position, mouse_time);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;    // check if we have hit space&amp;#10;    let key_inputs = keyRespInput.getKeys({&quot;keyList&quot;: ['space'], &quot;waitRelease&quot;: false, &quot;clear&quot;: true});&amp;#10;    if (key_inputs.length &gt; 0) {&amp;#10;        // space has been pressed&amp;#10;        let no_pending = funcCheckNoPending(response_objects);&amp;#10;        if (no_pending) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// end routine when time up&amp;#10;if (enforce_response_time_limit &amp;&amp; (t &gt; trial_resp_time)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="has_released = true;&amp;#10;if (response_objects.length &gt; 0) {&amp;#10;    let resp_obj_id = 0;&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(2), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        let to_report = to_report_code[i];&amp;#10;        let resp_x_to_record = [];&amp;#10;        let resp_y_to_record = [];&amp;#10;        let resp_time_to_record = [];&amp;#10;        let resp_has_invalid = false;&amp;#10;        if (to_report) {&amp;#10;            // let resp_obj = response_objects[resp_obj_id];&amp;#10;            let resp_obj = response_objects[i];&amp;#10;            if ((response_mode === &quot;click&quot;)) {&amp;#10;                resp_x_to_record = resp_obj.clicks_x;&amp;#10;                resp_y_to_record = resp_obj.clicks_y;&amp;#10;                resp_time_to_record = resp_obj.clicks_time;&amp;#10;            } else {&amp;#10;                if ((response_mode === &quot;draw&quot;)) {&amp;#10;                    // save the stroke&amp;#10;                    if (resp_obj.has_unsaved_stroke) {&amp;#10;                        resp_obj.save_stroke();&amp;#10;                    }&amp;#10;                    // save the drawings&amp;#10;                    if (resp_obj.has_unsaved_drawing) {&amp;#10;                        resp_obj.save_drawing();&amp;#10;                    }&amp;#10;                    resp_x_to_record = resp_obj.all_drawings_x;&amp;#10;                    resp_y_to_record = resp_obj.all_drawings_y;&amp;#10;                    resp_time_to_record = resp_obj.all_drawings_time;&amp;#10;                }&amp;#10;            }&amp;#10;        &amp;#10;            // Approximate the response&amp;#10;            // If it's not null, compute the error and add it to the records&amp;#10;            let resp_approximated = resp_obj.compute_response();&amp;#10;            if (resp_approximated !== null) {&amp;#10;                let ground_truth = stims_selected[i];&amp;#10;                let error_approximated = funcComputeOriDiff(resp_approximated, ground_truth);&amp;#10;                block_error_records.push(error_approximated);&amp;#10;            } else {&amp;#10;                // Record cases with no response&amp;#10;                block_error_records.push(null);&amp;#10;            }&amp;#10;        &amp;#10;            // Record the response for feedback&amp;#10;            participant_responses[i] = resp_approximated;&amp;#10;            if (!has_finished_rehearsal &amp;&amp; response_mode === 'draw') {&amp;#10;                // Save the last drawings to display later&amp;#10;                let original_drawing = null;&amp;#10;                if (resp_approximated !== null) {&amp;#10;                    original_drawing = [&amp;#10;                        resp_obj.all_drawings_x[resp_obj.all_drawings_x.length - 1],&amp;#10;                        resp_obj.all_drawings_y[resp_obj.all_drawings_y.length - 1]];&amp;#10;                }&amp;#10;                participant_responses[i] = original_drawing;&amp;#10;            }&amp;#10;        &amp;#10;            resp_obj_id += 1;&amp;#10;        } else {&amp;#10;            let resp_obj = response_objects[i];&amp;#10;            if (resp_obj.has_response) {&amp;#10;                resp_has_invalid = true;&amp;#10;            }&amp;#10;        }&amp;#10;        psychoJS.experiment.addData(`resp_${(i + 1)}_x`, resp_x_to_record);&amp;#10;        psychoJS.experiment.addData(`resp_${(i + 1)}_y`, resp_y_to_record);&amp;#10;        psychoJS.experiment.addData(`resp_${(i + 1)}_time`, resp_time_to_record);&amp;#10;        psychoJS.experiment.addData(`resp_${(i + 1)}_invalid`, resp_has_invalid);&amp;#10;    }&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(objs_display.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;&amp;#10;objs_display = [];&amp;#10;response_objects = [];&amp;#10;&amp;#10;// hide the cursor&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;# record responses, if no-delay&amp;#10;if len(response_objects) &gt; 0:&amp;#10;    resp_obj_id = 0&amp;#10;    for i in range(2):&amp;#10;        to_report = to_report_code[i]&amp;#10;        resp_x_to_record = []&amp;#10;        resp_y_to_record = []&amp;#10;        resp_time_to_record = []&amp;#10;        resp_has_invalid = False&amp;#10;        if to_report:&amp;#10;            # resp_obj = response_objects[resp_obj_id]&amp;#10;            resp_obj = response_objects[i]&amp;#10;            if response_mode == 'click':&amp;#10;                resp_x_to_record = resp_obj.clicks_x&amp;#10;                resp_y_to_record = resp_obj.clicks_y&amp;#10;                resp_time_to_record = resp_obj.clicks_time&amp;#10;            elif response_mode == 'draw':&amp;#10;                # save the stroke&amp;#10;                if resp_obj.has_unsaved_stroke:&amp;#10;                    resp_obj.save_stroke()&amp;#10;                # saving drawings (if there are unsaved)&amp;#10;                if resp_obj.has_unsaved_drawing:&amp;#10;                    resp_obj.save_drawing()&amp;#10;                resp_x_to_record = resp_obj.all_drawings_x&amp;#10;                resp_y_to_record = resp_obj.all_drawings_y&amp;#10;                resp_time_to_record = resp_obj.all_drawings_time&amp;#10;            &amp;#10;            # approximate the response&amp;#10;            # if it's not none, compute the error and add to records&amp;#10;            resp_approximated = resp_obj.compute_response()&amp;#10;            if resp_approximated is not None:&amp;#10;                ground_truth = stims_selected[i]&amp;#10;                error_approximated = funcComputeOriDiff(resp_approximated, ground_truth)&amp;#10;                block_error_records.append(error_approximated)&amp;#10;            else:&amp;#10;                # record those no response&amp;#10;                block_error_records.append(None)&amp;#10;                &amp;#10;            # record the response for feedback&amp;#10;            participant_responses[i] = resp_approximated&amp;#10;            if not has_finished_rehearsal and response_mode == 'draw':&amp;#10;                # save the last drawings to display later&amp;#10;                original_drawing = None&amp;#10;                if resp_approximated is not None:&amp;#10;                    original_drawing = (&amp;#10;                        resp_obj.all_drawings_x[-1],&amp;#10;                        resp_obj.all_drawings_y[-1])&amp;#10;                participant_responses[i] = original_drawing&amp;#10;            &amp;#10;            resp_obj_id += 1&amp;#10;            &amp;#10;        else:&amp;#10;            resp_obj = response_objects[i]&amp;#10;            if resp_obj.has_response:&amp;#10;                resp_has_invalid = True&amp;#10;            &amp;#10;        thisExp.addData(f'resp_{i+1}_x', resp_x_to_record)&amp;#10;        thisExp.addData(f'resp_{i+1}_y', resp_y_to_record)&amp;#10;        thisExp.addData(f'resp_{i+1}_time', resp_time_to_record)&amp;#10;        thisExp.addData(f'resp_{i+1}_invalid', resp_has_invalid)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;response_objects = []&amp;#10;&amp;#10;# hide the cursor&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDelayResp" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="responseMouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="responseMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <KeyboardComponent name="keyRespInput" plugin="None">
        <Param val="'space'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyRespInput" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="elRecord_rsp" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="this_epoch = &quot;pretrial&quot;;&amp;#10;aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;fixation_rest_start&quot;, aaa().toString());&amp;#10;el_tracker.startRecording(1, 1, 1, 1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="this_epoch = 'rsp'&amp;#10;&amp;#10;aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'Start',str(aaa()))&amp;#10;&amp;#10;if eyetracking == 1:&amp;#10;    #el_tracker.startRecording(1, 1, 1, 1)&amp;#10;    el_tracker.sendMessage(this_epoch)&amp;#10;&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'End',str(aaa()))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elRecord_rsp" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="practice_trial_feedback">
      <RoutineSettingsComponent name="practice_trial_feedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="practice_trial_feedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePracticeFeedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;&amp;#10;display_ys = [0.05, -0.3];&amp;#10;display_xs = [-0.3, 0.3];&amp;#10;display_2nd_xs = [-0.45, -0.15, 0.15, 0.45];&amp;#10;display_r = 0.13;&amp;#10;title_ys = [display_ys[0]+display_r+0.02, display_ys[1]-display_r-0.02];&amp;#10;&amp;#10;// display the cue&amp;#10;let report_cue = null;&amp;#10;let cue_codes = null;&amp;#10;if (trial_type === 0) {&amp;#10;    // pre-cue&amp;#10;    cue_codes = to_report_code;&amp;#10;} else if (trial_type === 1) {&amp;#10;    cue_codes = [false, false];&amp;#10;}&amp;#10;&amp;#10;// for backward compatibility&amp;#10;let loc_id = 0;&amp;#10;&amp;#10;for (var i=0; i&lt;2 ; i++) {&amp;#10;    // draw the stimulus&amp;#10;    let ori = stims_selected[i];&amp;#10;    let stim_loc = [display_xs[i], display_ys[loc_id]];&amp;#10;    let stim_obj = funcDrawStim(psychoJS.window, ori, stim_loc, display_r);&amp;#10;    objs_display.push(stim_obj);&amp;#10;    let stim_title = funcCreateFeedbackText(&amp;#10;        psychoJS.window, `stimulus ${i + 1}`, &amp;#10;        [stim_loc[0], title_ys[loc_id]], display_r);&amp;#10;    objs_display.push(stim_title);&amp;#10;    &amp;#10;    // draw the cue&amp;#10;    report_cue = new SingleCueObject(&amp;#10;        psychoJS.window, stim_loc, cue_codes[i], display_r, color_codes[i]);&amp;#10;    objs_display.push(report_cue);&amp;#10;    &amp;#10;    // do we need to report this stimuli?&amp;#10;    let to_report = to_report_code[i];&amp;#10;    if (to_report) {&amp;#10;        // draw the participant's response&amp;#10;        let resp_loc = [display_2nd_xs[2*i], display_ys[1-loc_id]];&amp;#10;        let resp_obj = null;&amp;#10;        let participant_resp = participant_responses[i];&amp;#10;        if ((response_mode === &quot;click&quot;)) {&amp;#10;            resp_obj = funcCreateClickAnswerObject(&amp;#10;                psychoJS.window, participant_resp, resp_loc, display_r, 0.01);&amp;#10;        } else {&amp;#10;            if ((response_mode === &quot;draw&quot;)) {&amp;#10;                resp_obj = funcCreateDrawAnswerObject(&amp;#10;                    psychoJS.window, participant_resp, false, resp_loc, display_r);&amp;#10;            }&amp;#10;        }&amp;#10;        objs_display.push(resp_obj);&amp;#10;        let resp_title = funcCreateFeedbackText(&amp;#10;            psychoJS.window, 'your response', &amp;#10;            [display_2nd_xs[2*i], title_ys[1-loc_id]], display_r);&amp;#10;        objs_display.push(resp_title);&amp;#10;        &amp;#10;        // draw the correct response&amp;#10;        let ans_loc = [display_2nd_xs[2*i+1], display_ys[1-loc_id]];&amp;#10;        let ans_obj = null;&amp;#10;        if (response_mode == 'click') {&amp;#10;            ans_obj = funcCreateClickAnswerObject(&amp;#10;                psychoJS.window, ori, ans_loc, display_r, 0.01);&amp;#10;        } else if (response_mode == 'draw') {&amp;#10;            ans_obj = funcCreateDrawAnswerObject(&amp;#10;                psychoJS.window, ori, true, ans_loc, display_r);&amp;#10;        }&amp;#10;        objs_display.push(ans_obj);&amp;#10;        let ans_title = funcCreateFeedbackText(&amp;#10;            psychoJS.window, 'answer', &amp;#10;            [display_2nd_xs[2*i+1], title_ys[1-loc_id]], display_r);&amp;#10;        objs_display.push(ans_title);&amp;#10;        &amp;#10;        // draw two arrows pointingt to the response&amp;#10;        let to_resp_arrow = funcDrawArrow(&amp;#10;            psychoJS.window, display_r, stim_loc, resp_loc);&amp;#10;        objs_display.push(to_resp_arrow);&amp;#10;        let to_ans_arrow = funcDrawArrow(&amp;#10;            psychoJS.window, display_r, stim_loc, ans_loc);&amp;#10;        objs_display.push(to_ans_arrow);&amp;#10;        &amp;#10;    } else {&amp;#10;        // put a NO there&amp;#10;        let no_resp_loc = [display_xs[i], display_ys[1-loc_id]];&amp;#10;        let no_resp_obj = funcCreateFeedbackText(&amp;#10;            psychoJS.window, 'no response required', &amp;#10;            [display_xs[i], display_ys[1-loc_id]], display_r)&amp;#10;        objs_display.push(no_resp_obj);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// add the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0.52, 0.4], [0.25, 0.1]);&amp;#10;objs_display.push(continue_button);&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;&amp;#10;display_ys = [0.05, -0.3]&amp;#10;display_xs = [-0.3, 0.3]&amp;#10;display_2nd_xs = [-0.45, -0.15, 0.15, 0.45]&amp;#10;display_r = 0.13&amp;#10;title_ys = [display_ys[0]+display_r+0.02, display_ys[1]-display_r-0.02]&amp;#10;&amp;#10;# display the cue &amp;#10;report_cue = None&amp;#10;if trial_type == 0 :&amp;#10;    cue_codes = to_report_code&amp;#10;elif trial_type == 1:&amp;#10;    cue_codes = [False, False]&amp;#10;    &amp;#10;# for backward compatibility&amp;#10;loc_id = 0&amp;#10;&amp;#10;for i in range(2):&amp;#10;    # draw the stimulus&amp;#10;    ori = stims_selected[i]&amp;#10;    stim_loc = [display_xs[i], display_ys[loc_id]]&amp;#10;    stim_obj = funcDrawStim(win, ori, stim_loc, display_r)&amp;#10;    objs_display.append(stim_obj)&amp;#10;    stim_title = FeedbackText(&amp;#10;        win, f'stimulus {i+1}', &amp;#10;        [stim_loc[0], title_ys[loc_id]], display_r)&amp;#10;    objs_display.append(stim_title)&amp;#10;    &amp;#10;    # draw the cue&amp;#10;    report_cue = SingleCueObject(&amp;#10;        win, stim_loc, cue_codes[i], display_r, color_codes[i])&amp;#10;    objs_display.append(report_cue)&amp;#10;    &amp;#10;    # do we need to report this stimuli?&amp;#10;    to_report = to_report_code[i]&amp;#10;    if to_report:&amp;#10;        # draw the participant's response&amp;#10;        resp_loc = [display_2nd_xs[2*i], display_ys[1-loc_id]]&amp;#10;        resp_obj = None&amp;#10;        participant_resp = participant_responses[i]&amp;#10;        if response_mode == 'click':&amp;#10;            resp_obj = ClickAnswerObject(&amp;#10;                win, participant_resp, resp_loc, display_r, 0.01)&amp;#10;        elif response_mode == 'draw':&amp;#10;            resp_obj= DrawAnswerObject(&amp;#10;                win, participant_resp, False, resp_loc, display_r)&amp;#10;        objs_display.append(resp_obj)&amp;#10;        resp_title = FeedbackText(&amp;#10;            win, 'your response', &amp;#10;            [display_2nd_xs[2*i], title_ys[1-loc_id]], display_r)&amp;#10;        objs_display.append(resp_title)&amp;#10;&amp;#10;        # draw the correct response&amp;#10;        ans_loc = [display_2nd_xs[2*i+1], display_ys[1-loc_id]]&amp;#10;        ans_obj = None&amp;#10;        if response_mode == 'click':&amp;#10;            ans_obj = ClickAnswerObject(&amp;#10;                win, ori, ans_loc, display_r, 0.01)&amp;#10;        elif response_mode == 'draw':&amp;#10;            ans_obj = DrawAnswerObject(&amp;#10;                win, ori, True, ans_loc, display_r)&amp;#10;        objs_display.append(ans_obj)&amp;#10;        ans_title = FeedbackText(&amp;#10;            win, 'answer', &amp;#10;            [display_2nd_xs[2*i+1], title_ys[1-loc_id]], display_r)&amp;#10;        objs_display.append(ans_title)&amp;#10;        &amp;#10;        # draw two arrows pointingt to the response&amp;#10;        to_resp_arrow = funcDrawArrow(&amp;#10;            win, display_r, stim_loc, resp_loc)&amp;#10;        objs_display.append(to_resp_arrow)&amp;#10;        to_ans_arrow = funcDrawArrow(&amp;#10;            win, display_r, stim_loc, ans_loc)&amp;#10;        objs_display.append(to_ans_arrow)&amp;#10;    &amp;#10;    else:&amp;#10;        # put a NO there&amp;#10;        no_resp_loc = [display_xs[i], display_ys[1-loc_id]]&amp;#10;        no_resp_obj = FeedbackText(&amp;#10;            win, 'no response required', &amp;#10;            [display_xs[i], display_ys[1-loc_id]], display_r)&amp;#10;        objs_display.append(no_resp_obj)&amp;#10;&amp;#10;# add the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', pos=(0.52,0.4),&amp;#10;    size=(0.25, 0.1))&amp;#10;objs_display.append(continue_button)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = practiceFeedbackMouse.getPressed()[0]&amp;#10;mouse_position = practiceFeedbackMouse.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = practiceFeedbackMouse.getPressed()[0];&amp;#10;mouse_position = practiceFeedbackMouse.getPos();&amp;#10;&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var i, _pj_c = 0, _pj_a = util.range(objs_display.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;objs_display = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;    &amp;#10;objs_display = []" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePracticeFeedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPracticeFeedbackTitle" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPracticeFeedbackTitle" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Feedback (press [continue] to continue)" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="practiceFeedbackMouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="practiceFeedbackMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="trial_loop">
      <RoutineSettingsComponent name="trial_loop" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial_loop" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="post_trial">
      <RoutineSettingsComponent name="post_trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="post_trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePostTrial" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="post_trial_time = 0;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="let trial_time_elapsed = trial_timer.getTime();&amp;#10;trial_timer = null;&amp;#10;post_trial_time = funcRandomUniform(post_trial_time_min, post_trial_time_max);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# get time elapsed&amp;#10;trial_time_elapsed = trial_timer.getTime()&amp;#10;trial_timer = None&amp;#10;&amp;#10;# set ITI&amp;#10;post_trial_time = random.uniform(&amp;#10;    post_trial_time_min, post_trial_time_max)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;ITI&quot;, post_trial_time);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="## record ITI&amp;#10;thisExp.addData('ITI', post_trial_time)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePostTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPostTrial" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPostTrial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="post_trial_time" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="elRecord_iti" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;itiStart&quot;, aaa().toString());&amp;#10;this_epoch = &quot;ITI&quot;;&amp;#10;if ((eyetracking === 1)) {&amp;#10;    el_tracker.sendMessage(&quot;ITI&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData('itiStart',str(aaa()))&amp;#10;this_epoch = 'ITI'&amp;#10;&amp;#10;if eyetracking == 1:&amp;#10;    el_tracker.sendMessage('ITI')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;itiEnd&quot;, aaa().toString());&amp;#10;if ((eyetracking === 1)) {&amp;#10;    el_tracker.sendMessage(&quot;trialEnd&quot;);&amp;#10;    el_tracker.sendMessage(`!V TRIAL_VAR TRIALID ${trlId.toString()}`);&amp;#10;    el_tracker.stopRecording();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData('itiEnd',str(aaa()))&amp;#10;if eyetracking == 1:&amp;#10;   &amp;#10;    el_tracker.sendMessage('trialEnd')&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR TRIALID %s'% str(trlId))&amp;#10;    el_tracker.stopRecording()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elRecord_iti" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_feedback">
      <RoutineSettingsComponent name="block_feedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="block_feedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeBlockFeedback" plugin="None">
        <Param val="def check_block_quality(errors):&amp;#10;    ERR_THRESHOLD = 30 # 20&amp;#10;    ACC_THRESHOLD = 0.5 # 0.55&amp;#10;    MISS_THRESHOLD = 0.2 # 0.15&amp;#10;    &amp;#10;    n_total = len(errors)&amp;#10;    n_hit = 0&amp;#10;    n_miss = 0&amp;#10;    for i in range(n_total):&amp;#10;        err = errors[i]&amp;#10;        if err is None:&amp;#10;            n_miss += 1&amp;#10;        elif abs(err) &lt;= ERR_THRESHOLD:&amp;#10;            n_hit += 1&amp;#10;    pass_hit_check = (n_hit / n_total) &gt;= ACC_THRESHOLD&amp;#10;    pass_miss_check = (n_miss / n_total) &lt;= MISS_THRESHOLD&amp;#10;    return pass_hit_check and pass_miss_check&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="function check_block_quality(errors) {&amp;#10;    let ERR_THRESHOLD = 30; // 20;&amp;#10;    let ACC_THRESHOLD = 0.5; // 0.55;&amp;#10;    let MISS_THRESHOLD = 0.2; // 0.15; &amp;#10;    &amp;#10;    let n_total = errors.length;&amp;#10;    let n_hit = 0;&amp;#10;    let n_miss = 0;&amp;#10;    &amp;#10;    for (let i = 0; i &lt; n_total; i++) {&amp;#10;        let err = errors[i];&amp;#10;        if (err === null) {&amp;#10;            n_miss++;&amp;#10;        } else if (Math.abs(err) &lt;= ERR_THRESHOLD) {&amp;#10;            n_hit++;&amp;#10;        }&amp;#10;    }&amp;#10;    &amp;#10;    let pass_hit_check = (n_hit / n_total) &gt;= ACC_THRESHOLD;&amp;#10;    let pass_miss_check = (n_miss / n_total) &lt;= MISS_THRESHOLD;&amp;#10;    &amp;#10;    return pass_hit_check &amp;&amp; pass_miss_check;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# create functions for stats of errors&amp;#10;# within 10 degrees&amp;#10;# within 30 degrees&amp;#10;# no response&amp;#10;def count_errors(errors):&amp;#10;    n_datapoint = len(errors)&amp;#10;    &amp;#10;    # for empty set&amp;#10;    if n_datapoint == 0:&amp;#10;        return 0, 0, 0&amp;#10;    n_err_5 = 0&amp;#10;    n_err_10 = 0&amp;#10;    n_err_30 = 0&amp;#10;    n_err_none = 0&amp;#10;    for i in range(n_datapoint):&amp;#10;        err = errors[i]&amp;#10;        if err is None:&amp;#10;            n_err_none += 1&amp;#10;        else:&amp;#10;            abs_err = abs(err)&amp;#10;            if abs_err &lt;= 5:&amp;#10;                n_err_5 += 1&amp;#10;            if abs_err &lt;= 10:&amp;#10;                n_err_10 += 1&amp;#10;            if abs_err &lt;= 30:&amp;#10;                n_err_30 += 1&amp;#10;    return n_err_5 / n_datapoint, n_err_10 / n_datapoint, \&amp;#10;        n_err_30 / n_datapoint, n_err_none / n_datapoint&amp;#10;funcCountErrrors = count_errors&amp;#10;    &amp;#10;def create_freq_bar(freq_data, window, pos, size, color, text):&amp;#10;    bar_x = pos[0]&amp;#10;    bar_y = pos[1]&amp;#10;    bar_width = size[0]&amp;#10;    bar_height = size[1]&amp;#10;    objs = []&amp;#10;    &amp;#10;    left_bar = None&amp;#10;    if freq_data &gt; 0:&amp;#10;        left_bar_width = bar_width * freq_data&amp;#10;        left_bar_x = bar_x - (bar_width - left_bar_width) / 2&amp;#10;        left_bar = visual.Rect(window,&amp;#10;            size=(left_bar_width, bar_height),&amp;#10;            pos=(left_bar_x, bar_y),&amp;#10;            fillColor=color, lineColor='white')&amp;#10;        left_bar.setAutoDraw(True)&amp;#10;        objs.append(left_bar)&amp;#10;        &amp;#10;    # right bar&amp;#10;    right_bar = None&amp;#10;    if freq_data &lt; 1:&amp;#10;        right_bar_width = bar_width * (1 - freq_data)&amp;#10;        right_bar_x = bar_x + (bar_width - right_bar_width) / 2&amp;#10;        right_bar = visual.Rect(window,&amp;#10;            size=(right_bar_width, bar_height),&amp;#10;            pos=(right_bar_x, bar_y),&amp;#10;            fillColor='white', lineColor='white')&amp;#10;        right_bar.setAutoDraw(True)&amp;#10;        objs.append(right_bar)&amp;#10;        &amp;#10;    # add annotation&amp;#10;    text_x = -0.4&amp;#10;    text_y = bar_y&amp;#10;    annot_text = visual.TextStim(&amp;#10;        window, text, pos=(text_x, text_y),&amp;#10;        height=bar_height*0.5,&amp;#10;        color='black', colorSpace='rgb')&amp;#10;    annot_text.setAutoDraw(True)&amp;#10;    objs.append(annot_text)&amp;#10;    return objs&amp;#10;funcCreateFreqBar = create_freq_bar&amp;#10;&amp;#10;# to draw all stats&amp;#10;def plot_stats(error_stats, window):&amp;#10;    bar_x = 0.3&amp;#10;    bar_width = 0.6&amp;#10;    bar_height = 0.08&amp;#10;    feedback_display_objects = []&amp;#10;    &amp;#10;    # plot error &lt; 5&amp;#10;    freq5 = error_stats[0]&amp;#10;    freq5_y = 0.2&amp;#10;    freq5_objects = funcCreateFreqBar(&amp;#10;        freq5, window, (bar_x, freq5_y), &amp;#10;        (bar_width, bar_height), 'blue'&amp;#10;        , f&quot;Minor discrepancies: {freq5:.0%}&quot;&amp;#10;    )&amp;#10;    feedback_display_objects += freq5_objects&amp;#10;&amp;#10;    # plot error &lt; 10&amp;#10;    freq10 = error_stats[1]&amp;#10;    freq10_y = 0.05&amp;#10;    freq10_objects = funcCreateFreqBar(&amp;#10;        freq10, window, &amp;#10;        [bar_x, freq10_y], &amp;#10;        [bar_width, bar_height], 'blue'&amp;#10;        , f&quot;Errors within a moderate range: {freq10:.0%}&quot;&amp;#10;    )&amp;#10;    feedback_display_objects += freq10_objects&amp;#10;    &amp;#10;    # plot error &lt; 30&amp;#10;    freq30 = error_stats[2]&amp;#10;    freq30_y = - 0.1&amp;#10;    freq30_objects = funcCreateFreqBar(&amp;#10;        freq30, window, &amp;#10;        [bar_x, freq30_y], &amp;#10;        [bar_width, bar_height], 'blue'&amp;#10;        , f&quot;Acceptable level of error: {freq30:.0%}&quot;&amp;#10;    )&amp;#10;    feedback_display_objects += freq30_objects&amp;#10;        &amp;#10;    # plot has response&amp;#10;    freq_noresp = error_stats[3]&amp;#10;    freq_noresp_y = - 0.25&amp;#10;    freq_noresp_objects = funcCreateFreqBar(&amp;#10;        freq_noresp, window, &amp;#10;        [bar_x, freq_noresp_y], &amp;#10;        [bar_width, bar_height], 'red'&amp;#10;        , f'no response: {freq_noresp:.0%}'&amp;#10;    )&amp;#10;    feedback_display_objects += freq_noresp_objects&amp;#10;    return feedback_display_objects&amp;#10;funcPlotStats = plot_stats&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="function count_errors(errors) {&amp;#10;    var abs_err, err, n_datapoint, n_err_10, n_err_30, n_err_5, n_err_none;&amp;#10;    n_datapoint = errors.length;&amp;#10;    if ((n_datapoint === 0)) {&amp;#10;        return [0, 0, 0];&amp;#10;    }&amp;#10;    n_err_5 = 0;&amp;#10;    n_err_10 = 0;&amp;#10;    n_err_30 = 0;&amp;#10;    n_err_none = 0;&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(n_datapoint), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        err = errors[i];&amp;#10;        if ((err === null)) {&amp;#10;            n_err_none += 1;&amp;#10;        } else {&amp;#10;            abs_err = Math.abs(err);&amp;#10;            if ((abs_err &lt;= 5)) {&amp;#10;                n_err_5 += 1;&amp;#10;            }&amp;#10;            if ((abs_err &lt;= 10)) {&amp;#10;                n_err_10 += 1;&amp;#10;            }&amp;#10;            if ((abs_err &lt;= 30)) {&amp;#10;                n_err_30 += 1;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    return [(n_err_5 / n_datapoint), (n_err_10 / n_datapoint), (n_err_30 / n_datapoint), (n_err_none / n_datapoint)];&amp;#10;}&amp;#10;funcCountErrrors = count_errors;&amp;#10;&amp;#10;function create_freq_bar(freq_data, window, bar_pos, bar_size, color, text) {&amp;#10;    var annot_text, bar_height, bar_width, bar_x, bar_y, left_bar, left_bar_width, left_bar_x, objs, right_bar, right_bar_width, right_bar_x, text_x, text_y;&amp;#10;    bar_x = bar_pos[0];&amp;#10;    bar_y = bar_pos[1];&amp;#10;    bar_width = bar_size[0];&amp;#10;    bar_height = bar_size[1];&amp;#10;    objs = [];&amp;#10;    left_bar = null;&amp;#10;    if ((freq_data &gt; 0)) {&amp;#10;        left_bar_width = (bar_width * freq_data);&amp;#10;        left_bar_x = (bar_x - ((bar_width - left_bar_width) / 2));&amp;#10;        left_bar = new visual.Rect({&amp;#10;            &quot;win&quot;: window, &quot;size&quot;: [left_bar_width*2, bar_height*2],&amp;#10;            &quot;pos&quot;: [left_bar_x, bar_y], &amp;#10;            &quot;fillColor&quot;: color, &quot;lineColor&quot;: &quot;white&quot;});&amp;#10;        left_bar.setAutoDraw(true);&amp;#10;        objs.push(left_bar);&amp;#10;    }&amp;#10;    right_bar = null;&amp;#10;    if ((freq_data &lt; 1)) {&amp;#10;        right_bar_width = (bar_width * (1 - freq_data));&amp;#10;        right_bar_x = (bar_x + ((bar_width - right_bar_width) / 2));&amp;#10;        right_bar = new visual.Rect({&amp;#10;            &quot;win&quot;: window, &quot;size&quot;: [right_bar_width*2, bar_height*2], &amp;#10;            &quot;pos&quot;: [right_bar_x, bar_y], &amp;#10;            &quot;fillColor&quot;: &quot;white&quot;, &quot;lineColor&quot;: &quot;white&quot;});&amp;#10;        right_bar.setAutoDraw(true);&amp;#10;        objs.push(right_bar);&amp;#10;    }&amp;#10;    text_x = (- 0.4);&amp;#10;    text_y = bar_y;&amp;#10;    annot_text = new visual.TextStim({&amp;#10;        &quot;win&quot;: window, &quot;text&quot;: text,&amp;#10;        &quot;pos&quot;: [text_x, text_y], &quot;height&quot;: (bar_height * 0.5), &amp;#10;        &quot;color&quot;: &quot;black&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;});&amp;#10;    annot_text.setAutoDraw(true);&amp;#10;    objs.push(annot_text);&amp;#10;    return objs;&amp;#10;}&amp;#10;funcCreateFreqBar = create_freq_bar;&amp;#10;function plot_stats(error_stats, window) {&amp;#10;    var bar_height, bar_width, bar_x, feedback_display_objects, freq10, freq10_objects, freq10_y, freq30, freq30_objects, freq30_y, freq5, freq5_objects, freq5_y, freq_noresp, freq_noresp_objects, freq_noresp_y, title_text;&amp;#10;    bar_x = 0.3;&amp;#10;    bar_width = 0.6;&amp;#10;    bar_height = 0.08;&amp;#10;    feedback_display_objects = [];&amp;#10;    &amp;#10;    // plot error &lt; 5&amp;#10;    freq5 = error_stats[0];&amp;#10;    freq5_y = 0.2;&amp;#10;    freq5_objects = funcCreateFreqBar(&amp;#10;        freq5, window, [bar_x, freq5_y], [bar_width, bar_height], &quot;blue&quot;, &amp;#10;        &quot;Minor discrepancies: &quot;+ Math.round(freq5 * 100) + &quot;%&quot;);&amp;#10;    feedback_display_objects = feedback_display_objects.concat(freq5_objects);&amp;#10;    freq10 = error_stats[1];&amp;#10;    &amp;#10;    // plot error &lt; 10&amp;#10;    freq10_y = 0.05;&amp;#10;    freq10_objects = funcCreateFreqBar(&amp;#10;        freq10, window, [bar_x, freq10_y], [bar_width, bar_height], &quot;blue&quot;, &amp;#10;        &quot;Errors within a moderate range: &quot;+ Math.round(freq10 * 100) + &quot;%&quot;);&amp;#10;    feedback_display_objects = feedback_display_objects.concat(freq10_objects);&amp;#10;    &amp;#10;    // plot error &lt; 30&amp;#10;    freq30 = error_stats[2];&amp;#10;    freq30_y = -0.1;&amp;#10;    freq30_objects = funcCreateFreqBar(&amp;#10;        freq30, window, [bar_x, freq30_y], [bar_width, bar_height], &quot;blue&quot;, &amp;#10;        &quot;Acceptable level of error: &quot;+ Math.round(freq30 * 100) + &quot;%&quot;);&amp;#10;    feedback_display_objects = feedback_display_objects.concat(freq30_objects);&amp;#10;    &amp;#10;    // plot has response&amp;#10;    freq_noresp = error_stats[3];&amp;#10;    freq_noresp_y = -0.25;&amp;#10;    freq_noresp_objects = funcCreateFreqBar(&amp;#10;        freq_noresp, window, [bar_x, freq_noresp_y], [bar_width, bar_height], &quot;red&quot;,&amp;#10;        &quot;no response: &quot;+ Math.round(freq_noresp * 100)+ &quot;%&quot;);&amp;#10;    feedback_display_objects = feedback_display_objects.concat(freq_noresp_objects);&amp;#10;    return feedback_display_objects;&amp;#10;}&amp;#10;funcPlotStats = plot_stats;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// shwo the cursor&amp;#10;psychoJS.window.mouseVisible = true;&amp;#10;&amp;#10;block_error_stats = funcCountErrrors(block_error_records);&amp;#10;display_objects = funcPlotStats(block_error_stats, psychoJS.window);&amp;#10;&amp;#10;// flag&amp;#10;to_terminate_stage = false;&amp;#10;&amp;#10;// add the buttons&amp;#10;continue_button = null;&amp;#10;repeat_button = null;&amp;#10;has_passed_qc = false;&amp;#10;&amp;#10;if (has_finished_instruction &amp;&amp; !has_finished_rehearsal) {&amp;#10;    // still practicing&amp;#10;    has_passed_qc = check_block_quality(block_error_records);&amp;#10;    has_ever_passed_qc = has_ever_passed_qc || has_passed_qc;&amp;#10;    if (stim_sampler.block_idx &lt; block_to_run_each_stage) {&amp;#10;        // if haven't hit max trial numbers&amp;#10;        if (has_passed_qc) {&amp;#10;            // if one pass the qc, allowed to move on to real trials &amp;#10;            repeat_button = funcCreateButton(&amp;#10;                psychoJS.window, 'practice again', &amp;#10;                [-0.2, -0.42], [0.35, 0.1]);&amp;#10;            display_objects.push(repeat_button);&amp;#10;&amp;#10;            continue_button = funcCreateButton(&amp;#10;                psychoJS.window, 'continue', &amp;#10;                [0.2, -0.42], [0.35, 0.1]);&amp;#10;            display_objects.push(continue_button);&amp;#10;&amp;#10;            // set the text&amp;#10;            textBlockFeedback.setText(&amp;#10;                'Good! Press [continue] to start real trials \n' +&amp;#10;                'or [practice again] to start another practice');&amp;#10;        } else {&amp;#10;            repeat_button = funcCreateButton(&amp;#10;                psychoJS.window, 'practice again', &amp;#10;                [0, -0.42], [0.35, 0.1]);&amp;#10;            display_objects.push(repeat_button);&amp;#10;            textBlockFeedback.setText(&amp;#10;                'You need more practice before starting the real trials.\n' +&amp;#10;                'Press [practice again] to start another practice'&amp;#10;            );&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;if (repeat_button === null &amp;&amp; continue_button === null) {&amp;#10;    // other csses&amp;#10;    console.log('no problem comparing null');&amp;#10;    continue_button = funcCreateButton(&amp;#10;        psychoJS.window, 'continue', &amp;#10;        [0, -0.42], [0.35, 0.1]);&amp;#10;    display_objects.push(continue_button);&amp;#10;    textBlockFeedback.setText(&amp;#10;        'Your performance in this block.\n' +&amp;#10;        'Press [continue] to continue'&amp;#10;    );&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# show the cursor&amp;#10;win.mouseVisible = True&amp;#10;&amp;#10;block_error_stats = funcCountErrrors(block_error_records)&amp;#10;display_objects = funcPlotStats(block_error_stats, win)&amp;#10;&amp;#10;# flag&amp;#10;to_terminate_stage = False&amp;#10;&amp;#10;# add the buttons&amp;#10;continue_button = None&amp;#10;repeat_button = None&amp;#10;has_passed_qc = False&amp;#10;&amp;#10;if has_finished_instruction and not has_finished_rehearsal:&amp;#10;    # still practicing&amp;#10;    has_passed_qc = check_block_quality(block_error_records)&amp;#10;    has_ever_passed_qc = has_ever_passed_qc or has_passed_qc&amp;#10;    if block_stage.thisN &lt; block_to_run_each_stage:&amp;#10;        # if haven't hit max trial numbers&amp;#10;        if has_passed_qc:&amp;#10;            # if one pass the qc, allowed to move on to real trials &amp;#10;            repeat_button = funcCreateButton(&amp;#10;                win, 'practice again', pos=(-0.2,-0.42),&amp;#10;                size=(0.35, 0.1))&amp;#10;            display_objects.append(repeat_button)&amp;#10;            &amp;#10;            continue_button = funcCreateButton(&amp;#10;                win, 'continue', pos=(0.2,-0.42),&amp;#10;                size=(0.35, 0.1))&amp;#10;            display_objects.append(continue_button)&amp;#10;            &amp;#10;            # set the text&amp;#10;            textBlockFeedback.setText(&amp;#10;                'Good! Press [continue] to start real trials \n'+&amp;#10;                'or [practice again] to start another practice')&amp;#10;        else:&amp;#10;            repeat_button = funcCreateButton(&amp;#10;                win, 'practice again', pos=(0,-0.42),&amp;#10;                size=(0.35, 0.1))&amp;#10;            display_objects.append(repeat_button)&amp;#10;            textBlockFeedback.setText(&amp;#10;                'You need more practice before starting the real trials.\n'+&amp;#10;                'Press [practice again] to start another practice')&amp;#10;&amp;#10;if repeat_button is None and continue_button is None:&amp;#10;    # other cases&amp;#10;    continue_button = funcCreateButton(&amp;#10;        win, 'continue', pos=(0, -0.42),&amp;#10;        size=(0.35, 0.1))&amp;#10;    display_objects.append(continue_button)&amp;#10;    textBlockFeedback.setText(&amp;#10;        'Your performance in this block.\n'+&amp;#10;        'Press [continue] to continue')&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = blockFeedbackMouse.getPressed()[0]&amp;#10;mouse_position = blockFeedbackMouse.getPos()&amp;#10;&amp;#10;if left_button and (t &gt; 0.5):&amp;#10;    if repeat_button is not None:&amp;#10;        if repeat_button.contains(mouse_position):&amp;#10;            # to repeat is just to continue&amp;#10;            continueRoutine = False&amp;#10;        elif continue_button is not None:&amp;#10;            if continue_button.contains(mouse_position):&amp;#10;                # confirm stop practicing&amp;#10;                if has_finished_instruction and not has_finished_rehearsal:&amp;#10;                    to_terminate_stage = True&amp;#10;                continueRoutine = False&amp;#10;    else: # there must exist a continue button&amp;#10;        if continue_button.contains(mouse_position):&amp;#10;            # to repeat is just to continue&amp;#10;            continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="let left_button = blockFeedbackMouse.getPressed()[0];&amp;#10;let mouse_position = blockFeedbackMouse.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5)) {&amp;#10;    if (repeat_button !== null) {&amp;#10;        if (repeat_button.contains(mouse_position)) {&amp;#10;            // to repeat is just to continue&amp;#10;            continueRoutine = false;&amp;#10;        } else if (continue_button !== null) {&amp;#10;            if (continue_button.contains(mouse_position)) {&amp;#10;                // confirm stop practicing&amp;#10;                if (has_finished_instruction &amp;&amp; !has_finished_rehearsal) {&amp;#10;                    to_terminate_stage = true;&amp;#10;                }&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;    } else { // there must exist a continue button&amp;#10;        if (continue_button.contains(mouse_position)) {&amp;#10;            // to repeat is just to continue&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="let n_display_objects = display_objects.length;&amp;#10;for (var i = 0; i &lt; n_display_objects; i++) {&amp;#10;    let disp_obj = display_objects[i];&amp;#10;    disp_obj.setAutoDraw(false);&amp;#10;}&amp;#10;display_objects = [];&amp;#10;&amp;#10;if (to_terminate_stage) {&amp;#10;    block_stage.finished = true;&amp;#10;}" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# remove all objects&amp;#10;n_display_objects = len(display_objects)&amp;#10;for i in range(n_display_objects):&amp;#10;    disp_obj = display_objects[i]&amp;#10;    disp_obj.setAutoDraw(False)&amp;#10;display_objects = []&amp;#10;&amp;#10;if to_terminate_stage:&amp;#10;    block_stage.finished = True" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeBlockFeedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textBlockFeedback" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textBlockFeedback" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="blockFeedbackMouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="blockFeedbackMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="prepare_block">
      <RoutineSettingsComponent name="prepare_block" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepare_block" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareBlock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="block_instruction = ''&amp;#10;continue_button = None&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="block_instruction = '';&amp;#10;continue_button = null;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="block_instruction = ''&amp;#10;block_idx = block_stage.thisN&amp;#10;real_block_id = sub_sample_stage_loop.thisN * n_blocks_each_subtype + block_idx&amp;#10;display_block_idx = real_block_id + 1&amp;#10;&amp;#10;block_instruction = &quot;Block &quot; + str(display_block_idx) + &quot;/&quot; + str(n_blocks_each_subtask) + &quot;.\n\n&quot; &amp;#10;block_instruction += &quot;This block consists of &quot; + str(n_trials_each_block) + &quot; trials. &quot; &amp;#10;block_instruction += &quot;You can get feedback about your performance and take a short break after completing this block.\n\n&quot;&amp;#10;&amp;#10;# initialize sampler&amp;#10;stim_sampler.initialize_block()&amp;#10;    &amp;#10;# set the text&amp;#10;textPrepareBlock.setText(block_instruction)&amp;#10;&amp;#10;# add the button to continue&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])&amp;#10;&amp;#10;# keep track of errors&amp;#10;block_error_records = []&amp;#10;&amp;#10;# block id for eye tracker&amp;#10;EYETRACK_real_block_id = EYETRACK_real_stage_id * n_blocks_each_subtype + block_idx&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mousePrepareBlock.getPressed()[0]&amp;#10;mouse_position = mousePrepareBlock.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mousePrepareBlock.getPressed()[0];&amp;#10;mouse_position = mousePrepareBlock.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;&amp;#10;&amp;#10;// hide the cursor&amp;#10;psychoJS.window.mouseVisible = false;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None&amp;#10;&amp;#10;# hide the cursor&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPrepareBlock" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPrepareBlock" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mousePrepareBlock" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePrepareBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="setUpPracticeExplain">
      <RoutineSettingsComponent name="setUpPracticeExplain" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="setUpPracticeExplain" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeSetupExplain" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="instruction_text_to_display_list = [&amp;#10;        'Trials with a delay and an informatic cue',&amp;#10;        'Trials with a delay but no informatic cue',&amp;#10;        'Trials without delay',&amp;#10;        'Trials with a delay and an implicit cue'&amp;#10;]" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="instruction_text_to_display_list = [&amp;#10;    &quot;Trials with a delay and an informatic cue&quot;, &amp;#10;    &quot;Trials with a delay but no informatic cue&quot;, &amp;#10;    &quot;Trials without delay&quot;, &amp;#10;    &quot;Trials with a delay and an implicit cue&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_to_display = &quot;&quot;;&amp;#10;if (has_finished_instruction) {&amp;#10;    instruction_text_to_display = instruction_text_to_display_list[trial_type];&amp;#10;    instruction_text_to_display += &quot; (&quot; + response_mode + &quot;ing mode)&quot;;&amp;#10;} else {&amp;#10;    instruction_text_to_display = &quot;The workflow of the trials is as follows.&quot;;&amp;#10;    instruction_text_to_display += &quot;In these trials, you need to &quot; + response_mode + &quot; to report your answer.&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_to_display = ''&amp;#10;if has_finished_instruction:&amp;#10;    # during practice&amp;#10;    instruction_text_to_display = instruction_text_to_display_list[trial_type]&amp;#10;    instruction_text_to_display += ' (' + response_mode + 'ing mode)'&amp;#10;else:&amp;#10;    # during instruction&amp;#10;    instruction_text_to_display = 'The workflow of the trials is as follows. \n'&amp;#10;    instruction_text_to_display += 'In these trials, you need to ' + response_mode + ' to report your answer'&amp;#10;    " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeSetupExplain" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceExplain">
      <RoutineSettingsComponent name="practiceExplain" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="practiceExplain" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePracticeExplain" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, &quot;continue&quot;,&amp;#10;    [0, (- 0.4)], [0.25, 0.1]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mousePracticeExplain.getPressed()[0]&amp;#10;mouse_position = mousePracticeExplain.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mousePracticeExplain.getPressed()[0];&amp;#10;mouse_position = mousePracticeExplain.getPos();&amp;#10;if (((left_button &amp;&amp; (t &gt; 0.5)) &amp;&amp; continue_button.contains(mouse_position))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePracticeExplain" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPracticeExplain" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPracticeExplain" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$instruction_text_to_display" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mousePracticeExplain" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePracticeExplain" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="imgPracticeExplain" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$'resources/trial_type_' + str(trial_type) + '_' + response_mode + '.png'" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imgPracticeExplain" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.12, 0.63)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
    </Routine>
    <Routine name="prepareModePhase">
      <RoutineSettingsComponent name="prepareModePhase" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareModePhase" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="prepareTaskPhase">
      <RoutineSettingsComponent name="prepareTaskPhase" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareTaskPhase" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareTaskPhase" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# set the trial to run&amp;#10;has_finished_instruction = True # old-ver compatible&amp;#10;has_finished_rehearsal = True # old-ver compatible&amp;#10;&amp;#10;# trial_type already defined&amp;#10;# response mode need to be updated&amp;#10;response_mode = mode_type_list[ActualTaskLoop.thisN]&amp;#10;&amp;#10;# check sampling methods&amp;#10;# the order of sampling strategies&amp;#10;sampling_type_list = random.sample(sampling_strategies_allowed, n_sampling_strategies_allowed)&amp;#10;stim_sampler = StimSamplingScheduler(n_ori_regions, sampling_type_list)&amp;#10;&amp;#10;# create the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])&amp;#10;    &amp;#10;# record phase id for eyetracker&amp;#10;EYETRACK_task_mode_phase_id = TasktypeLoop.thisN * n_response_modes_allowed + ActualTaskLoop.thisN&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mousePrepareTaskPhase.getPressed()[0]&amp;#10;mouse_position = mousePrepareTaskPhase.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareTaskPhase" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mousePrepareTaskPhase" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePrepareTaskPhase" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="textPrepareTaskPhase" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPrepareTaskPhase" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'Now the following are ACTUAL trials,\n where you need to ' + response_mode + ' to report your answer.\n For this part, you need to complete ' + str(n_blocks_each_subtask) + ' blocks,\n each consists of ' + str(n_trials_each_block) + ' trials.'   " valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="prepareSubPhase">
      <RoutineSettingsComponent name="prepareSubPhase" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareSubPhase" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareSubPhase" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// check which stage we are at (training or testing?)&amp;#10;has_finished_rehearsal = has_finished_rehearsal_stages[sub_phase_loop.thisN];&amp;#10;has_finished_instruction = has_finished_instruction_stages[sub_phase_loop.thisN];&amp;#10;&amp;#10;// other params&amp;#10;trials_to_run_each_block = n_trials_each_block;&amp;#10;block_to_run_each_stage = n_blocks_each_subtype;&amp;#10;stage_to_run_this_task = n_stages_each_task;&amp;#10;stage_strategies = ['orthogonal'];&amp;#10;// generate list of trial types and report code within block&amp;#10;if (!has_finished_instruction) {&amp;#10;    // during instruction: fixed order&amp;#10;    trials_to_run_each_block = 3;&amp;#10;    block_to_run_each_stage = 1;&amp;#10;    stage_to_run_this_task = 1;&amp;#10;} else if (!has_finished_rehearsal) {&amp;#10;    trials_to_run_each_block = 3;&amp;#10;    block_to_run_each_stage = 6;&amp;#10;    stage_to_run_this_task = 1;&amp;#10;} else {&amp;#10;    stage_strategies = phase_sampling_strategies;&amp;#10;}&amp;#10;&amp;#10;// initialize sampler&amp;#10;stim_sampler = new StimSamplingScheduler(&amp;#10;    n_ori_regions, stage_strategies);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# check which stage we are at (training or testing?)&amp;#10;has_finished_rehearsal = has_finished_rehearsal_stages[&amp;#10;    sub_phase_loop.thisN]&amp;#10;has_finished_instruction = has_finished_instruction_stages[&amp;#10;    sub_phase_loop.thisN]&amp;#10;    &amp;#10;# other params&amp;#10;trials_to_run_each_block = n_trials_each_block&amp;#10;block_to_run_each_stage = n_blocks_each_subtype&amp;#10;stage_to_run_this_task = n_stages_each_task&amp;#10;stage_strategies = ['orthogonal']&amp;#10;# generate list of trial types and report code within block&amp;#10;if not has_finished_instruction:&amp;#10;    # during instruction: fixed order&amp;#10;    trials_to_run_each_block = 3&amp;#10;    block_to_run_each_stage = 1&amp;#10;    stage_to_run_this_task = 1&amp;#10;elif not has_finished_rehearsal:&amp;#10;    trials_to_run_each_block = 3&amp;#10;    block_to_run_each_stage = 6&amp;#10;    stage_to_run_this_task = 1&amp;#10;else:&amp;#10;    stage_strategies = phase_sampling_strategies&amp;#10;    &amp;#10;# initialize sampler&amp;#10;stim_sampler = StimSamplingScheduler(&amp;#10;    n_ori_regions, stage_strategies)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareSubPhase" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prepareSubSampleStage">
      <RoutineSettingsComponent name="prepareSubSampleStage" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareSubSampleStage" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareSubSampleStage" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="stim_sampler.initialize_stage()&amp;#10;&amp;#10;# for eye tracker&amp;#10;EYETRACK_real_stage_id = EYETRACK_task_mode_phase_id * n_sampling_strategies_allowed + sub_sample_stage_loop.thisN&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareSubSampleStage" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="betweenPracticeReal">
      <RoutineSettingsComponent name="betweenPracticeReal" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="betweenPracticeReal" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeAfterPractice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="go_back_button = null;&amp;#10;continue_button = null;&amp;#10;text_to_display = '';&amp;#10;to_terminate_task = false;&amp;#10;&amp;#10;if (has_finished_instruction &amp;&amp; !has_finished_rehearsal) {&amp;#10;    // We just finished practicing!&amp;#10;    // See if we have ever passed the QC&amp;#10;    if (has_ever_passed_qc) {&amp;#10;        // If passed, move on to the next stage&amp;#10;        text_to_display = 'Now we will move on to the next type of trials. \n' +&amp;#10;            'Press [continue] when you are ready.';&amp;#10;    } else {&amp;#10;        // Otherwise, terminate the whole experiment&amp;#10;        text_to_display = 'Unfortunately, you failed the training phase.\n' +&amp;#10;            'Please contact the experimenter for further assistance.';&amp;#10;        to_terminate_task = true;&amp;#10;    }&amp;#10;} else {&amp;#10;    // Haven't started practicing yet&amp;#10;    has_finished_instruction = true;&amp;#10;    text_to_display = 'Now we will move on to practice trials. \n' +&amp;#10;        'Press [continue] when you are ready.';&amp;#10;}&amp;#10;&amp;#10;// Set the text to display&amp;#10;textAfterPractice.setText(text_to_display);&amp;#10;continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="go_back_button = None&amp;#10;continue_button = None&amp;#10;text_to_display = ''&amp;#10;to_terminate_task = False&amp;#10;&amp;#10;if has_finished_instruction and not has_finished_rehearsal:&amp;#10;    # we just finished practicing!&amp;#10;    # see if we have ever passed the qc&amp;#10;    if has_ever_passed_qc:&amp;#10;        # is passed, move on to next stage&amp;#10;        text_to_display = 'Now we will move on to the next type of trials \n' +\&amp;#10;            'Press [continue] when you are ready.'&amp;#10;    else:&amp;#10;        # otherwise terminate the whole experiment&amp;#10;        text_to_display = 'Unfortunately you fail the training phase.\n' +\&amp;#10;            'We will skip this task at this point.'+\&amp;#10;            'You may contact the experimenter for further assistance.'&amp;#10;        to_terminate_task = True&amp;#10;else:&amp;#10;    # haven't started practicing yet&amp;#10;    text_to_display = 'Now we will move on to practice trials. \n' +\&amp;#10;        'Press [continue] when you are ready.'&amp;#10;&amp;#10;# set the text to display&amp;#10;textAfterPractice.setText(text_to_display)&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseAfterPractice.getPressed()[0]&amp;#10;mouse_position = mouseAfterPractice.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;    &amp;#10;# stop working on this task&amp;#10;# if people fail the training&amp;#10;if to_terminate_task:&amp;#10;    sub_sample_stage_loop.finished = True&amp;#10;    sub_phase_loop.finished = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseAfterPractice.getPressed()[0];&amp;#10;mouse_position = mouseAfterPractice.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;&amp;#10;// Stop working on this task &amp;#10;// if people fail the training&amp;#10;if (to_terminate_task) {&amp;#10;    sub_sample_stage_loop.finished = true;&amp;#10;    sub_phase_loop.finished = true;&amp;#10;}&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeAfterPractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textAfterPractice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textAfterPractice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Now we will move on to the actual trials.&amp;#10;Press [continue] when you are ready." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseAfterPractice" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseAfterPractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="taskInstructionQuiz">
      <RoutineSettingsComponent name="taskInstructionQuiz" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskInstructionQuiz" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskInstructionQuiz" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="quiz_obj = new quizManagementObj();&amp;#10;if (trial_type === 3) {&amp;#10;    quiz_obj.initiate_quiz(&amp;#10;        psychoJS.window, &quot;cue&quot;, &amp;#10;        {&quot;stim_sampler&quot;: stim_sampler,&amp;#10;         &quot;cue_type&quot;: &quot;implicit&quot;,&amp;#10;         &quot;n_all_regions&quot;: n_ori_regions});&amp;#10;} else if (trial_type === 0) {&amp;#10;    quiz_obj.initiate_quiz(&amp;#10;        psychoJS.window, &quot;cue&quot;, &amp;#10;        {&quot;stim_sampler&quot;: stim_sampler,&amp;#10;         &quot;cue_type&quot;: &quot;explicit&quot;});&amp;#10;} else {}&amp;#10;has_revealed_answer = false;&amp;#10;offset_t = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="quiz_obj = quizManagementObj()&amp;#10;if trial_type == 3:&amp;#10;    quiz_obj.initiate_quiz(&amp;#10;        win, 'cue', &amp;#10;        {'stim_sampler': quiz_sampler,&amp;#10;         'cue_type': 'implicit',&amp;#10;         'n_all_regions': n_ori_regions})&amp;#10;elif trial_type == 0:&amp;#10;    quiz_obj.initiate_quiz(&amp;#10;        win, 'cue', &amp;#10;        {'stim_sampler': stim_sampler,&amp;#10;         'cue_type': 'explicit'})&amp;#10;has_revealed_answer = False&amp;#10;offset_t = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseTaskInstructionQuiz.getPressed()[0]&amp;#10;mouse_pos = mouseTaskInstructionQuiz.getPos()&amp;#10;&amp;#10;# update selection&amp;#10;if left_button and (t &gt; 0.5 + offset_t):&amp;#10;    offset_t = t&amp;#10;    # logging.warning('LOGGING: left button clicked')&amp;#10;    if has_revealed_answer:&amp;#10;        # check if we should continue&amp;#10;        if quiz_obj.continue_button.contains(mouse_pos):&amp;#10;            continueRoutine = False&amp;#10;            # logging.warning('LOGGING: continue')&amp;#10;    else:&amp;#10;        # update selection&amp;#10;        has_new_select = quiz_obj.choices.check_click(mouse_pos)&amp;#10;        if has_new_select:&amp;#10;            # logging.warning('LOGGING: new selected')&amp;#10;            pass&amp;#10;        # check if people want to submit&amp;#10;        if quiz_obj.continue_button.contains(mouse_pos):&amp;#10;            # logging.warning('LOGGING: want to submit')&amp;#10;            have_selection = quiz_obj.collect_quiz_answer()&amp;#10;            if have_selection:&amp;#10;                # if has valid answer, update it&amp;#10;                quiz_obj.create_quiz_feedback_obj(win)&amp;#10;                has_revealed_answer = True&amp;#10;        else:&amp;#10;            # logging.warning('LOGGING: no submit button clicked')&amp;#10;            pass&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseResponseInstructionQuiz.getPressed()[0];&amp;#10;mouse_pos = mouseResponseInstructionQuiz.getPos();&amp;#10;&amp;#10;// update selection&amp;#10;if ((left_button &amp;&amp; (t &gt; (0.5 + offset_t)))) {&amp;#10;    offset_t = t;&amp;#10;    console.log(&quot;LOGGING: left button clicked&quot;);&amp;#10;    if (has_revealed_answer) {&amp;#10;        // check if we should continue&amp;#10;        if (quiz_obj.continue_button.contains(mouse_pos)) {&amp;#10;            continueRoutine = false;&amp;#10;            console.log(&quot;LOGGING: continue&quot;);&amp;#10;        }&amp;#10;    } else {&amp;#10;        // update selection&amp;#10;        let has_new_select = quiz_obj.choices.check_click(mouse_pos);&amp;#10;        if (has_new_select) {&amp;#10;            console.log(&quot;LOGGING: new selected&quot;);&amp;#10;        }&amp;#10;        // check if people want to submit&amp;#10;        if (quiz_obj.continue_button.contains(mouse_pos)) {&amp;#10;            console.log(&quot;LOGGING: want to submit&quot;);&amp;#10;            let has_selection = quiz_obj.collect_quiz_answer();&amp;#10;            if (has_selection) {&amp;#10;                // if has valid answer update it&amp;#10;                quiz_obj.create_quiz_feedback_obj(psychoJS.window);&amp;#10;                has_revealed_answer = true;&amp;#10;            }&amp;#10;        } else {&amp;#10;            console.log(&quot;LOGGING: no submit button clicked&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// collect result&amp;#10;let get_quiz_correct = (quiz_obj.correct_answer === quiz_obj.people_answer);&amp;#10;psychoJS.experiment.addData(&quot;task_instruction_quiz&quot;, get_quiz_correct);&amp;#10;psychoJS.experiment.addData(&quot;mode&quot;, response_mode);&amp;#10;psychoJS.experiment.addData(&quot;trial_code&quot;, trial_type);&amp;#10;&amp;#10;quiz_obj.setAutoDraw(false);&amp;#10;quiz_obj = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# collect result&amp;#10;get_quiz_correct = quiz_obj.correct_answer == quiz_obj.people_answer&amp;#10;thisExp.addData(f'task_instruction_quiz', get_quiz_correct)&amp;#10;thisExp.addData('mode', response_mode)&amp;#10;thisExp.addData('trial_code', trial_type)&amp;#10;&amp;#10;quiz_obj.setAutoDraw(False)&amp;#10;quiz_obj = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskInstructionQuiz" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseTaskInstructionQuiz" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseTaskInstructionQuiz" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="delayAfterStim">
      <RoutineSettingsComponent name="delayAfterStim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="delayAfterStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <MouseComponent name="mousePostStim" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePostStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="delay_post_stim" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <CodeComponent name="codeDelayAfterStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;has_noise_patch_displaying = false;&amp;#10;// decide whether to display noise patch&amp;#10;to_display_noise_patch = Math.random() &lt; noise_patch_display_chance;&amp;#10;if (to_display_noise_patch) {&amp;#10;    let loc = stim_locs[seq_display_loop.thisN];&amp;#10;    stim_obj = new NoisePatch(psychoJS.window, loc, patch_radius);&amp;#10;    objs_display.push(stim_obj);&amp;#10;    has_noise_patch_displaying = true;&amp;#10;}&amp;#10;&amp;#10;// record mouse&amp;#10;post_display_mouse_xs = [];&amp;#10;post_display_mouse_ys = [];" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;has_noise_patch_displaying = False&amp;#10;# decide whether to display noise patch&amp;#10;to_display_noise_patch =  random.random() &lt; noise_patch_display_chance&amp;#10;if to_display_noise_patch:&amp;#10;    loc = stim_locs[seq_display_loop.thisN]&amp;#10;    stim_obj = NoisePatch(win, loc, patch_radius)&amp;#10;    objs_display.append(stim_obj)&amp;#10;    has_noise_patch_displaying = True&amp;#10;&amp;#10;# record mouse&amp;#10;post_display_mouse_xs = []&amp;#10;post_display_mouse_ys = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# end routine when time up&amp;#10;if t &gt; delay_post_stim:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;# stop displaying all noise patches&amp;#10;if has_noise_patch_displaying:&amp;#10;    if t &gt; noise_patch_display_time:&amp;#10;        for i in range(len(objs_display)):&amp;#10;            display_obj = objs_display[i]&amp;#10;            display_obj.setAutoDraw(False)&amp;#10;        has_noise_patch_displaying = False&amp;#10;        &amp;#10;        # display the fixation&amp;#10;        # objs_display = []&amp;#10;        # fixation = DefaultFixation(win)&amp;#10;        # objs_display.append(fixation)&amp;#10;&amp;#10;# monitor mouse behavior&amp;#10;mouse_position = mousePostStim.getPos()&amp;#10;post_display_mouse_xs.append(mouse_position[0])&amp;#10;post_display_mouse_ys.append(mouse_position[1])" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// end routine when time up&amp;#10;if (t &gt; delay_post_stim) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;&amp;#10;// stop displaying all noise patches&amp;#10;if (has_noise_patch_displaying) {&amp;#10;    if (t &gt; noise_patch_display_time) {&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(objs_display.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            let display_obj = objs_display[i];&amp;#10;            display_obj.setAutoDraw(false);&amp;#10;        }&amp;#10;        has_noise_patch_displaying = false;&amp;#10;    &amp;#10;        // display the fixation&amp;#10;        // objs_display = [];&amp;#10;        // let fixation = new DefaultFixation(psychoJS.window);&amp;#10;        // objs_display.push(fixation);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// monitor mouse behavior&amp;#10;mouse_position = mousePostStim.getPos();&amp;#10;post_display_mouse_xs.push(mouse_position[0]);&amp;#10;post_display_mouse_ys.push(mouse_position[1]);" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// record mouse position&amp;#10;psychoJS.experiment.addData(`mousePostStim.x_${seq_display_loop.thisN+1}`, post_display_mouse_xs);&amp;#10;psychoJS.experiment.addData(`mousePostStim.y_${seq_display_loop.thisN+1}`, post_display_mouse_ys);&amp;#10;&amp;#10;// clear all objects&amp;#10;for (var i = 0; i &lt; objs_display.length; i++) {&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;&amp;#10;objs_display = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# record mouse position&amp;#10;thisExp.addData(f'mousePostStim.x_{seq_display_loop.thisN+1}', post_display_mouse_xs)&amp;#10;thisExp.addData(f'mousePostStim.y_{seq_display_loop.thisN+1}', post_display_mouse_ys)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDelayAfterStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textDelayAfterStim" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textDelayAfterStim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="delay_post_stim" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="elRecord_maskShortDelay" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="this_epoch = &quot;pretrial&quot;;&amp;#10;aaa = core.monotonicClock.getTime;&amp;#10;psychoJS.experiment.addData(&quot;fixation_rest_start&quot;, aaa().toString());&amp;#10;el_tracker.startRecording(1, 1, 1, 1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="this_epoch = 'maskShortDelay'+str(seq_display_loop.thisN)&amp;#10;&amp;#10;aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'Start',str(aaa()))&amp;#10;&amp;#10;if eyetracking == 1:&amp;#10;    #el_tracker.startRecording(1, 1, 1, 1)&amp;#10;    el_tracker.sendMessage(this_epoch)&amp;#10;&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="aaa = core.monotonicClock.getTime&amp;#10;thisExp.addData(this_epoch+'End',str(aaa()))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elRecord_maskShortDelay" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="color_mapping_rules">
      <RoutineSettingsComponent name="color_mapping_rules" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="color_mapping_rules" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeColorInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseColorInstruction.getPressed()[0]&amp;#10;mouse_position = mouseColorInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseColorInstruction.getPressed()[0];&amp;#10;mouse_position = mouseColorInstruction.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeColorInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="imageColorInstruction" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="resources/rule_color_independent.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imageColorInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.34, 0.75)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <MouseComponent name="mouseColorInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseColorInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="practiceFreeDrawing">
      <RoutineSettingsComponent name="practiceFreeDrawing" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="practiceFreeDrawing" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="textPracticeFreeDraw" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPracticeFreeDraw" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Let’s first get familiar with the tablet and pen...&amp;#10;(press [space] to continue)" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <BrushComponent name="brushPractice" plugin="None">
        <Param val="True" valType="bool" updates="constant" name="buttonRequired"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0,0,0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1.5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="brushPractice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </BrushComponent>
      <KeyboardComponent name="keyPracticeFreeDraw" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyPracticeFreeDraw" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="startModeInstr">
      <RoutineSettingsComponent name="startModeInstr" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="startModeInstr" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeStartModeInstr" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseStartModeInstr.getPressed()[0]&amp;#10;mouse_position = mouseStartModeInstr.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseStartModeInstr.getPressed()[0];&amp;#10;mouse_position = mouseStartModeInstr.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeStartModeInstr" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textStartModeInstr" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textStartModeInstr" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'To report an orientation, you will either draw a line or adjust the position of a dot on a wheel. (More details will follow.)'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.2" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseStartModeInstr" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseStartModeInstr" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="displayOneStim">
      <RoutineSettingsComponent name="displayOneStim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="displayOneStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeDisplayOneStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;resp_obj = null;&amp;#10;&amp;#10;// fetch the id of the stimulus&amp;#10;let i = practiceOneStim.thisN;&amp;#10;&amp;#10;// now display the stimulus&amp;#10;let ori = practice_stims[i];&amp;#10;let loc = [-0.25, 0];&amp;#10;let stim_obj = funcDrawStim(psychoJS.window, ori, loc, patch_radius);&amp;#10;objs_display.push(stim_obj);&amp;#10;&amp;#10;// now display the response&amp;#10;loc = [0.25, 0];&amp;#10;if (instruction_mode === 'click') {&amp;#10;    resp_obj = funcDrawAdjustResponse(&amp;#10;        psychoJS.window, loc, patch_radius, click_radius, true);&amp;#10;} else if (instruction_mode === 'draw') {&amp;#10;    resp_obj = funcDrawDrawResponse(&amp;#10;        psychoJS.window, loc, patch_radius, true);&amp;#10;} else {&amp;#10;    throw new Error(`Unknown response mode: ${instruction_mode}`);&amp;#10;}&amp;#10;objs_display.push(resp_obj);&amp;#10;&amp;#10;// to add the confirm button&amp;#10;continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);&amp;#10;objs_display.push(continue_button);&amp;#10;    &amp;#10;// to detect whether a pressed has released&amp;#10;has_released = true;&amp;#10;&amp;#10;// record mouse&amp;#10;display_mouse_xs = [];&amp;#10;display_mouse_ys = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;resp_obj = None&amp;#10;&amp;#10;# fetch the id of the stimulus&amp;#10;i = practiceOneStim.thisN&amp;#10;&amp;#10;# now display the stimulus&amp;#10;ori = practice_stims[i]&amp;#10;loc = [-0.25, 0]&amp;#10;stim_obj = funcDrawStim(win, ori, loc, patch_radius)&amp;#10;objs_display.append(stim_obj)&amp;#10;&amp;#10;# now display the response&amp;#10;loc = [0.25, 0]&amp;#10;if instruction_mode == 'click':&amp;#10;    resp_obj = funcDrawAdjustResponse(&amp;#10;        win, loc, patch_radius, click_radius, True)&amp;#10;elif instruction_mode == 'draw':&amp;#10;    resp_obj = funcDrawDrawResponse(&amp;#10;        win, loc, patch_radius, True)&amp;#10;else:&amp;#10;    raise NotImplementedError(f'Unknown response mode: {instruction_mode}')&amp;#10;objs_display.append(resp_obj)&amp;#10;&amp;#10;# to add the confirm button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])&amp;#10;objs_display.append(continue_button)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True&amp;#10;&amp;#10;# record mouse&amp;#10;display_mouse_xs = []&amp;#10;display_mouse_ys = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# read mouse click&amp;#10;# if there are objects clicked&amp;#10;left_button = mouseOneStim.getPressed()[0]&amp;#10;mouse_position = mouseOneStim.getPos()&amp;#10;mouse_time = mouseOneStim.mouseClock.getTime()&amp;#10;if left_button:&amp;#10;    if continue_button.contains(mouse_position):&amp;#10;        # first check if it's over the continue button&amp;#10;        no_pending = resp_obj.ever_have_response&amp;#10;        if no_pending:&amp;#10;            continueRoutine = False&amp;#10;    else:&amp;#10;        if instruction_mode == 'click':&amp;#10;            # only register the first click&amp;#10;            if has_released:&amp;#10;                has_released = False&amp;#10;                resp_obj.register_click(mouse_position, mouse_time)&amp;#10;        elif instruction_mode == 'draw':&amp;#10;            # register all mouse movements&amp;#10;            has_released = False&amp;#10;            has_redo = resp_obj.register_mouse(&amp;#10;                mouse_position, mouse_time)&amp;#10;else:&amp;#10;    # check if we should update has_released&amp;#10;    has_released = True&amp;#10;    if instruction_mode == 'draw':&amp;#10;        resp_obj.deregister_mouse(mouse_position, mouse_time)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// read mouse click&amp;#10;let left_button = mouseOneStim.getPressed()[0];&amp;#10;let mouse_position = mouseOneStim.getPos();&amp;#10;let mouse_time = mouseOneStim.mouseClock.getTime();&amp;#10;&amp;#10;if (left_button) {&amp;#10;    if (continue_button.contains(mouse_position)) {&amp;#10;        // first check if it's over the continue button&amp;#10;        let no_pending = resp_obj.ever_have_response;&amp;#10;        if (no_pending) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    } else {&amp;#10;        if (instruction_mode === 'click') {&amp;#10;            // only register the first click&amp;#10;            if (has_released) {&amp;#10;                has_released = false;&amp;#10;                resp_obj.register_click(mouse_position, mouse_time);&amp;#10;            }&amp;#10;        } else if (instruction_mode === 'draw') {&amp;#10;            // register all mouse movements&amp;#10;            has_released = false;&amp;#10;            let has_redo = resp_obj.register_mouse(mouse_position, mouse_time);&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    // check if we should update has_released&amp;#10;    has_released = true;&amp;#10;    if (instruction_mode === 'draw') {&amp;#10;        resp_obj.deregister_mouse(mouse_position, mouse_time);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// reset click recording&amp;#10;has_released = true;&amp;#10;&amp;#10;// save unsaved&amp;#10;if (instruction_mode === 'draw') {&amp;#10;    // save the stroke&amp;#10;    if (resp_obj.has_unsaved_stroke) {&amp;#10;        resp_obj.save_stroke();&amp;#10;    }&amp;#10;    // saving drawings (if there are unsaved)&amp;#10;    if (resp_obj.has_unsaved_drawing) {&amp;#10;        resp_obj.save_drawing();&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// record the practice response for later use&amp;#10;last_practice_response = resp_obj.compute_response();&amp;#10;if (instruction_mode === 'draw' &amp;&amp; last_practice_response !== null) {&amp;#10;    // for drawing: just copy everything from last drawing&amp;#10;    let original_drawing = [&amp;#10;        resp_obj.all_drawings_x.slice(-1)[0],&amp;#10;        resp_obj.all_drawings_y.slice(-1)[0]&amp;#10;    ];&amp;#10;    last_practice_response = original_drawing;&amp;#10;}&amp;#10;&amp;#10;// clear all objects&amp;#10;for (let i = 0; i &lt; objs_display.length; i++) {&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;&amp;#10;objs_display = [];&amp;#10;response_obj = null;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;# save unsaved&amp;#10;if instruction_mode == 'draw':&amp;#10;    # save the stroke&amp;#10;    if resp_obj.has_unsaved_stroke:&amp;#10;        resp_obj.save_stroke()&amp;#10;    # saving drawings (if there are unsaved)&amp;#10;    if resp_obj.has_unsaved_drawing:&amp;#10;        resp_obj.save_drawing()&amp;#10;&amp;#10;# record the practice response for later use&amp;#10;last_practice_response = resp_obj.compute_response()&amp;#10;if (instruction_mode == 'draw') and (last_practice_response is not None):&amp;#10;    # for drawing: just copy everything from last drawing&amp;#10;    original_drawing = (&amp;#10;        resp_obj.all_drawings_x[-1],&amp;#10;        resp_obj.all_drawings_y[-1])&amp;#10;    last_practice_response = original_drawing&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;response_obj = None&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDisplayOneStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseOneStim" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseOneStim" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="textDisplayOneStim" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textDisplayOneStim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'Practice: report orientation by ' + instruction_mode + 'ing'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="prepareModePractice">
      <RoutineSettingsComponent name="prepareModePractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareModePractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareModePractice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="n_one_stim_practice = 3;&amp;#10;practice_stims = [10, 70, 130];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="n_one_stim_practice = 3&amp;#10;&amp;#10;# prepare list of stimuli&amp;#10;practice_stims = [10, 70, 130]&amp;#10;&amp;#10;# prepare timing&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareModePractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prepareTrialConfig">
      <RoutineSettingsComponent name="prepareTrialConfig" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareTrialConfig" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareTrialConfig" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# configuration for time&amp;#10;pre_trial_time = 1&amp;#10;display_time = 0.75&amp;#10;display_cue_onset_time = 0.25&amp;#10;click_response_time = 4&amp;#10;draw_response_time = 4&amp;#10;enforce_response_time_limit = False # TO TUNE&amp;#10;delay_time_min = 2.5&amp;#10;delay_time_max = 8.5&amp;#10;post_trial_time_min = 1&amp;#10;post_trial_time_max = 3&amp;#10;&amp;#10;# set delay after one stim&amp;#10;delay_post_stim = 1.5&amp;#10;&amp;#10;# configurations for display&amp;#10;patch_radius = 0.16&amp;#10;click_radius = 0.01&amp;#10;wheel_width = 5&amp;#10;button_width = 0.1&amp;#10;button_height = 0.05&amp;#10;&amp;#10;# params control noise patch&amp;#10;noise_patch_display_time = 0.5&amp;#10;noise_patch_display_chance = 1.0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// configuration for time&amp;#10;pre_trial_time = 1;&amp;#10;display_time = 0.75;&amp;#10;display_cue_onset_time = 0.25;&amp;#10;click_response_time = 4;&amp;#10;draw_response_time = 4;&amp;#10;enforce_response_time_limit = false; // TO TUNE&amp;#10;delay_time_min = 2.5;&amp;#10;delay_time_max = 8.5;&amp;#10;post_trial_time_min = 1;&amp;#10;post_trial_time_max = 3;&amp;#10;&amp;#10;// set delay after one stim&amp;#10;delay_post_stim = 1.5;&amp;#10;&amp;#10;// configurations for display&amp;#10;patch_radius = 0.16;&amp;#10;click_radius = 0.01;&amp;#10;wheel_width = 5;&amp;#10;button_width = 0.1;&amp;#10;button_height = 0.05;&amp;#10;&amp;#10;// params control noise patch&amp;#10;noise_patch_display_time = 0.5;&amp;#10;noise_patch_display_chance = 1.0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareTrialConfig" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedbackOneStim">
      <RoutineSettingsComponent name="feedbackOneStim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="feedbackOneStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeFeedbackOneStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;&amp;#10;display_ys = [0.16, -0.2];&amp;#10;display_xs = [-0.25, 0.25];&amp;#10;display_r = 0.13;&amp;#10;title_ys = [display_ys[0]+display_r+0.02, display_ys[1]+display_r+0.02];&amp;#10;&amp;#10;// draw the stimulus&amp;#10;let i = practiceOneStim.thisN;&amp;#10;let ori = stims_selected[i];&amp;#10;let stim_loc = [0, display_ys[0]];&amp;#10;let stim_obj = funcDrawStim(psychoJS.window, ori, stim_loc, display_r);&amp;#10;objs_display.push(stim_obj);&amp;#10;let stim_title = funcCreateFeedbackText(&amp;#10;    psychoJS.window, &quot;stimulus&quot;, &amp;#10;    [stim_loc[0], title_ys[0]], display_r);&amp;#10;objs_display.push(stim_title);&amp;#10;&amp;#10;// draw the participant's response&amp;#10;let resp_loc = [display_xs[0], display_ys[1]];&amp;#10;let resp_obj = null;&amp;#10;if ((instruction_mode === &quot;click&quot;)) {&amp;#10;    resp_obj = funcCreateClickAnswerObject(&amp;#10;        psychoJS.window, last_practice_response, resp_loc, display_r, 0.01);&amp;#10;} else if ((instruction_mode === &quot;draw&quot;)) {&amp;#10;    resp_obj = funcCreateDrawAnswerObject(&amp;#10;        psychoJS.window, last_practice_response, false, resp_loc, display_r);&amp;#10;}&amp;#10;objs_display.push(resp_obj);&amp;#10;let resp_title = funcCreateFeedbackText(&amp;#10;    psychoJS.window, 'your response', &amp;#10;    [resp_loc[0], title_ys[1]], display_r);&amp;#10;objs_display.push(resp_title);&amp;#10;&amp;#10;// draw the correct response&amp;#10;let ans_loc = [display_xs[1], display_ys[1]];&amp;#10;let ans_obj = null;&amp;#10;if (instruction_mode == 'click') {&amp;#10;    ans_obj = funcCreateClickAnswerObject(&amp;#10;        psychoJS.window, ori, ans_loc, display_r, 0.01);&amp;#10;} else if (instruction_mode == 'draw') {&amp;#10;    ans_obj = funcCreateDrawAnswerObject(&amp;#10;        psychoJS.window, ori, true, ans_loc, display_r);&amp;#10;}&amp;#10;objs_display.push(ans_obj);&amp;#10;let ans_title = funcCreateFeedbackText(&amp;#10;    psychoJS.window, 'answer', &amp;#10;    [ans_loc[0], title_ys[1]] display_r);&amp;#10;objs_display.push(ans_title);&amp;#10;&amp;#10;// add the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0.52, 0.4], [0.25, 0.1]);&amp;#10;objs_display.push(continue_button);&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;&amp;#10;display_ys = [0.16, -0.2]&amp;#10;display_xs = [-0.25, 0.25]&amp;#10;display_r = 0.13&amp;#10;title_ys = [display_ys[0]+display_r+0.02, display_ys[1]+display_r+0.02]&amp;#10;&amp;#10;# draw the stimulus&amp;#10;i = practiceOneStim.thisN&amp;#10;ori = practice_stims[i]&amp;#10;stim_loc = [0, display_ys[0]]&amp;#10;stim_obj = funcDrawStim(win, ori, stim_loc, display_r)&amp;#10;objs_display.append(stim_obj)&amp;#10;stim_title = FeedbackText(&amp;#10;    win, f'stimulus', &amp;#10;    [stim_loc[0], title_ys[0]], display_r)&amp;#10;objs_display.append(stim_title)&amp;#10;    &amp;#10;# draw the participant's response&amp;#10;resp_loc = [display_xs[0], display_ys[1]]&amp;#10;resp_obj = None&amp;#10;if instruction_mode == 'click':&amp;#10;    resp_obj = ClickAnswerObject(&amp;#10;        win, last_practice_response, resp_loc, display_r, 0.01)&amp;#10;elif instruction_mode == 'draw':&amp;#10;    resp_obj= DrawAnswerObject(&amp;#10;        win, last_practice_response, False, resp_loc, display_r)&amp;#10;objs_display.append(resp_obj)&amp;#10;resp_title = FeedbackText(&amp;#10;    win, 'your response', &amp;#10;    [resp_loc[0], title_ys[1]], display_r)&amp;#10;objs_display.append(resp_title)&amp;#10;&amp;#10;# draw the correct response&amp;#10;ans_loc = [display_xs[1], display_ys[1]]&amp;#10;ans_obj = None&amp;#10;if instruction_mode == 'click':&amp;#10;    ans_obj = ClickAnswerObject(&amp;#10;        win, ori, ans_loc, display_r, 0.01)&amp;#10;elif instruction_mode == 'draw':&amp;#10;    ans_obj = DrawAnswerObject(&amp;#10;        win, ori, True, ans_loc, display_r)&amp;#10;objs_display.append(ans_obj)&amp;#10;ans_title = FeedbackText(&amp;#10;    win, 'answer', &amp;#10;    [ans_loc[0], title_ys[1]], display_r)&amp;#10;objs_display.append(ans_title)&amp;#10;&amp;#10;# add the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', pos=(0.52,0.4),&amp;#10;    size=(0.25, 0.1))&amp;#10;objs_display.append(continue_button)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseFeedbackOneStim.getPressed()[0]&amp;#10;mouse_position = mouseFeedbackOneStim.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseFeedbackOneStim.getPressed()[0];&amp;#10;mouse_position = mouseFeedbackOneStim.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var i, _pj_c = 0, _pj_a = util.range(objs_display.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;objs_display = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;    &amp;#10;objs_display = []" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeFeedbackOneStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textFeedbackOneStim" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textFeedbackOneStim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Feedback" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseFeedbackOneStim" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseFeedbackOneStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="startColorRulePractice">
      <RoutineSettingsComponent name="startColorRulePractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="startColorRulePractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeStartColorRule" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseStartColorRule.getPressed()[0]&amp;#10;mouse_position = mouseStartColorRule.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseStartColorRule.getPressed()[0];&amp;#10;mouse_position = mouseStartColorRule.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeStartColorRule" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseStartColorRule" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseStartColorRule" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="textStartColorRule" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textStartColorRule" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In the next section, we will explain how the stimuli will be presented and how to respond correctly when there are multiple items to report." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="overviewColorRule">
      <RoutineSettingsComponent name="overviewColorRule" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="overviewColorRule" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeOverviewInstruction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="continue_button = None" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="continue_button = null;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    psychoJS.window, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1]);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseOverviewInstruction.getPressed()[0]&amp;#10;mouse_position = mouseOverviewInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseOverviewInstruction.getPressed()[0];&amp;#10;mouse_position = mouseOverviewInstruction.getPos();&amp;#10;if (left_button &amp;&amp; (t &gt; 0.5) &amp;&amp; continue_button.contains(mouse_position)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False);&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeOverviewInstruction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="imageOverviewInstruction" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="resources/overview.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imageOverviewInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.34, 0.75)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <MouseComponent name="mouseOverviewInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseOverviewInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="prepareColorRulePractice">
      <RoutineSettingsComponent name="prepareColorRulePractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareColorRulePractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareColorRulePractice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="n_color_rule_practice = 4" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# response mode&amp;#10;response_mode = response_modes_allowed[practiceColorRuleLoop.thisN]&amp;#10;&amp;#10;# initialize stims&amp;#10;all_practice_stims = [&amp;#10;    [20, 110],&amp;#10;    [60, 150],&amp;#10;    [100, 10],&amp;#10;    [140, 50],&amp;#10;]&amp;#10;# initialize color codes&amp;#10;all_color_codes = [&amp;#10;    [1, 2],&amp;#10;    [2, 1],&amp;#10;    [2, 1],&amp;#10;    [1, 2],&amp;#10;]&amp;#10;&amp;#10;# initialize response regions&amp;#10;all_report_xs = [&amp;#10;    [-0.25, 0.25],&amp;#10;    [0, 0],&amp;#10;    [0.25, -0.25],&amp;#10;    [0, 0],&amp;#10;]&amp;#10;all_report_ys = [&amp;#10;    [0.03, 0.03],&amp;#10;    [0.3, -0.24],&amp;#10;    [0.03, 0.03],&amp;#10;    [-0.24, 0.3],&amp;#10;]&amp;#10;&amp;#10;# initialize timing&amp;#10;delay_lengths = [1.5, 5.5]&amp;#10;&amp;#10;# make it slower for practice&amp;#10;slow_down_factor = 1.5&amp;#10;practice_display_time = display_time * slow_down_factor&amp;#10;practice_display_cue_onset_time = display_cue_onset_time * slow_down_factor&amp;#10;&amp;#10;# provide the button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mousePrepareColorRulePractice.getPressed()[0]&amp;#10;mouse_position = mousePrepareColorRulePractice.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareColorRulePractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPrepareColorRulePractice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPrepareColorRulePractice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'In the following trials, we will practice reporting two sequentially presented stimuli (by ' + response_mode + 'ing)'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mousePrepareColorRulePractice" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePrepareColorRulePractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="colorRuleStim">
      <RoutineSettingsComponent name="colorRuleStim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="colorRuleStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeColorRuleStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;&amp;#10;# fetch the id of the stimulus&amp;#10;color_rule_i = ColorRulePracticeTrials.thisN&amp;#10;color_rule_j = colorRuleStimDisplayLoop.thisN&amp;#10;&amp;#10;# now display the stimulus&amp;#10;ori = all_practice_stims[color_rule_i][color_rule_j]&amp;#10;loc = [0, 0]&amp;#10;stim_obj = funcDrawStim(win, ori, loc, patch_radius)&amp;#10;objs_display.append(stim_obj)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True&amp;#10;&amp;#10;# to mark if the cue has displayed&amp;#10;has_cue_shown = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="all_color_codes&amp;#10;&amp;#10;# display the cue when onset&amp;#10;if (not has_cue_shown) and t &gt;= practice_display_cue_onset_time:&amp;#10;    cue_loc = [0, 0]&amp;#10;    cue_color = all_color_codes[color_rule_i][color_rule_j]&amp;#10;    cue_code = 99 # default&amp;#10;    report_cue = SingleCueObject(&amp;#10;        win, cue_loc, cue_code, patch_radius*0.6, cue_color)&amp;#10;    objs_display.append(report_cue)&amp;#10;    has_cue_shown = True&amp;#10;&amp;#10;# end routine when time up&amp;#10;if t &gt; practice_display_time:&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;# don't record response&amp;#10;# thisExp.addData(f'mouseStim.x_{seq_display_loop.thisN+1}', display_mouse_xs)&amp;#10;# thisExp.addData(f'mouseStim.y_{seq_display_loop.thisN+1}', display_mouse_ys)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeColorRuleStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textColorRuleStim" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textColorRuleStim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="colorRuleDelay">
      <RoutineSettingsComponent name="colorRuleDelay" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="colorRuleDelay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeColorRuleDelay" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;has_noise_patch_displaying = false;&amp;#10;// decide whether to display noise patch&amp;#10;to_display_noise_patch = Math.random() &lt; noise_patch_display_chance;&amp;#10;if (to_display_noise_patch) {&amp;#10;    let loc = [0, 0];&amp;#10;    stim_obj = new NoisePatch(psychoJS.window, loc, patch_radius);&amp;#10;    objs_display.push(stim_obj);&amp;#10;    has_noise_patch_displaying = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;has_noise_patch_displaying = False&amp;#10;&amp;#10;# decide whether to display noise patch&amp;#10;to_display_noise_patch =  random.random() &lt; noise_patch_display_chance&amp;#10;if to_display_noise_patch:&amp;#10;    loc = [0, 0]&amp;#10;    stim_obj = NoisePatch(win, loc, patch_radius)&amp;#10;    objs_display.append(stim_obj)&amp;#10;    has_noise_patch_displaying = True&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# end routine when time up&amp;#10;if t &gt; delay_post_stim:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;# stop displaying all noise patches&amp;#10;if has_noise_patch_displaying:&amp;#10;    if t &gt; noise_patch_display_time:&amp;#10;        for i in range(len(objs_display)):&amp;#10;            display_obj = objs_display[i]&amp;#10;            display_obj.setAutoDraw(False)&amp;#10;        has_noise_patch_displaying = False&amp;#10;        &amp;#10;        # display the fixation&amp;#10;        objs_display = []&amp;#10;        fixation = DefaultFixation(win)&amp;#10;        objs_display.append(fixation)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// no recording&amp;#10;// psychoJS.experiment.addData(`mousePostStim.x_${seq_display_loop.thisN+1}`, post_display_mouse_xs);&amp;#10;// psychoJS.experiment.addData(`mousePostStim.y_${seq_display_loop.thisN+1}`, post_display_mouse_ys);&amp;#10;&amp;#10;// clear all objects&amp;#10;for (var i = 0; i &lt; objs_display.length; i++) {&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;&amp;#10;objs_display = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# no recording&amp;#10;# thisExp.addData(f'mousePostStim.x_{seq_display_loop.thisN+1}', post_display_mouse_xs)&amp;#10;# thisExp.addData(f'mousePostStim.y_{seq_display_loop.thisN+1}', post_display_mouse_ys)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeColorRuleDelay" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textColorRuleDelay" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textColorRuleDelay" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="colorRuleResponse">
      <RoutineSettingsComponent name="colorRuleResponse" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="colorRuleResponse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeColorRuleResp" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;response_objects = []&amp;#10;for i in range(2):&amp;#10;    loc = [&amp;#10;        all_report_xs[color_rule_i][i],&amp;#10;        all_report_ys[color_rule_i][i],&amp;#10;    ]&amp;#10;    to_report = True # default; always report it&amp;#10;    response_obj = None&amp;#10;    if response_mode == 'click':&amp;#10;        response_obj = funcDrawAdjustResponse(&amp;#10;            win, loc, patch_radius, click_radius, to_report)&amp;#10;    elif response_mode == 'draw':&amp;#10;        response_obj = funcDrawDrawResponse(&amp;#10;            win, loc, patch_radius, to_report)&amp;#10;    else:&amp;#10;        raise NotImplementedError(f'Unknown response mode: {response_mode}')&amp;#10;    objs_display.append(response_obj)&amp;#10;    response_objects.append(response_obj)&amp;#10;    &amp;#10;    # give order color cue&amp;#10;    color_code = all_color_codes[color_rule_i][i]&amp;#10;    report_cue = SingleCueObject(&amp;#10;        win, loc, 99, patch_radius*0.6, color_code)&amp;#10;    objs_display.append(report_cue)&amp;#10;&amp;#10;# to add the confirm button&amp;#10;continue_button = None&amp;#10;if len(response_objects) &gt; 0:&amp;#10;    continue_button = funcCreateButton(&amp;#10;        win, 'continue', pos=(0, 0),&amp;#10;        size=(button_width*1.3, button_height*1.3))&amp;#10;    objs_display.append(continue_button)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# if there are objects clicked&amp;#10;left_button = mouseColorRuleResponse.getPressed()[0]&amp;#10;mouse_position = mouseColorRuleResponse.getPos()&amp;#10;mouse_time = t&amp;#10;if left_button:&amp;#10;    if continue_button.contains(mouse_position):&amp;#10;        # first check if it's over the continue button&amp;#10;        no_pending = funcCheckNoPending(response_objects)&amp;#10;        if no_pending:&amp;#10;            continueRoutine = False&amp;#10;    else:&amp;#10;        if response_mode == 'click':&amp;#10;            # only register the first click&amp;#10;            if has_released:&amp;#10;                # this is a new press, register it&amp;#10;                has_released = False&amp;#10;                # otherwise, ignore it&amp;#10;                for i in range(len(response_objects)):&amp;#10;                    # update each position with the click&amp;#10;                    resp_obj = response_objects[i]&amp;#10;                    resp_obj.register_click(mouse_position, mouse_time)&amp;#10;        elif response_mode == 'draw':&amp;#10;            # register all mouse movements&amp;#10;            has_released = False&amp;#10;            for i in range(len(response_objects)):&amp;#10;                # update each position with the click&amp;#10;                resp_obj = response_objects[i]&amp;#10;                has_redo = resp_obj.register_mouse(&amp;#10;                    mouse_position, mouse_time)&amp;#10;                    &amp;#10;else:&amp;#10;    # check if we should update has_released&amp;#10;    has_released = True&amp;#10;    if response_mode == 'draw':&amp;#10;        for i in range(len(response_objects)):&amp;#10;            # update each position with the click&amp;#10;            resp_obj = response_objects[i]&amp;#10;            resp_obj.deregister_mouse(mouse_position, mouse_time)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;practice_responses = []&amp;#10;&amp;#10;# save unsaved&amp;#10;for i in range(2):&amp;#10;    resp_obj = response_objects[i]&amp;#10;    if response_mode == 'draw':&amp;#10;        # save the stroke&amp;#10;        if resp_obj.has_unsaved_stroke:&amp;#10;            resp_obj.save_stroke()&amp;#10;        # saving drawings (if there are unsaved)&amp;#10;        if resp_obj.has_unsaved_drawing:&amp;#10;            resp_obj.save_drawing()&amp;#10;&amp;#10;    # record the practice response for later use&amp;#10;    last_practice_response = resp_obj.compute_response()&amp;#10;    if (response_mode == 'draw') and (last_practice_response is not None):&amp;#10;        # for drawing: just copy everything from last drawing&amp;#10;        original_drawing = (&amp;#10;            resp_obj.all_drawings_x[-1],&amp;#10;            resp_obj.all_drawings_y[-1])&amp;#10;        last_practice_response = original_drawing&amp;#10;        &amp;#10;    practice_responses.append(last_practice_response)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;response_objects = []&amp;#10;####################&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeColorRuleResp" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseColorRuleResponse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseColorRuleResponse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="colorRuleFeedback">
      <RoutineSettingsComponent name="colorRuleFeedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="colorRuleFeedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeColorRuleFeedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;&amp;#10;resp_locs = [&amp;#10;    [all_report_xs[color_rule_i][0], all_report_ys[color_rule_i][0]],&amp;#10;    [all_report_xs[color_rule_i][1], all_report_ys[color_rule_i][1]],&amp;#10;]&amp;#10;feeaback_objects = CreateWholePracticeFeedback(&amp;#10;        oris=all_practice_stims[color_rule_i], &amp;#10;        responses=practice_responses, &amp;#10;        resp_locs=resp_locs,&amp;#10;        colors=all_color_codes[color_rule_i], &amp;#10;        cue_codes=[99, 99], &amp;#10;        report_codes=[True, True],&amp;#10;        mode=response_mode)&amp;#10;objs_display += feeaback_objects&amp;#10;&amp;#10;# add the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', pos=(0.52,0.42),&amp;#10;    size=(0.25, 0.1))&amp;#10;objs_display.append(continue_button)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseColorRuleFeedback.getPressed()[0]&amp;#10;mouse_position = mouseColorRuleFeedback.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;    &amp;#10;objs_display = []" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeColorRuleFeedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textColorRuleFeedback" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textColorRuleFeedback" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.42)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Feedback" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseColorRuleFeedback" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseColorRuleFeedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="colorRuleTrialPrepare">
      <RoutineSettingsComponent name="colorRuleTrialPrepare" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="colorRuleTrialPrepare" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeColorRuleTrialPrepare" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeColorRuleTrialPrepare" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="colorRuleResp">
      <RoutineSettingsComponent name="colorRuleResp" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="colorRuleResp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="prepareAllPractice">
      <RoutineSettingsComponent name="prepareAllPractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareAllPractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareAllPractice" plugin="None">
        <Param val="# helper functions for creating feedbacks&amp;#10;def DrawStimsDiagram(oris, locs, cue_codes, colors, radius):&amp;#10;    objs = []&amp;#10;    for i in range(2):&amp;#10;        # draw the stimulus&amp;#10;        ori = oris[i]&amp;#10;        stim_loc = locs[i]&amp;#10;        stim_obj = funcDrawStim(win, ori, stim_loc, radius)&amp;#10;        objs.append(stim_obj)&amp;#10;        &amp;#10;        # the title&amp;#10;        stim_title = FeedbackText(&amp;#10;            win, f'stimulus {i+1}', &amp;#10;            [stim_loc[0], stim_loc[1]+radius*1.2], radius)&amp;#10;        objs.append(stim_title)&amp;#10;        &amp;#10;        # also show the color code&amp;#10;        color_code, cue_code = colors[i], cue_codes[i]&amp;#10;        color_cue = SingleCueObject(&amp;#10;            win, stim_loc, cue_code, radius*0.6, color_code)&amp;#10;        objs.append(color_cue)&amp;#10;        &amp;#10;    # show the arrow&amp;#10;    stim_arrow = funcDrawArrow(win, radius, locs[0], locs[1])&amp;#10;    objs.append(stim_arrow)&amp;#10;    &amp;#10;    return objs&amp;#10;    &amp;#10;&amp;#10;def DrawResponseCanvasDiagram(responses, locs, to_report_codes, colors, radius, h, w, mode, is_gt):&amp;#10;    objs = []&amp;#10;    &amp;#10;    # create the canvas&amp;#10;    canvas_loc = [&amp;#10;        (locs[0][0]+locs[1][0])/2,&amp;#10;        (locs[0][1]+locs[1][1])/2]&amp;#10;    canvas = visual.Rect(&amp;#10;        win=win, width=w, height=h, pos=canvas_loc,&amp;#10;        fillColor='darkGray', lineColor='black')&amp;#10;    canvas.setAutoDraw(True)&amp;#10;    objs.append(canvas)&amp;#10;    &amp;#10;    # create the answer objects&amp;#10;    for i in range(2):&amp;#10;        # draw the response:&amp;#10;        resp = responses[i]&amp;#10;        loc = locs[i]&amp;#10;        to_report = to_report_codes[i]&amp;#10;        cue_color = colors[i]&amp;#10;&amp;#10;        if to_report:&amp;#10;            if mode == 'click':&amp;#10;                resp_obj = ClickAnswerObject(&amp;#10;                    win, resp, loc, radius, 0.01)&amp;#10;            elif mode == 'draw':&amp;#10;                resp_obj= DrawAnswerObject(&amp;#10;                    win, resp, is_gt, loc, radius)&amp;#10;            else:&amp;#10;                raise ValueError(f'Unknown mode {mode}')&amp;#10;            objs.append(resp_obj)&amp;#10;            &amp;#10;            # add the color code&amp;#10;            color_cue = SingleCueObject(&amp;#10;                win, loc, 99, radius*0.6, cue_color)&amp;#10;            objs.append(color_cue)&amp;#10;        else:&amp;#10;            if mode == 'click':&amp;#10;                resp_obj = createPatch(&amp;#10;                    win, pos=loc, radius=radius,&amp;#10;                    fill_color='gray', line_color='black')&amp;#10;            elif mode == 'draw':&amp;#10;                dark_gray = [-0.3, -0.3, -0.3]&amp;#10;                resp_obj= createPatch(&amp;#10;                    win, pos=loc, radius=radius,&amp;#10;                    fill_color=dark_gray, line_color=dark_gray)&amp;#10;            else:&amp;#10;                raise ValueError(f'Unknown mode {mode}')&amp;#10;            resp_obj.setAutoDraw(True)&amp;#10;            objs.append(resp_obj)&amp;#10;    &amp;#10;    # return list of objects&amp;#10;    return objs&amp;#10;&amp;#10;def CreateWholePracticeFeedback(&amp;#10;        oris, responses, resp_locs,&amp;#10;        colors, cue_codes, report_codes, mode):&amp;#10;    &amp;#10;    objs_display = []&amp;#10;&amp;#10;    # layout settings&amp;#10;    group_xs = [-0.3, 0.3]&amp;#10;    display_ys = [0.14, -0.3]&amp;#10;    display_xs = [-0.15, 0.15]&amp;#10;    stim_xs = [-0.2, 0.2]&amp;#10;    display_r = 0.13&amp;#10;    little_display_r = 0.08&amp;#10;    title_ys = [display_ys[0]+display_r+0.02, display_ys[1]+little_display_r*2.75]&amp;#10;    &amp;#10;    little_canvas_h = 4.5 * little_display_r&amp;#10;    little_canvas_w = 6 * little_display_r&amp;#10;    &amp;#10;    # create stimuli&amp;#10;    locs = [&amp;#10;        [stim_xs[0], display_ys[0]],&amp;#10;        [stim_xs[1], display_ys[0]],&amp;#10;    ]&amp;#10;    stim_objs = DrawStimsDiagram(&amp;#10;        oris, locs, [99, 99], &amp;#10;        colors, display_r)&amp;#10;    objs_display += stim_objs&amp;#10;    # draw the title for stimuli display&amp;#10;    all_stim_title = FeedbackText(&amp;#10;        win, f'Stimuli', &amp;#10;        [0, title_ys[0]+0.05], display_r*1.5)&amp;#10;    objs_display.append(all_stim_title)&amp;#10;    &amp;#10;    # create participant response review&amp;#10;    # convert resp loc to offset&amp;#10;    loc_offsets = []&amp;#10;    for i in range(2):&amp;#10;        x_offset = resp_locs[i][0] * little_canvas_w&amp;#10;        y_offset = resp_locs[i][1] * little_canvas_h&amp;#10;        loc_offsets.append([x_offset, y_offset])&amp;#10;        &amp;#10;    # create partcipants' response&amp;#10;    locs = [&amp;#10;        [loc_offsets[0][0]+group_xs[0], loc_offsets[0][1]+display_ys[1]],&amp;#10;        [loc_offsets[1][0]+group_xs[0], loc_offsets[1][1]+display_ys[1]],&amp;#10;    ]&amp;#10;    past_resp_objs = DrawResponseCanvasDiagram(&amp;#10;        responses, locs, report_codes, &amp;#10;        colors, little_display_r, &amp;#10;        little_canvas_h, little_canvas_w, mode, False)&amp;#10;    objs_display += past_resp_objs&amp;#10;    # and the title&amp;#10;    all_resp_title = FeedbackText(&amp;#10;        win, f'Your Response', &amp;#10;        [group_xs[0], title_ys[1]], display_r*1.2)&amp;#10;    objs_display.append(all_resp_title)&amp;#10;&amp;#10;    # create correct answers&amp;#10;    locs = [&amp;#10;        [loc_offsets[0][0]+group_xs[1], loc_offsets[0][1]+display_ys[1]],&amp;#10;        [loc_offsets[1][0]+group_xs[1], loc_offsets[1][1]+display_ys[1]],&amp;#10;    ]&amp;#10;    ans_objs = DrawResponseCanvasDiagram(&amp;#10;        oris, locs, report_codes, &amp;#10;        colors, little_display_r, &amp;#10;        little_canvas_h, little_canvas_w, mode, True)&amp;#10;    objs_display += ans_objs&amp;#10;    # and the title&amp;#10;    all_ans_title = FeedbackText(&amp;#10;        win, f'Correct Answer', &amp;#10;        [group_xs[1], title_ys[1]], display_r*1.2)&amp;#10;    objs_display.append(all_ans_title)&amp;#10;    &amp;#10;    return objs_display&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareAllPractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="taskInstructionText">
      <RoutineSettingsComponent name="taskInstructionText" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskInstructionText" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTextInstructionText" plugin="None">
        <Param val="text_practice_instruction_precue = &quot;In this type of trials, &quot; \&amp;#10;    + &quot;you don't need to remember all stimuli shown. &quot; \&amp;#10;    + &quot;Instead, you only need to remember the ones marked with a filled star, &quot; \&amp;#10;    + &quot;and you can forget about those with an empty star. &quot; \&amp;#10;    + &quot;During the response phase, &quot; \&amp;#10;    + &quot;report only the stimuli you were instructed to remember.&quot;&amp;#10;text_practice_instruction_postcue = &quot;In this type of trial, &quot; \&amp;#10;    + &quot;you always need to remember all the stimuli presented. &quot; \&amp;#10;    + &quot;However, during the response phase, &quot; \&amp;#10;    + &quot;sometimes only one of the two stimuli will be asked about.&quot; \&amp;#10;    + &quot;More specifically, you only need to report stimuli whose corresponding &quot; \&amp;#10;    + &quot;report regions are valid.&quot;&amp;#10;&amp;#10;text_practice_instructions = [&amp;#10;    text_practice_instruction_precue,&amp;#10;    text_practice_instruction_postcue,&amp;#10;]&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseTaskInstruction.getPressed()[0]&amp;#10;mouse_position = mouseTaskInstruction.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTextInstructionText" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTaskInstruction" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textTaskInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$text_practice_instructions[trial_type] + '\n You will perform this task in both drawing and clicking mode'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseTaskInstruction" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseTaskInstruction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="taskInstructionDiagram">
      <RoutineSettingsComponent name="taskInstructionDiagram" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskInstructionDiagram" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskInstrDiagram" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="task_diagram_text_to_display_list = [&amp;#10;        'Trials with a delay and an informatic cue',&amp;#10;        'Trials with a delay but no informatic cue'&amp;#10;]" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# specify the response mode&amp;#10;response_mode = response_modes_allowed[TaskInstrLoop.thisN]&amp;#10;# create the title&amp;#10;task_diagram_text_to_display = 'Now we will practice ' + response_mode + 'ing to report answer \n'&amp;#10;task_diagram_text_to_display += 'for this type of trials.'&amp;#10;# create the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseTaskInstrDiagram.getPressed()[0]&amp;#10;mouse_position = mouseTaskInstrDiagram.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskInstrDiagram" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTaskInstrDiagram" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textTaskInstrDiagram" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$task_diagram_text_to_display" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseTaskInstrDiagram" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseTaskInstrDiagram" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="imgTaskInstrDiagram" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$'resources/trial_type_' + str(trial_type) + '_' + response_mode + '.png'" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="imgTaskInstrDiagram" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.12, 0.63)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
    </Routine>
    <Routine name="taskStart">
      <RoutineSettingsComponent name="taskStart" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskStart" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskPhase" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trial_type = trial_type_list[TasktypeLoop.thisN];&amp;#10;trial_phase_id_text = [&quot;FIRST&quot;, &quot;SECOND&quot;][TasktypeLoop.thisN];&amp;#10;mode_type_list = Math.random.sample(response_modes_allowed, n_response_modes_allowed);&amp;#10;continue_button = funcCreateButton(psychoJS.window, &quot;continue&quot;, [0, (- 0.4)], [0.25, 0.1]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# specify the task id&amp;#10;# note that order of task could have been shuffled&amp;#10;trial_type = trial_type_list[TasktypeLoop.thisN]&amp;#10;&amp;#10;trial_phase_id_text = ['FIRST', 'SECOND'][TasktypeLoop.thisN]&amp;#10;&amp;#10;# specify the order or response modes (draw or click first?)&amp;#10;mode_type_list = random.sample(response_modes_allowed, n_response_modes_allowed)&amp;#10;&amp;#10;# create the button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseTaskPhase.getPressed()[0]&amp;#10;mouse_position = mouseTaskPhase.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="left_button = mouseTaskPhase.getPressed()[0];&amp;#10;mouse_position = mouseTaskPhase.getPos();&amp;#10;if (((left_button &amp;&amp; (t &gt; 0.5)) &amp;&amp; continue_button.contains(mouse_position))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="continue_button.setAutoDraw(false);&amp;#10;continue_button = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskPhase" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTaskPhase" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textTaskPhase" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'We will now begin the ' + trial_phase_id_text + ' of two parts of the experiment. First, we will explain the task and prepare you with two practice blocks. After that, the experimenter will calibrate the eye tracker. The actual trials will then follow.'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseTaskPhase" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseTaskPhase" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="prepareTaskInstrPractice">
      <RoutineSettingsComponent name="prepareTaskInstrPractice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareTaskInstrPractice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareTaskInstrPractice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# start the instruction + practice&amp;#10;has_finished_instruction = False&amp;#10;max_instruction_practice_loop = 2&amp;#10;&amp;#10;# create a sampler for instruction&amp;#10;instruction_sampler = StimSamplingScheduler(&amp;#10;    n_ori_regions, ['orthogonal'])&amp;#10;instruction_sampler.initialize_stage()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareTaskInstrPractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="startPracticeBlock">
      <RoutineSettingsComponent name="startPracticeBlock" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="startPracticeBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeStartPraticeBlock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# specify number of trials&amp;#10;n_trials_to_practice = 4 if has_finished_instruction else 3&amp;#10;&amp;#10;# renew the sampler&amp;#10;instruction_sampler.initialize_block()&amp;#10;&amp;#10;# initialize response regions&amp;#10;report_xs_options = [&amp;#10;    [-0.25, 0.25],&amp;#10;    [0, 0],&amp;#10;    [0.25, -0.25],&amp;#10;    [0, 0],&amp;#10;]&amp;#10;report_ys_options = [&amp;#10;    [0.03, 0.03],&amp;#10;    [0.3, -0.24],&amp;#10;    [0.03, 0.03],&amp;#10;    [-0.24, 0.3],&amp;#10;]&amp;#10;&amp;#10;# initialize timing&amp;#10;delay_lengths = [1.5, 5.5]&amp;#10;&amp;#10;# make it slower for practice&amp;#10;slow_down_factor = 1 if has_finished_instruction else 1.5&amp;#10;practice_display_time = display_time * slow_down_factor&amp;#10;practice_display_cue_onset_time = display_cue_onset_time * slow_down_factor&amp;#10;&amp;#10;# provide the button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', &amp;#10;    [0, -0.4], [0.25, 0.1])&amp;#10;&amp;#10;# create a little piece of prompt&amp;#10;text_start_practice_block = ''&amp;#10;if has_finished_instruction:&amp;#10;    text_start_practice_block = 'Now we will start a block of PRACTICE trials, ' \&amp;#10;        + 'but at the normal speed, just as what you will see in actual trials.'&amp;#10;else:&amp;#10;    text_start_practice_block = 'Now we will try some PRACTICE trials, ' \&amp;#10;        + 'but slower than actual trials. ' \&amp;#10;        + 'Please check the feedback at the end of each trial carefully before moving on.'&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseStartPracticeBlock.getPressed()[0]&amp;#10;mouse_position = mouseStartPracticeBlock.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="continue_button.setAutoDraw(False)&amp;#10;continue_button = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeStartPraticeBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseStartPracticeBlock" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseStartPracticeBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="textStartPracticeBlock" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textStartPracticeBlock" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$text_start_practice_block" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="taskPracticeStim">
      <RoutineSettingsComponent name="taskPracticeStim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskPracticeStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskPracticeStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;&amp;#10;# now display the stimulus&amp;#10;stim_id = taskPracticeStimLoop.thisN&amp;#10;ori = cur_stims[stim_id]&amp;#10;loc = [0, 0]&amp;#10;stim_obj = funcDrawStim(win, ori, loc, patch_radius)&amp;#10;objs_display.append(stim_obj)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True&amp;#10;&amp;#10;# to mark if the cue has displayed&amp;#10;has_cue_shown = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# display the cue when onset&amp;#10;if (not has_cue_shown) and t &gt;= practice_display_cue_onset_time:&amp;#10;    cue_loc = [0, 0]&amp;#10;    cue_color = cur_colors[stim_id]&amp;#10;    cue_code = cur_cue_codes[stim_id]&amp;#10;    report_cue = SingleCueObject(&amp;#10;        win, cue_loc, cue_code, patch_radius, cue_color)&amp;#10;    objs_display.append(report_cue)&amp;#10;    has_cue_shown = True&amp;#10;    &amp;#10;    # additionally, for instruction purpose&amp;#10;    # show the verbal cue&amp;#10;    if not has_finished_instruction:&amp;#10;        # if this is to report&amp;#10;        s_to_cue = False&amp;#10;        if trial_type == 1:&amp;#10;            # post cue: remember everything&amp;#10;            s_to_cue = True&amp;#10;        elif trial_type == 0:&amp;#10;            # otherwise only remember the cued&amp;#10;            s_to_cue = cue_code&amp;#10;        if s_to_cue:&amp;#10;            additional_cue = TrainingCue(&amp;#10;                win, 'remember this', &amp;#10;                cue_loc, patch_radius)&amp;#10;            objs_display.append(additional_cue)&amp;#10;&amp;#10;# end routine when time up&amp;#10;if t &gt; practice_display_time:&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;# don't record response&amp;#10;# thisExp.addData(f'mouseStim.x_{seq_display_loop.thisN+1}', display_mouse_xs)&amp;#10;# thisExp.addData(f'mouseStim.y_{seq_display_loop.thisN+1}', display_mouse_ys)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskPracticeStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTaskPracticeStim" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textTaskPracticeStim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="prepareSinglePracticeTrial">
      <RoutineSettingsComponent name="prepareSinglePracticeTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareSinglePracticeTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeSinglePracticeTrial" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="practice_trial_id = taskPracticeTrialLoop.thisN&amp;#10;&amp;#10;# sample stimuli&amp;#10;_, cur_stims = instruction_sampler.sample_for_trial(&amp;#10;    allow_same_region=False)&amp;#10;&amp;#10;# sample color code&amp;#10;cur_colors = (1, 2) if random.random() &lt; 0.5 else (2, 1)&amp;#10;&amp;#10;# determine cue code or report code&amp;#10;cur_cue_codes = [False, False]&amp;#10;cur_report_codes = [False, False]&amp;#10;if trial_type == 0:&amp;#10;    cur_cue_codes[0] = (practice_trial_id % 3) != 1 &amp;#10;    cur_cue_codes[1] = (practice_trial_id % 3) != 0&amp;#10;    cur_report_codes = cur_cue_codes[:]&amp;#10;elif trial_type == 1:&amp;#10;    cur_cue_codes = [True, True]&amp;#10;    cur_report_codes[0] = (practice_trial_id % 3) != 1 &amp;#10;    cur_report_codes[1] = (practice_trial_id % 3) != 0&amp;#10;else:&amp;#10;    raise ValueError(f'Unknown trial type {trial_type}')&amp;#10;&amp;#10;# determine response region&amp;#10;cur_resp_region_id = random.randint(0, len(report_xs_options)-1)&amp;#10;cur_resp_regions = [&amp;#10;    [report_xs_options[cur_resp_region_id][0], report_ys_options[cur_resp_region_id][0]],&amp;#10;    [report_xs_options[cur_resp_region_id][1], report_ys_options[cur_resp_region_id][1]],&amp;#10;]&amp;#10;&amp;#10;# finally, create the fixation&amp;#10;fixation = DefaultFixation(win)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# end routine when time up&amp;#10;if t &gt; pre_trial_time:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="fixation.setAutoDraw(False)&amp;#10;fixation = None" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeSinglePracticeTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPracticePreTrial" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPracticePreTrial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="taskPracticeStimDelay">
      <RoutineSettingsComponent name="taskPracticeStimDelay" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskPracticeStimDelay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskPracticeStimDelay" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="objs_display = [];&amp;#10;has_noise_patch_displaying = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;has_noise_patch_displaying = True&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# end routine when time up&amp;#10;if t &gt; delay_post_stim:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;# stop displaying all noise patches&amp;#10;if has_noise_patch_displaying:&amp;#10;    if t &gt; noise_patch_display_time:&amp;#10;        for i in range(len(objs_display)):&amp;#10;            display_obj = objs_display[i]&amp;#10;            display_obj.setAutoDraw(False)&amp;#10;        has_noise_patch_displaying = False&amp;#10;        &amp;#10;        # display the fixation&amp;#10;        objs_display = []&amp;#10;        fixation = DefaultFixation(win)&amp;#10;        objs_display.append(fixation)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// no recording&amp;#10;// psychoJS.experiment.addData(`mousePostStim.x_${seq_display_loop.thisN+1}`, post_display_mouse_xs);&amp;#10;// psychoJS.experiment.addData(`mousePostStim.y_${seq_display_loop.thisN+1}`, post_display_mouse_ys);&amp;#10;&amp;#10;// clear all objects&amp;#10;for (var i = 0; i &lt; objs_display.length; i++) {&amp;#10;    let display_obj = objs_display[i];&amp;#10;    display_obj.setAutoDraw(false);&amp;#10;}&amp;#10;&amp;#10;objs_display = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# no recording&amp;#10;# thisExp.addData(f'mousePostStim.x_{seq_display_loop.thisN+1}', post_display_mouse_xs)&amp;#10;# thisExp.addData(f'mousePostStim.y_{seq_display_loop.thisN+1}', post_display_mouse_ys)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskPracticeStimDelay" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textColorRuleDelay_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textColorRuleDelay_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="taskPracticeResponse">
      <RoutineSettingsComponent name="taskPracticeResponse" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskPracticeResponse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskPracticeResponse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;response_objects = []&amp;#10;for i in range(2):&amp;#10;    loc = cur_resp_regions[i]&amp;#10;    to_report = cur_report_codes[i] # default; always report it&amp;#10;    response_obj = None&amp;#10;    if response_mode == 'click':&amp;#10;        response_obj = funcDrawAdjustResponse(&amp;#10;            win, loc, patch_radius, click_radius, to_report)&amp;#10;    elif response_mode == 'draw':&amp;#10;        response_obj = funcDrawDrawResponse(&amp;#10;            win, loc, patch_radius, to_report)&amp;#10;    else:&amp;#10;        raise NotImplementedError(f'Unknown response mode: {response_mode}')&amp;#10;    objs_display.append(response_obj)&amp;#10;    response_objects.append(response_obj)&amp;#10;    &amp;#10;    # give order color cue&amp;#10;    if to_report:&amp;#10;        color_code = cur_colors[i]&amp;#10;        report_cue = SingleCueObject(&amp;#10;            win, loc, to_report, patch_radius, color_code)&amp;#10;        objs_display.append(report_cue)&amp;#10;&amp;#10;# to add the confirm button&amp;#10;continue_button = None&amp;#10;if len(response_objects) &gt; 0:&amp;#10;    continue_button = funcCreateButton(&amp;#10;        win, 'continue', pos=(0, 0),&amp;#10;        size=(button_width*1.3, button_height*1.3))&amp;#10;    objs_display.append(continue_button)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# if there are objects clicked&amp;#10;left_button = mouseTaskPracticeResponse.getPressed()[0]&amp;#10;mouse_position = mouseTaskPracticeResponse.getPos()&amp;#10;mouse_time = t&amp;#10;if left_button:&amp;#10;    if continue_button.contains(mouse_position):&amp;#10;        # first check if it's over the continue button&amp;#10;        no_pending = funcCheckNoPending(response_objects)&amp;#10;        if no_pending:&amp;#10;            continueRoutine = False&amp;#10;    else:&amp;#10;        if response_mode == 'click':&amp;#10;            # only register the first click&amp;#10;            if has_released:&amp;#10;                # this is a new press, register it&amp;#10;                has_released = False&amp;#10;                # otherwise, ignore it&amp;#10;                for i in range(len(response_objects)):&amp;#10;                    # update each position with the click&amp;#10;                    resp_obj = response_objects[i]&amp;#10;                    resp_obj.register_click(mouse_position, mouse_time)&amp;#10;        elif response_mode == 'draw':&amp;#10;            # register all mouse movements&amp;#10;            has_released = False&amp;#10;            for i in range(len(response_objects)):&amp;#10;                # update each position with the click&amp;#10;                resp_obj = response_objects[i]&amp;#10;                has_redo = resp_obj.register_mouse(&amp;#10;                    mouse_position, mouse_time)&amp;#10;                    &amp;#10;else:&amp;#10;    # check if we should update has_released&amp;#10;    has_released = True&amp;#10;    if response_mode == 'draw':&amp;#10;        for i in range(len(response_objects)):&amp;#10;            # update each position with the click&amp;#10;            resp_obj = response_objects[i]&amp;#10;            resp_obj.deregister_mouse(mouse_position, mouse_time)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;practice_responses = []&amp;#10;&amp;#10;# save unsaved&amp;#10;for i in range(2):&amp;#10;    to_report = cur_report_codes[i]&amp;#10;    if to_report:&amp;#10;        resp_obj = response_objects[i]&amp;#10;        if response_mode == 'draw':&amp;#10;            # save the stroke&amp;#10;            if resp_obj.has_unsaved_stroke:&amp;#10;                resp_obj.save_stroke()&amp;#10;            # saving drawings (if there are unsaved)&amp;#10;            if resp_obj.has_unsaved_drawing:&amp;#10;                resp_obj.save_drawing()&amp;#10;&amp;#10;        # record the practice response for later use&amp;#10;        last_practice_response = resp_obj.compute_response()&amp;#10;        if (response_mode == 'draw') and (last_practice_response is not None):&amp;#10;            # for drawing: just copy everything from last drawing&amp;#10;            original_drawing = (&amp;#10;                resp_obj.all_drawings_x[-1],&amp;#10;                resp_obj.all_drawings_y[-1])&amp;#10;            last_practice_response = original_drawing&amp;#10;    else:&amp;#10;        last_practice_response = None&amp;#10;    practice_responses.append(last_practice_response)&amp;#10;        &amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;response_objects = []&amp;#10;####################&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskPracticeResponse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouseTaskPracticeResponse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseTaskPracticeResponse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="taskPracticeTrialFeedback">
      <RoutineSettingsComponent name="taskPracticeTrialFeedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="taskPracticeTrialFeedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeTaskPracticeTrialFeedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="objs_display = []&amp;#10;feeaback_objects = CreateWholePracticeFeedback(&amp;#10;        oris=cur_stims, &amp;#10;        responses=practice_responses, &amp;#10;        resp_locs=cur_resp_regions,&amp;#10;        colors=cur_colors, &amp;#10;        cue_codes=cur_cue_codes, &amp;#10;        report_codes=cur_report_codes,&amp;#10;        mode=response_mode)&amp;#10;objs_display += feeaback_objects&amp;#10;&amp;#10;# add the continue button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', pos=(0.52,0.42),&amp;#10;    size=(0.25, 0.1))&amp;#10;objs_display.append(continue_button)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="left_button = mouseTaskPracticeTrialFeedback.getPressed()[0]&amp;#10;mouse_position = mouseTaskPracticeTrialFeedback.getPos()&amp;#10;if left_button and (t &gt; 0.5) and continue_button.contains(mouse_position):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;    &amp;#10;objs_display = []" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeTaskPracticeTrialFeedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTaskPracticeTrialFeedback" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textTaskPracticeTrialFeedback" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.42)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Feedback" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouseTaskPracticeTrialFeedback" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseTaskPracticeTrialFeedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="summarizeTrialBlock">
      <RoutineSettingsComponent name="summarizeTrialBlock" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="summarizeTrialBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeSummarizeTrialBlock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if not has_finished_instruction:&amp;#10;    has_finished_instruction = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeSummarizeTrialBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="drift_check">
      <RoutineSettingsComponent name="drift_check" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="drift_check" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="drift_check_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="[scn_width, scn_height];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if eyetracking == 1:&amp;#10;    # drift-check and re-do camera setup if ESCAPE is pressed&amp;#10;    try:&amp;#10;        error = el_tracker.doDriftCorrect(int(scn_width/2.0),&amp;#10;                                          int(scn_height/2.0), 1, 1)&amp;#10;        # break following a success drift-check&amp;#10;    except:&amp;#10;        continue&amp;#10;    # put tracker in idle/offline mode before recording&amp;#10;    el_tracker.setOfflineMode()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="drift_check_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="backupSave">
      <RoutineSettingsComponent name="backupSave" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="backupSave" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeBackupSave" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="BACKUP_PATH = os.path.join(BACKUP_FOLDER_PATH, f'{BACKUP_IDX+1}.csv')&amp;#10;BACKUP_IDX = (BACKUP_IDX + 1) % N_BACKUPS&amp;#10;thisExp.saveAsWideText(&amp;#10;    fileName=BACKUP_PATH, &amp;#10;    appendFile=False, &amp;#10;    fileCollisionMethod='overwrite')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeBackupSave" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="connectEL">
      <RoutineSettingsComponent name="connectEL" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="connectEL" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="connectTracker" plugin="None">
        <Param val="import platform&amp;#10;from PIL import Image  # for preparing the Host backdrop image&amp;#10;from string import ascii_letters&amp;#10;import time&amp;#10;&amp;#10;# import eyelink libs&amp;#10;import pylink&amp;#10;from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# this is adapted from the SR research's eyelink tutorial code&amp;#10;#parameters to change&amp;#10;calib_style = 13 #9 for head fixed, 13 for remote &amp;#10;samprate = 1000 #250, 500, 1000, or 2000&amp;#10;calib_tar_size = 24 #size for the calibration target&amp;#10;&amp;#10;&quot;&quot;&quot;change this&quot;&quot;&quot;&amp;#10;width_param = 53.0 &amp;#10;distance_param =70.0&amp;#10;&amp;#10;&amp;#10;#create a folder to store all edf files, call this folder 'results'&amp;#10;edf_folder = 'C:/Users/siy009/Documents/elRaw_sihanYueying'&amp;#10;if not os.path.exists(edf_folder):&amp;#10;    os.makedirs(edf_folder)&amp;#10;&amp;#10;# We download EDF data file from the EyeLink Host PC to the local hard&amp;#10;# drive at the end of each testing session, here we rename the EDF to&amp;#10;# include session start date/time&amp;#10;time_str = time.strftime(&quot;_%Y_%m_%d_%H_%M&quot;, time.localtime())&amp;#10;session_identifier = str(expInfo['participant']) + time_str&amp;#10;&amp;#10;# create a folder for the current testing session in the &quot;results&quot; folder&amp;#10;session_folder = os.path.join(edf_folder, session_identifier)&amp;#10;if not os.path.exists(session_folder):&amp;#10;    os.makedirs(session_folder)&amp;#10;&amp;#10;&amp;#10;#helper function for displaying text&amp;#10;def clear_screen(win):&amp;#10;    &quot;&quot;&quot; clear up the PsychoPy window&quot;&quot;&quot;&amp;#10;&amp;#10;    win.fillColor = genv.getBackgroundColor()&amp;#10;    win.flip()&amp;#10;def show_msg(win, text, wait_for_keypress=True):&amp;#10;    &quot;&quot;&quot; Show task instructions on screen&quot;&quot;&quot;&amp;#10;&amp;#10;    msg = visual.TextStim(win, text,&amp;#10;                          color=genv.getForegroundColor(),&amp;#10;                          wrapWidth=scn_width/2)&amp;#10;    clear_screen(win)&amp;#10;    msg.draw()&amp;#10;    win.flip()&amp;#10;&amp;#10;    # wait indefinitely, terminates upon any key press&amp;#10;    if wait_for_keypress:&amp;#10;        event.waitKeys(keyList = ['space','escape'],maxWait = 60)&amp;#10;        clear_screen(win)&amp;#10;     &amp;#10;#function to terminate task and retrieve the EDF data file from the host PC and &amp;#10;#download to the display pc&amp;#10;def terminate_task():&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    if el_tracker.isConnected():&amp;#10;&amp;#10;        # Put tracker in Offline mode&amp;#10;        el_tracker.setOfflineMode()&amp;#10;&amp;#10;        # Clear the Host PC screen and wait for 500 ms&amp;#10;        el_tracker.sendCommand('clear_screen 0')&amp;#10;        pylink.msecDelay(500)&amp;#10;&amp;#10;        # Close the edf data file on the Host&amp;#10;        el_tracker.closeDataFile()&amp;#10;&amp;#10;        # Show a file transfer message on the screen&amp;#10;        msg = 'EDF data is transferring from EyeLink Host PC...'&amp;#10;        show_msg(win, msg, wait_for_keypress=False)&amp;#10;&amp;#10;        # Download the EDF data file from the Host PC to a local data folder&amp;#10;        # parameters: source_file_on_the_host, destination_file_on_local_drive&amp;#10;        local_edf = os.path.join(session_folder, session_identifier + '.EDF')&amp;#10;        try:&amp;#10;            el_tracker.receiveDataFile(edf_file, local_edf)&amp;#10;        except RuntimeError as error:&amp;#10;            print('ERROR:', error)&amp;#10;&amp;#10;        # Close the link to the tracker.&amp;#10;        el_tracker.close()&amp;#10;&amp;#10;    # close the PsychoPy window&amp;#10;    win.close()&amp;#10;&amp;#10;    # quit PsychoPy&amp;#10;    core.quit()&amp;#10;    sys.exit()&amp;#10;    &amp;#10;def abort_trial():&amp;#10;    &quot;&quot;&quot;Ends recording &quot;&quot;&quot;&amp;#10;&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    # Stop recording&amp;#10;    if el_tracker.isRecording():&amp;#10;        # add 100 ms to catch final trial events&amp;#10;        pylink.pumpDelay(100)&amp;#10;        el_tracker.stopRecording()&amp;#10;&amp;#10;    # clear the screen&amp;#10;    clear_screen(win)&amp;#10;    # Send a message to clear the Data Viewer screen&amp;#10;    bgcolor_RGB = (116, 116, 116)&amp;#10;    el_tracker.sendMessage('!V CLEAR %d %d %d' % bgcolor_RGB)&amp;#10;&amp;#10;    # send a message to mark trial end&amp;#10;    el_tracker.sendMessage('TRIAL_RESULT %d' % pylink.TRIAL_ERROR)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Step 1: Connect to the EyeLink Host PC&amp;#10;host_ip = &quot;100.1.1.1&quot;&amp;#10;if eyetracking == 1:&amp;#10;    try:&amp;#10;        el_tracker = pylink.EyeLink(host_ip)&amp;#10;    except RuntimeError as error:&amp;#10;        print('ERROR:', error)&amp;#10;        core.quit()&amp;#10;        sys.exit()&amp;#10;        &amp;#10;    #if already opened edf file, dont do this again&amp;#10;    if TasktypeLoop.thisN == 0 : &amp;#10;        # Step 2: Open an EDF data file on the Host PC&amp;#10;        edf_file = str(expInfo['participant']) + &quot;.EDF&quot;&amp;#10;        try:&amp;#10;            el_tracker.openDataFile(edf_file)&amp;#10;        except RuntimeError as err:&amp;#10;            print('ERROR:', err)&amp;#10;            # close the link if we have one open&amp;#10;            if el_tracker.isConnected():&amp;#10;                el_tracker.close()&amp;#10;            core.quit()&amp;#10;            sys.exit()&amp;#10;&amp;#10;    # Step 3: Configure the tracker&amp;#10;    # Put the tracker in offline mode before we change tracking parameters&amp;#10;    el_tracker.setOfflineMode()&amp;#10;    # File and Link data control&amp;#10;    # what eye events to save in the EDF file, include everything by default&amp;#10;    file_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'&amp;#10;    file_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,HREF,RAW,PUPIL,AREA,HTARGET,STATUS,INPUT'&amp;#10;    # what eye events to make available over the link, include everything by default&amp;#10;    link_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,FIXUPDATE,INPUT'&amp;#10;    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT'&amp;#10;    el_tracker.sendCommand(&quot;file_event_filter = %s&quot; % file_event_flags)&amp;#10;    el_tracker.sendCommand(&quot;file_sample_data = %s&quot; % file_sample_flags)&amp;#10;    el_tracker.sendCommand(&quot;link_event_filter = %s&quot; % link_event_flags)&amp;#10;    el_tracker.sendCommand(&quot;link_sample_data = %s&quot; % link_sample_flags)&amp;#10;    #set calibration style&amp;#10;    el_tracker.sendCommand(&quot;calibration_type = HV%s&quot; % str(calib_style))&amp;#10;    #set sampling rate&amp;#10;    el_tracker.sendCommand(&quot;sample_rate %s&quot; % str(samprate))&amp;#10; &amp;#10;    # Step 4: set up a graphics environment for calibration&amp;#10;    # get the native screen resolution used by PsychoPy&amp;#10;    scn_width, scn_height = win.size&amp;#10;    # resolution fix for Mac retina displays&amp;#10;    if 'Darwin' in platform.system():&amp;#10;        if use_retina:&amp;#10;            scn_width = int(scn_width/2.0)&amp;#10;            scn_height = int(scn_height/2.0)&amp;#10;    # Pass the display pixel coordinates (left, top, right, bottom) to the tracker&amp;#10;    el_coords = &quot;screen_pixel_coords = 0 0 %d %d&quot; % (scn_width - 1, scn_height - 1)&amp;#10;    el_tracker.sendCommand(el_coords)&amp;#10;    # Write a DISPLAY_COORDS message to the EDF file&amp;#10;    # Data Viewer needs this piece of info for proper visualization&amp;#10;    dv_coords = &quot;DISPLAY_COORDS  0 0 %d %d&quot; % (scn_width - 1, scn_height - 1)&amp;#10;    el_tracker.sendMessage(dv_coords)&amp;#10;    &amp;#10;    if TasktypeLoop.thisN == 0:### added to handle 2 calibs&amp;#10;        # Configure a graphics environment (genv) for tracker calibration&amp;#10;        genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)&amp;#10;        # Set background and foreground colors for the calibration target&amp;#10;        # in PsychoPy, (-1, -1, -1)=black, (1, 1, 1)=white, (0, 0, 0)=mid-gray&amp;#10;        foreground_color = (-1, -1, -1)&amp;#10;        background_color = win.color&amp;#10;        genv.setCalibrationColors(foreground_color, background_color)&amp;#10;        genv.setTargetSize(calib_tar_size)&amp;#10;        # Request Pylink to use the PsychoPy window we opened above for calibration&amp;#10;        pylink.openGraphicsEx(genv)&amp;#10;    task_msg = 'Press &lt;space&gt;, then &lt;enter&gt; to start calibration'&amp;#10;    show_msg(win, task_msg)&amp;#10;    print('line69')&amp;#10;    &amp;#10;    try:&amp;#10;        el_tracker.doTrackerSetup()&amp;#10;    except RuntimeError as err:&amp;#10;        print('ERROR:', err)&amp;#10;        el_tracker.exitCalibration()&amp;#10;    &amp;#10;else:&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#dont record yet&amp;#10;if eyetracking == 1:&amp;#10;    el_tracker.setOfflineMode()&amp;#10;win.mouseVisible = True&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="connectTracker" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="breakTime">
      <RoutineSettingsComponent name="breakTime" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="breakTime" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="textBreakTime" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textBreakTime" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Now we will pause to take a longer break.&amp;#10;Please inform the experimenter first." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="keyBreakTime" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyBreakTime" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="terminateExp">
      <RoutineSettingsComponent name="terminateExp" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="terminateExp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="closeEl" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((eyetracking === 1)) {&amp;#10;    terminate_task();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if eyetracking == 1:&amp;#10;    &amp;#10;    # Step 7: disconnect, download the EDF file, then terminate the task&amp;#10;    terminate_task()&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="closeEl" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="prepareComponents"/>
    <Routine name="prepareQuiz"/>
    <Routine name="prepareExperiment"/>
    <Routine name="prepareTrialConfig"/>
    <LoopInitiator loopType="TrialHandler" name="DEBUG">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="DEBUG" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practiceFreeDrawing"/>
    <Routine name="fullInstruction"/>
    <Routine name="startModeInstr"/>
    <LoopInitiator loopType="TrialHandler" name="response_instruction_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_response_modes_allowed" valType="num"/>
      <Param name="name" updates="None" val="response_instruction_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="responseInstruction"/>
    <Routine name="prepareModePractice"/>
    <LoopInitiator loopType="TrialHandler" name="practiceOneStim">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_one_stim_practice" valType="num"/>
      <Param name="name" updates="None" val="practiceOneStim" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayOneStim"/>
    <Routine name="feedbackOneStim"/>
    <LoopTerminator name="practiceOneStim"/>
    <LoopTerminator name="response_instruction_loop"/>
    <Routine name="prepareAllPractice"/>
    <Routine name="startColorRulePractice"/>
    <Routine name="overviewColorRule"/>
    <LoopInitiator loopType="TrialHandler" name="practiceColorRuleLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_response_modes_allowed" valType="num"/>
      <Param name="name" updates="None" val="practiceColorRuleLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepareColorRulePractice"/>
    <LoopInitiator loopType="TrialHandler" name="ColorRulePracticeTrials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_color_rule_practice " valType="num"/>
      <Param name="name" updates="None" val="ColorRulePracticeTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="colorRuleStimDisplayLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="colorRuleStimDisplayLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="colorRuleStim"/>
    <Routine name="colorRuleDelay"/>
    <LoopTerminator name="colorRuleStimDisplayLoop"/>
    <Routine name="colorRuleResponse"/>
    <Routine name="colorRuleFeedback"/>
    <LoopTerminator name="ColorRulePracticeTrials"/>
    <LoopTerminator name="practiceColorRuleLoop"/>
    <LoopTerminator name="DEBUG"/>
    <LoopInitiator loopType="TrialHandler" name="TasktypeLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="max(1, n_trial_types_allowed)" valType="num"/>
      <Param name="name" updates="None" val="TasktypeLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="taskStart"/>
    <Routine name="taskInstructionText"/>
    <LoopInitiator loopType="TrialHandler" name="TaskInstrLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="max(0, n_response_modes_allowed)" valType="num"/>
      <Param name="name" updates="None" val="TaskInstrLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="taskInstructionDiagram"/>
    <Routine name="prepareTaskInstrPractice"/>
    <LoopInitiator loopType="TrialHandler" name="taskPracticeBlockLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="max_instruction_practice_loop" valType="num"/>
      <Param name="name" updates="None" val="taskPracticeBlockLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="startPracticeBlock"/>
    <LoopInitiator loopType="TrialHandler" name="taskPracticeTrialLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_trials_to_practice" valType="num"/>
      <Param name="name" updates="None" val="taskPracticeTrialLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepareSinglePracticeTrial"/>
    <LoopInitiator loopType="TrialHandler" name="taskPracticeStimLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="taskPracticeStimLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="taskPracticeStim"/>
    <Routine name="taskPracticeStimDelay"/>
    <LoopTerminator name="taskPracticeStimLoop"/>
    <Routine name="taskPracticeResponse"/>
    <Routine name="taskPracticeTrialFeedback"/>
    <LoopTerminator name="taskPracticeTrialLoop"/>
    <Routine name="summarizeTrialBlock"/>
    <LoopTerminator name="taskPracticeBlockLoop"/>
    <LoopTerminator name="TaskInstrLoop"/>
    <Routine name="connectEL"/>
    <LoopInitiator loopType="TrialHandler" name="ActualTaskLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="max(0, n_response_modes_allowed)" valType="num"/>
      <Param name="name" updates="None" val="ActualTaskLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepareTaskPhase"/>
    <LoopInitiator loopType="TrialHandler" name="sub_sample_stage_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_sampling_strategies_allowed" valType="num"/>
      <Param name="name" updates="None" val="sub_sample_stage_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepareSubSampleStage"/>
    <LoopInitiator loopType="TrialHandler" name="block_stage">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_blocks_each_subtype" valType="num"/>
      <Param name="name" updates="None" val="block_stage" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepare_block"/>
    <Routine name="drift_check"/>
    <LoopInitiator loopType="TrialHandler" name="block">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_trials_each_block" valType="num"/>
      <Param name="name" updates="None" val="block" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepareSingleTrial"/>
    <Routine name="pre_trial"/>
    <LoopInitiator loopType="TrialHandler" name="seq_display_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="seq_display_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="display_stimuli"/>
    <Routine name="delayAfterStim"/>
    <LoopTerminator name="seq_display_loop"/>
    <Routine name="delay"/>
    <Routine name="response"/>
    <Routine name="post_trial"/>
    <Routine name="backupSave"/>
    <LoopTerminator name="block"/>
    <Routine name="block_feedback"/>
    <LoopTerminator name="block_stage"/>
    <LoopTerminator name="sub_sample_stage_loop"/>
    <LoopTerminator name="ActualTaskLoop"/>
    <LoopInitiator loopType="TrialHandler" name="breakTimeLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="TasktypeLoop.nTotal &gt; (TasktypeLoop.thisN+1)" valType="num"/>
      <Param name="name" updates="None" val="breakTimeLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="breakTime"/>
    <LoopTerminator name="breakTimeLoop"/>
    <LoopTerminator name="TasktypeLoop"/>
    <Routine name="terminateExp"/>
  </Flow>
</PsychoPy2experiment>
