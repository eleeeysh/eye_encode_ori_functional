<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2025.1.1">
  <Settings>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001', 'dominant_hand': &quot;'right','left'&quot;}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[2560, 1440]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="ClickOnly" valType="str" updates="None" name="expName"/>
    <Param val="" valType="str" updates="None" name="expVersion"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="prepareExp">
      <RoutineSettingsComponent name="prepareExp" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareExp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareExp" plugin="None">
        <Param val="import random&amp;#10;import numpy as np&amp;#10;import itertools&amp;#10;import math&amp;#10;&amp;#10;&quot;&quot;&quot; For sampling &quot;&quot;&quot;&amp;#10;class SimplePerturbationLoader:&amp;#10;    def __init__(self):&amp;#10;        # create stimulus samples&amp;#10;        self.stim_ranges = [&amp;#10;            [12, 36],&amp;#10;            [54, 78],&amp;#10;            [102, 126],&amp;#10;            [144, 168],&amp;#10;        ]&amp;#10;        self.n_sample_per_range = 5&amp;#10;        self.stim_samples = [&amp;#10;            np.linspace(s[0], s[1], self.n_sample_per_range) &amp;#10;            for s in self.stim_ranges]&amp;#10;        &amp;#10;        # create perturbation sampling range&amp;#10;        self.perturbations = [&amp;#10;            (1, 1), # quadrant 1&amp;#10;            (-1, 1), # quadrant 2&amp;#10;            (-1, -1), # quadrant 3&amp;#10;            (1, -1), # quadrant 4&amp;#10;        ]&amp;#10;        &amp;#10;        # set other configurations&amp;#10;        self.jittering = 2&amp;#10;        &amp;#10;    def stim_add_noise(self, xs):&amp;#10;        noise = np.random.uniform(low=-1, high=1, size=xs.shape) * self.jittering&amp;#10;        return xs + noise&amp;#10;        &amp;#10;    def generate_one_batch_stims(self):&amp;#10;        stim_list = np.concatenate(self.stim_samples)&amp;#10;        # add some noise&amp;#10;        sampled_stims = self.stim_add_noise(stim_list)&amp;#10;        # combination&amp;#10;        combinations = list(itertools.product(sampled_stims, self.perturbations))&amp;#10;        random.shuffle(combinations)&amp;#10;        return combinations&amp;#10;        &amp;#10;&quot;&quot;&quot; For calibration &quot;&quot;&quot;&amp;#10;class DefaultFixation:&amp;#10;    def __init__(self, window):&amp;#10;        self.fixation = visual.ShapeStim(&amp;#10;            win=window, vertices='cross',&amp;#10;            size=(0.06, 0.06), lineWidth=1,&amp;#10;            lineColor='white', fillColor='white')&amp;#10;&amp;#10;    def draw(self):&amp;#10;        self.fixation.draw()&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# set configrations&amp;#10;N_REPEATS = 4&amp;#10;N_REPEAT_BLOCK = 40 # FOR DEBUGGING, 4 will be decent?&amp;#10;FIXATION_LENGTH = 1&amp;#10;STIM_LENGTH = 0.75&amp;#10;MASK_LENGTH = 0.5&amp;#10;DELAY_LENGTH = 5&amp;#10;enforce_response_time_limit = True&amp;#10;MAX_RESP_TIME = 20&amp;#10;&amp;#10;# read exp settings&amp;#10;dominant_hand = expInfo['dominant_hand']&amp;#10;is_right_handed = dominant_hand == 'right'&amp;#10;&amp;#10;# add managers&amp;#10;stim_perturb_loader = SimplePerturbationLoader()&amp;#10;&amp;#10;# some configuration for display&amp;#10;PATCH_RADIUS = 0.16&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# now generate the stimuli and perturbations&amp;#10;all_repeats_stims = []&amp;#10;BLOCK_SIZE = 0&amp;#10;for _ in range(N_REPEATS):&amp;#10;    # generate stims and perturbations&amp;#10;    stim_perturb_list = stim_perturb_loader.generate_one_batch_stims()&amp;#10;    # cut into blocks&amp;#10;    assert len(stim_perturb_list) % N_REPEAT_BLOCK == 0&amp;#10;    BLOCK_SIZE = len(stim_perturb_list) // N_REPEAT_BLOCK&amp;#10;    for i in range(N_REPEAT_BLOCK):&amp;#10;        all_repeats_stims.append(stim_perturb_list[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE])&amp;#10;&amp;#10;N_BLOCKS = len(all_repeats_stims)&amp;#10;&amp;#10;# also determine the type of perturbation (overt vs covert)&amp;#10;PERTURB_TYPE_CANDIDATES = ['overt', 'covert']&amp;#10;N_PERTURB_TYPES = len(PERTURB_TYPE_CANDIDATES)&amp;#10;all_perturb_types = (PERTURB_TYPE_CANDIDATES * &amp;#10;    ((N_BLOCKS + N_PERTURB_TYPES - 1) // N_PERTURB_TYPES))[:N_BLOCKS]&amp;#10;&amp;#10;logging.info(N_BLOCKS)&amp;#10;&amp;#10;        &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareExp" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Display">
      <RoutineSettingsComponent name="Display" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Display" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeDisplay" plugin="None">
        <Param val="# define the function to display the stimuli&amp;#10;class StimObj:&amp;#10;    def __init__(self, window, loc, radius):&amp;#10;        self.grating = visual.GratingStim(&amp;#10;            win=window, tex='sin', mask='gauss', &amp;#10;            sf=5.0, size=radius*2, &amp;#10;            ori=0, pos=loc)&amp;#10;    &amp;#10;    def setOri(self, ori):&amp;#10;        self.grating.setOri(ori)&amp;#10;        &amp;#10;    def draw(self):&amp;#10;        self.grating.draw()" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="stim_obj = StimObj(win, [0, 0], PATCH_RADIUS)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="stim_deg = cur_block_stim_perturbs[cur_trial_i][0]&amp;#10;stim_obj.setOri(stim_deg)&amp;#10;thisExp.addData('stim', stim_deg)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="stim_obj.draw()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDisplay" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="textDisplayPlaceholder" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="textDisplayPlaceholder" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="STIM_LENGTH" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </TextboxComponent>
    </Routine>
    <Routine name="Delay">
      <RoutineSettingsComponent name="Delay" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Delay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="keyDelay" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyDelay" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="DELAY_LENGTH" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="codeDelay" plugin="None">
        <Param val="&quot;&quot;&quot; For generating perturbations &quot;&quot;&quot;&amp;#10;NRINGS_ALLOWED = [3, 4]&amp;#10;PERTURB_SIZE = 0.05&amp;#10;&amp;#10;class MultiRings:&amp;#10;    &quot;&quot;&quot; cocentric rings &quot;&quot;&quot;&amp;#10;    def __init__(self, win, nrings, radius):&amp;#10;        self.radius = radius&amp;#10;        self.rings = []&amp;#10;        self.nrings = nrings&amp;#10;        &amp;#10;        # create circles&amp;#10;        for i in range(nrings):&amp;#10;            ring = visual.Circle(&amp;#10;                win,&amp;#10;                radius=0.5,&amp;#10;                pos=(0, 0),&amp;#10;                lineColor='white',&amp;#10;                fillColor=None,&amp;#10;                lineWidth=1.5&amp;#10;            )&amp;#10;            self.rings.append(ring)&amp;#10;        &amp;#10;        # set radius&amp;#10;        self.setRadius(radius)&amp;#10;        self.setPos([0, 0])&amp;#10;            &amp;#10;    def setRadius(self, radius):&amp;#10;        self.radius = radius&amp;#10;        ring_spacing = self.radius / (self.nrings)&amp;#10;        for i, ring in enumerate(self.rings):&amp;#10;            radius = ring_spacing * (i + 1)&amp;#10;            ring.setRadius(radius)&amp;#10;    &amp;#10;    def setPos(self, pos):&amp;#10;        self.pos = pos&amp;#10;        for ring in self.rings:&amp;#10;            ring.setPos(pos)&amp;#10;&amp;#10;    def draw(self):&amp;#10;        for ring in self.rings:&amp;#10;            ring.draw()&amp;#10;            &amp;#10;class MultiRingManager:&amp;#10;    &quot;&quot;&quot; a bunch of cocentric rings for perturbation&quot;&quot;&quot;&amp;#10;    def __init__(self, win, radius):&amp;#10;        self.fixed_radius = radius&amp;#10;        self.ratio_min, self.ratio_max = 0.9, 1.1&amp;#10;        self.ring_patterns = {}&amp;#10;        self.nrings = NRINGS_ALLOWED[:]&amp;#10;        for nring in self.nrings:&amp;#10;            self.ring_patterns[nring] = MultiRings(&amp;#10;                win, nring, radius)&amp;#10;                &amp;#10;        # set an initial default rings&amp;#10;        self.resample()&amp;#10;                &amp;#10;    def resample(self):&amp;#10;        sample_n = np.random.choice(self.nrings)&amp;#10;        sampled = self.ring_patterns[sample_n]&amp;#10;        self.target_n = sample_n&amp;#10;        self.target_rings = sampled&amp;#10;        self.radius = self.target_rings.radius&amp;#10;        self.pos = self.target_rings.pos&amp;#10;        return sample_n&amp;#10;&amp;#10;    def setRadius(self, new_radius):&amp;#10;        self.target_rings.setRadius(new_radius)&amp;#10;        self.radius = new_radius&amp;#10;        &amp;#10;    def setPos(self, new_pos):&amp;#10;        self.target_rings.setPos(new_pos)&amp;#10;        self.pos = new_pos&amp;#10;&amp;#10;    def draw(self):&amp;#10;        self.target_rings.draw()&amp;#10;&amp;#10;class SinglePerturbItemManager:&amp;#10;    def __init__(self, win, item_type):&amp;#10;        self.perturb_scale_range = [0.1, 0.25]&amp;#10;        self.scale_ratio_range = [0.9, 1.1]&amp;#10;        self.item_size = PERTURB_SIZE&amp;#10;        &amp;#10;        # other properties&amp;#10;        self.has_ori = False&amp;#10;        self.scalable = False&amp;#10;        self.multi_sample = False&amp;#10;        &amp;#10;        # load resources&amp;#10;        if item_type == 'landolt':&amp;#10;            self.has_ori = True&amp;#10;            self.img = visual.ImageStim(&amp;#10;                win, image='resources/landolt_white.png', &amp;#10;                pos=(0, 0),&amp;#10;                ori=0,&amp;#10;                size=(self.item_size, self.item_size))&amp;#10;        elif item_type == 'circle':&amp;#10;            self.img = visual.Circle(&amp;#10;                win, radius=self.item_size/2,&amp;#10;                pos=(0, 0),&amp;#10;                lineColor='white',&amp;#10;                fillColor='white'&amp;#10;            )&amp;#10;        elif item_type == 'rings':&amp;#10;            self.multi_sample = True&amp;#10;            self.scalable = True&amp;#10;            self.img = MultiRingManager(win, self.item_size/2)&amp;#10;        else:&amp;#10;            raise NotImplementedError&amp;#10;            &amp;#10;    def generate_scaled_radius(self):&amp;#10;        scale_ratio = np.random.uniform(&amp;#10;            self.scale_ratio_range[0], &amp;#10;            self.scale_ratio_range[1])&amp;#10;        new_radius = self.item_size / 2 * scale_ratio&amp;#10;        return new_radius&amp;#10;        &amp;#10;    def generate_perturb_position(self, perturb_code):&amp;#10;        perturb_center = np.random.uniform(&amp;#10;            self.perturb_scale_range[0],&amp;#10;            self.perturb_scale_range[1],&amp;#10;            size=2&amp;#10;        ) * np.array(perturb_code) # center of perturbation&amp;#10;        return perturb_center&amp;#10;        &amp;#10;    def move(self, perturb_code):&amp;#10;        perturb_info = {}&amp;#10;        &amp;#10;        ## change appearance&amp;#10;        if self.multi_sample:&amp;#10;            sample_id = self.img.resample()&amp;#10;            perturb_info['sample_id'] = sample_id&amp;#10;        &amp;#10;        ## position&amp;#10;        center = self.generate_perturb_position(perturb_code)&amp;#10;        perturb_info['pos'] = center&amp;#10;        perturb_info['radius'] = self.item_size/2&amp;#10;        self.img.setPos(center)&amp;#10;        &amp;#10;        ## scale it (if allowed)&amp;#10;        if self.scalable:&amp;#10;            new_radius = self.generate_scaled_radius()&amp;#10;            self.img.setRadius(new_radius)&amp;#10;            perturb_info['radius'] = new_radius&amp;#10;        &amp;#10;        ## rotation&amp;#10;        if self.has_ori:&amp;#10;            rotation = np.random.randint(10, 170) * (np.random.randint(2)+1) # avoid ambiguous&amp;#10;            self.img.ori = rotation&amp;#10;            perturb_info['ori'] = rotation&amp;#10;        &amp;#10;        return self.img, perturb_info&amp;#10;        &amp;#10;class PerturbItemManager:&amp;#10;    def __init__(self, win):&amp;#10;        # a few things needed&amp;#10;        self.rings = SinglePerturbItemManager(win, 'rings')&amp;#10;        # self.landolt = SinglePerturbItemManager(win, 'landolt')&amp;#10;        self.circle = SinglePerturbItemManager(win, 'circle')&amp;#10;        self.center = SinglePerturbItemManager(win, 'circle')&amp;#10;        self.reset()&amp;#10;    &amp;#10;    def reset(self):&amp;#10;        self.center.move([0, 0])&amp;#10;        self.active_items = [self.center,]&amp;#10;        &amp;#10;    def update(self, is_task, perturb_code):&amp;#10;        draw_item, move_info = None, None&amp;#10;        self.reset()&amp;#10;        if perturb_code is not None:&amp;#10;            if is_task: # overt movement&amp;#10;                # draw_item, move_info = self.landolt.move(perturb_code)&amp;#10;                draw_item, move_info = self.rings.move(perturb_code)&amp;#10;            else: # covert movement&amp;#10;                draw_item, move_info = self.circle.move(perturb_code)&amp;#10;        else:&amp;#10;            if is_task: # judgement at center&amp;#10;                # draw_item, move_info = self.landolt.move([0, 0])&amp;#10;                draw_item, move_info = self.rings.move([0, 0])&amp;#10;            else:&amp;#10;                draw_item, move_info = self.center.move([0, 0])&amp;#10;        self.active_items = [draw_item,]&amp;#10;        return move_info&amp;#10;        &amp;#10;    def draw(self):&amp;#10;        for item in self.active_items:&amp;#10;            item.draw()&amp;#10;&amp;#10;&amp;#10;class PerturbSchedueler:&amp;#10;    def __init__(self, win, timing_settings, delay_length):&amp;#10;        self.perturb_item_manager = PerturbItemManager(win)&amp;#10;        self.n_perturb = timing_settings['n_perturb']&amp;#10;        self.n_judge = timing_settings['n_judge']&amp;#10;        self.per_t_min, self.per_t_max = timing_settings['duration']&amp;#10;        self.earliest, self.latest = timing_settings['timing']&amp;#10;        self.min_gap = timing_settings['min_gap']&amp;#10;        self.delay_length = delay_length&amp;#10;        &amp;#10;        self.clear_schedule()&amp;#10;        &amp;#10;    def clear_schedule(self):&amp;#10;        # reset schedule&amp;#10;        self.schedule = None&amp;#10;        self.records = None&amp;#10;        self.current_id = -1&amp;#10;        self.last_record_id = -1&amp;#10;        self.on = False&amp;#10;        self.require_input = False&amp;#10;        self.perturb_type = None&amp;#10;&amp;#10;    def reset_schedule(self, perturb_type):&amp;#10;        self.clear_schedule()&amp;#10;        self.perturb_item_manager.reset()&amp;#10;        self.schedule = []&amp;#10;        self.records = {'judge': [], 'perturb': []}&amp;#10;        &amp;#10;        # determine duration of each epochs&amp;#10;        assert self.delay_length &gt;= self.latest&amp;#10;        self.perturb_type = perturb_type&amp;#10;        if self.perturb_type == 'covert':&amp;#10;            self.n_events = self.n_perturb + self.n_judge&amp;#10;        elif self.perturb_type == 'overt':&amp;#10;            assert self.n_perturb == self.n_judge&amp;#10;            self.n_events = self.n_perturb&amp;#10;        assert (&amp;#10;            self.n_events * self.per_t_max + &amp;#10;            (self.n_events-1) * self.min_gap +&amp;#10;            self.earliest) &lt;= self.latest&amp;#10;        durations = np.random.uniform(&amp;#10;            self.per_t_min, self.per_t_max, &amp;#10;            size=self.n_events&amp;#10;        )&amp;#10;        &amp;#10;        # sample the start points&amp;#10;        reduced_duration = self.latest - self.earliest - np.sum(&amp;#10;            durations) - (self.n_events-1) * self.min_gap&amp;#10;        starts = np.random.uniform(0, reduced_duration, size=self.n_events)&amp;#10;        starts = np.sort(starts)&amp;#10;        &amp;#10;        # get time start end for each&amp;#10;        t_overhead = self.earliest&amp;#10;        for i in range(self.n_events):&amp;#10;            start_t = t_overhead + starts[i]&amp;#10;            end_t = start_t + durations[i]&amp;#10;            self.schedule.append([start_t, end_t])&amp;#10;            t_overhead += self.min_gap &amp;#10;            t_overhead += end_t - start_t&amp;#10;            &amp;#10;        # finally, decided which is task and which is perturb&amp;#10;        self.perturb_type_codes = [] # each pair: is_task + is_perturb&amp;#10;        if self.perturb_type == 'overt':&amp;#10;            self.perturb_type_codes += [&amp;#10;                {'is_task': True, 'is_perturb': True} for _ in range(self.n_events)]&amp;#10;        elif self.perturb_type == 'covert':&amp;#10;            self.perturb_type_codes += [&amp;#10;                {'is_task': False, 'is_perturb': True} for _ in range(self.n_perturb)]&amp;#10;            self.perturb_type_codes += [&amp;#10;                {'is_task': True, 'is_perturb': False} for _ in range(self.n_judge)]&amp;#10;            random.shuffle(self.perturb_type_codes)&amp;#10;            &amp;#10;        # other stuffs&amp;#10;        self.current_id = 0&amp;#10;        &amp;#10;    def check_schedule(self, t, perturb_code):&amp;#10;        # return the event the current t is in&amp;#10;        # check whether it's on or off&amp;#10;        n_total = len(self.schedule)&amp;#10;        if self.current_id &lt; n_total:&amp;#10;            epoch = self.schedule[self.current_id]&amp;#10;            if t &lt; epoch[0]:&amp;#10;                self.on = False&amp;#10;            elif t &gt; epoch[1]:&amp;#10;                self.on = False&amp;#10;                while self.current_id &lt; n_total-1 and t &gt; epoch[1]:&amp;#10;                    # find the next match&amp;#10;                    self.current_id += 1&amp;#10;                    epoch = self.schedule[self.current_id]&amp;#10;            else:&amp;#10;                self.on = True&amp;#10;        else:&amp;#10;            self.on = False&amp;#10;        &amp;#10;        if self.on:&amp;#10;            # currently something is happening&amp;#10;            current_perturb_type_codes = self.perturb_type_codes[&amp;#10;                    self.current_id]&amp;#10;            if self.current_id &gt; self.last_record_id:&amp;#10;                # there is something not plotted or recorded yet --&gt; update it&amp;#10;                is_task = current_perturb_type_codes['is_task']&amp;#10;                is_perturb = current_perturb_type_codes['is_perturb']&amp;#10;                perturb_code = perturb_code if is_perturb else None&amp;#10;                update_info = self.perturb_item_manager.update(&amp;#10;                    is_task = is_task,&amp;#10;                    perturb_code = perturb_code,&amp;#10;                )&amp;#10;                # append time info&amp;#10;                update_info['tstart'] = t # use actual start time&amp;#10;                update_info['tend'] = self.schedule[self.current_id][1]&amp;#10;                # send to records&amp;#10;                if is_task:&amp;#10;                    self.records['judge'].append(update_info.copy())&amp;#10;                if is_perturb:&amp;#10;                    self.records['perturb'].append(update_info.copy())&amp;#10;                # update all states&amp;#10;                self.last_record_id = self.current_id&amp;#10;                self.require_input = is_task&amp;#10;            &amp;#10;        else: # just give the center fixation&amp;#10;            self.perturb_item_manager.update(&amp;#10;                is_task = False,&amp;#10;                perturb_code = None,&amp;#10;            )&amp;#10;            self.require_input = False&amp;#10;&amp;#10;        self.perturb_item_manager.draw()&amp;#10;        &amp;#10;    def check_judge_left_right_correct(self, key_input, key_map):&amp;#10;        ans_is_left = self.records['judge'][-1]['ori'] &gt; 180&amp;#10;        ## check the key&amp;#10;        last_key = key_input[-1].name&amp;#10;        key_is_left = last_key.lower() == key_map[0]&amp;#10;        key_is_correct = key_is_left == ans_is_left&amp;#10;        return key_is_correct&amp;#10;        &amp;#10;    def check_judge_key_match(self, key_input):&amp;#10;        ans = str(self.records['judge'][-1]['sample_id'])&amp;#10;        ## check the key&amp;#10;        last_key = key_input[-1].name&amp;#10;        key_is_correct = last_key.lower() == ans&amp;#10;        return key_is_correct&amp;#10;&amp;#10;    def check_input(self, t, key_input, key_map):&amp;#10;        feedback = None&amp;#10;        if self.require_input:&amp;#10;            if key_input: # there is some input...&amp;#10;                # only care if input is required&amp;#10;                key_is_correct = self.check_judge_key_match(key_input)&amp;#10;                ## update the result&amp;#10;                self.records['judge'][-1]['ans_correct'] = key_is_correct&amp;#10;                self.records['judge'][-1]['rt'] = t - self.records['judge'][-1]['tstart']&amp;#10;                ## end it&amp;#10;                self.on = False&amp;#10;                self.require_input = False&amp;#10;                self.current_id += 1&amp;#10;                ## prepare feedback&amp;#10;                feedback = key_is_correct&amp;#10;            else:&amp;#10;                # TODO: ignore it?&amp;#10;                pass&amp;#10;        return feedback&amp;#10;                &amp;#10;         " valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# a few configurations&amp;#10;## number of perturbations during the delay&amp;#10;PERTURB_TIMING_SETTINGS = {&amp;#10;    'n_perturb': 1,&amp;#10;    'n_judge': 1,&amp;#10;    'duration': (1.0, 1.5),&amp;#10;    'timing': (0.5, 4.5),&amp;#10;    'min_gap': 0.1,&amp;#10;}&amp;#10;perturb_scheduler = PerturbSchedueler(&amp;#10;    win=win,&amp;#10;    timing_settings=PERTURB_TIMING_SETTINGS, &amp;#10;    delay_length=DELAY_LENGTH)&amp;#10;&amp;#10;## left / right hand mapping&amp;#10;# left_hand_keys = ['j', 'k'] # for left-handed&amp;#10;# right_hand_keys = ['a', 's'] # for right-handed&amp;#10;# assert len(left_hand_keys) == len(right_hand_keys)&amp;#10;# resp_key_map = right_hand_keys if is_right_handed else left_hand_keys&amp;#10;resp_key_map = [str(i) for i in NRINGS_ALLOWED]&amp;#10;&amp;#10;## load sound feedback&amp;#10;correct_sound = sound.Sound('bleep.wav')&amp;#10;wrong_sound   = sound.Sound('buzz.wav')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# set up the timing of displaying perturbations&amp;#10;perturb_scheduler.reset_schedule(cur_block_perturb_type)&amp;#10;&amp;#10;# get stim perturb codes&amp;#10;perturb_code = cur_block_stim_perturbs[cur_trial_i][1]&amp;#10;&amp;#10;# save info&amp;#10;thisExp.addData(&quot;perturb_code_x&quot;, perturb_code[0])&amp;#10;thisExp.addData(&quot;perturb_code_y&quot;, perturb_code[1])&amp;#10;thisExp.addData(&quot;perturb_type&quot;, cur_block_perturb_type)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# check schedule&amp;#10;perturb_scheduler.check_schedule(t, perturb_code)&amp;#10;&amp;#10;if perturb_scheduler.require_input:&amp;#10;    # read the keyboard input&amp;#10;    keys = keyDelay.getKeys(resp_key_map)&amp;#10;    perturb_feedback = perturb_scheduler.check_input(t, keys, resp_key_map)&amp;#10;    if perturb_feedback is not None:&amp;#10;        # there are some correct/incorrect feedback&amp;#10;        correct_sound.stop()&amp;#10;        wrong_sound.stop()&amp;#10;        if perturb_feedback:&amp;#10;            correct_sound.play()&amp;#10;        else:&amp;#10;            wrong_sound.play()&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# save all records&amp;#10;for record_type in ['judge', 'perturb']:&amp;#10;    records = perturb_scheduler.records[record_type]&amp;#10;    for i, record in enumerate(records):&amp;#10;        for k,v in record.items():&amp;#10;            thisExp.addData(f&quot;{record_type}_{i}_{k}&quot;, v)&amp;#10;&amp;#10;# also compute the accuracy&amp;#10;perturb_acc = np.mean(&amp;#10;    [s.get('ans_correct', False) for s in perturb_scheduler.records['judge']])&amp;#10;block_perturb_acc_records.append(perturb_acc)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDelay" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="textDelayPlaceholder" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="textDelayPlaceholder" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="DELAY_LENGTH " valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </TextboxComponent>
    </Routine>
    <Routine name="OriTest">
      <RoutineSettingsComponent name="OriTest" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="OriTest" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeOriTest" plugin="None">
        <Param val="# define the function to make report&amp;#10;# define the function to process mouse response&amp;#10;CLICK_RADIUS = 0.01&amp;#10;CLICK_REGION_FACTOR = 3&amp;#10;button_width = 0.1&amp;#10;button_height = 0.05&amp;#10;&amp;#10;def funcComputeOriDiff(s1, s2):&amp;#10;    diff = np.abs(s1 - s2) &amp;#10;    diff = np.min([diff, 180-diff])&amp;#10;    return diff&amp;#10;&amp;#10;class WheelClickRegister:&amp;#10;    def __init__(self, wheel, pos_point, opp_point, wheel_pos):&amp;#10;        self.wheel = wheel&amp;#10;        self.wheel_c = wheel_pos[0]&amp;#10;        self.wheel_r = wheel_pos[1]&amp;#10;        self.click_radius = wheel_pos[2]&amp;#10;        self.point_click_selected = pos_point&amp;#10;        self.opposite_point = opp_point&amp;#10;        self.clicks_x = []&amp;#10;        self.clicks_y = []&amp;#10;        self.clicks_time = []&amp;#10;        &amp;#10;        # flag for whether there are any response&amp;#10;        self.is_valid = True&amp;#10;        self.ever_have_response = False&amp;#10;        &amp;#10;        # initialize only the wheel&amp;#10;        self.wheel.setAutoDraw(True)&amp;#10;        self.point_click_selected.setAutoDraw(False)&amp;#10;        self.opposite_point.setAutoDraw(False)&amp;#10;   &amp;#10;    def register_click(self, mouse_position, mouse_time):&amp;#10;        mouse_x = mouse_position[0]&amp;#10;        mouse_y = mouse_position[1]&amp;#10;        mouse_r = math.sqrt(&amp;#10;            (mouse_x-self.wheel_c[0]) ** 2 +  &amp;#10;            (mouse_y-self.wheel_c[1]) ** 2)&amp;#10;&amp;#10;        click_min_r = self.wheel_r - self.click_radius * CLICK_REGION_FACTOR&amp;#10;        click_max_r = self.wheel_r + self.click_radius * CLICK_REGION_FACTOR&amp;#10;        if mouse_r &gt;= click_min_r and mouse_r &lt;= click_max_r:&amp;#10;            # the click is treated as a valid response&amp;#10;            self.ever_have_response = True&amp;#10;            &amp;#10;            pos_x_scaled = (mouse_x-self.wheel_c[0]) / mouse_r&amp;#10;            pos_y_scaled = (mouse_y-self.wheel_c[1]) / mouse_r&amp;#10;            pos_select_x = self.wheel_c[0] + pos_x_scaled * self.wheel_r&amp;#10;            pos_select_y = self.wheel_c[1] + pos_y_scaled * self.wheel_r&amp;#10;            opp_select_x = self.wheel_c[0] - pos_x_scaled * self.wheel_r&amp;#10;            opp_select_y = self.wheel_c[1] - pos_y_scaled * self.wheel_r&amp;#10;            &amp;#10;            if len(self.clicks_x) == 0:&amp;#10;                # initialize the two points&amp;#10;                self.point_click_selected.autoDraw = True&amp;#10;                self.opposite_point.autoDraw = True&amp;#10;            # update the position of two_points&amp;#10;            self.point_click_selected.setPos(&amp;#10;                (pos_select_x, pos_select_y))&amp;#10;            self.opposite_point.setPos(&amp;#10;                (opp_select_x, opp_select_y))&amp;#10;            # add the selected&amp;#10;            self.clicks_x.append(pos_x_scaled)&amp;#10;            self.clicks_y.append(pos_y_scaled)&amp;#10;            self.clicks_time.append(mouse_time)&amp;#10;            &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.wheel.setAutoDraw(autoDraw)&amp;#10;        self.point_click_selected.setAutoDraw(autoDraw)&amp;#10;        self.opposite_point.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;    def compute_response(self):&amp;#10;        # convert response to orientation&amp;#10;        if self.ever_have_response:&amp;#10;            x_resp = self.clicks_x[-1]&amp;#10;            y_resp = self.clicks_y[-1]&amp;#10;            rad = np.arctan2(y_resp, x_resp)&amp;#10;            deg = np.rad2deg(rad)&amp;#10;            deg = deg % 180&amp;#10;            deg = 90 - deg&amp;#10;            deg = deg % 180&amp;#10;            return deg&amp;#10;        else:&amp;#10;            return None&amp;#10;&amp;#10;def createPatch(window, pos, radius, fill_color='white', line_color='black'):&amp;#10;    scaled_border = radius * 10 / 0.2&amp;#10;    patch = visual.Circle(&amp;#10;        window, pos=pos, radius=radius,&amp;#10;        fillColor=fill_color, lineColor=line_color, colorSpace='rgb',&amp;#10;        lineWidth=scaled_border)&amp;#10;    return patch&amp;#10;&amp;#10;def funcDrawAdjustResponse(window, loc, draw_radius, click_radius):&amp;#10;    # set the drawing region&amp;#10;    ## for the wheel&amp;#10;    draw_area_x = loc[0]&amp;#10;    draw_area_y = loc[1]&amp;#10;    draw_area_bottom_y = draw_area_y - draw_radius&amp;#10;    wheel_pos = [&amp;#10;        (loc[0], loc[1]),&amp;#10;        draw_radius, click_radius]&amp;#10;    wheel_color = 'white'&amp;#10;    wheel = createPatch(&amp;#10;        window, pos=(draw_area_x, draw_area_y), radius=draw_radius,&amp;#10;        fill_color='gray', line_color=wheel_color)&amp;#10;&amp;#10;    # initialize the two points&amp;#10;    point_click_selected = createPatch(&amp;#10;        window, pos=(draw_area_x, draw_area_y), radius=click_radius,&amp;#10;        fill_color='black', line_color='black')&amp;#10;    opposite_point = createPatch(&amp;#10;        window, pos=(draw_area_x, draw_area_y), radius=click_radius,&amp;#10;        fill_color='black', line_color='black')&amp;#10;&amp;#10;    # register mouse click function&amp;#10;    response_wheel_obj = WheelClickRegister(&amp;#10;        wheel, pos_point=point_click_selected, &amp;#10;        opp_point=opposite_point, wheel_pos=wheel_pos)&amp;#10;&amp;#10;    return response_wheel_obj&amp;#10;    &amp;#10;&quot;&quot;&quot; create the self-defined buttons &quot;&quot;&quot;&amp;#10;# functions to create buttons&amp;#10;class SelfDefinedButton:&amp;#10;    def __init__(self, window, text, pos, size):&amp;#10;        # load background&amp;#10;        img_path = &quot;resources/button.png&quot;&amp;#10;        self.img = visual.ImageStim(&amp;#10;            win=window, image=img_path,&amp;#10;            size=size, pos=pos)&amp;#10;        &amp;#10;        # load text&amp;#10;        text_height = size[1] / 2&amp;#10;        self.text = visual.TextStim(&amp;#10;            win=window, text=text, pos=pos, color='black',&amp;#10;            height=text_height, anchorHoriz='center', anchorVert='center')&amp;#10;            &amp;#10;        # get stats&amp;#10;        self.left = pos[0] - size[0] / 2&amp;#10;        self.right = pos[0] + size[0] / 2&amp;#10;        self.top = pos[1] + size[1] / 2&amp;#10;        self.bottom = pos[1] - size[1] / 2&amp;#10;        &amp;#10;        # set auto draw&amp;#10;        self.setAutoDraw(True)&amp;#10;        &amp;#10;    def setAutoDraw(self, autoDraw):&amp;#10;        self.img.setAutoDraw(autoDraw)&amp;#10;        self.text.setAutoDraw(autoDraw)&amp;#10;        &amp;#10;    def contains(self, pos):&amp;#10;        px = pos[0]&amp;#10;        py = pos[1]&amp;#10;        on_button = (&amp;#10;            (px &gt; self.left) &amp; (px &lt; self.right) &amp; (&amp;#10;            py &gt; self.bottom) &amp; (py &lt; self.top))&amp;#10;        return on_button&amp;#10;&amp;#10;def funcCreateButton(window, text, pos, size):&amp;#10;    button = SelfDefinedButton(window, text, pos, size)&amp;#10;    return button&amp;#10;    " valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# show the cursor&amp;#10;win.mouseVisible = True&amp;#10;&amp;#10;objs_display = []&amp;#10;&amp;#10;# response field&amp;#10;loc = [0, 0]&amp;#10;response_obj = funcDrawAdjustResponse(&amp;#10;    win, loc, PATCH_RADIUS, CLICK_RADIUS)&amp;#10;objs_display.append(response_obj)&amp;#10;&amp;#10;# to add the confirm button&amp;#10;continue_button = funcCreateButton(&amp;#10;    win, 'continue', pos=(0, -0.35),&amp;#10;    size=(button_width*1.3, button_height*1.3))&amp;#10;objs_display.append(continue_button)&amp;#10;&amp;#10;# to detect whether a pressed has released&amp;#10;has_released = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# read mouse click&amp;#10;left_button = responseMouse.getPressed()[0]&amp;#10;mouse_position = responseMouse.getPos()&amp;#10;mouse_time = t&amp;#10;if left_button:&amp;#10;    if continue_button.contains(mouse_position):&amp;#10;        # first check if it's over the continue button&amp;#10;        no_pending = response_obj.ever_have_response&amp;#10;        if no_pending:&amp;#10;            continueRoutine = False&amp;#10;    else:&amp;#10;        if has_released:&amp;#10;            # this is a new press, register it&amp;#10;            has_released = False&amp;#10;            # otherwise, ignore it&amp;#10;            response_obj.register_click(mouse_position, mouse_time)&amp;#10;else:&amp;#10;    has_released = True&amp;#10;&amp;#10;if enforce_response_time_limit and (t &gt; MAX_RESP_TIME):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# reset click recording&amp;#10;has_released = True&amp;#10;&amp;#10;# resp_obj = response_objects[resp_obj_id]&amp;#10;resp_x_to_record = response_obj.clicks_x&amp;#10;resp_y_to_record = response_obj.clicks_y&amp;#10;resp_time_to_record = response_obj.clicks_time&amp;#10;            &amp;#10;# approximate the response&amp;#10;# if it's not none, compute the error and add to records&amp;#10;resp_approximated = response_obj.compute_response()&amp;#10;if resp_approximated is not None:&amp;#10;    error_approximated = funcComputeOriDiff(resp_approximated, stim_deg)&amp;#10;    block_error_records.append(error_approximated)&amp;#10;else:&amp;#10;    # record those no response&amp;#10;    block_error_records.append(None)&amp;#10; &amp;#10;thisExp.addData(f'resp_x', resp_x_to_record)&amp;#10;thisExp.addData(f'resp_y', resp_y_to_record)&amp;#10;thisExp.addData(f'resp_time', resp_time_to_record)&amp;#10;&amp;#10;# clear all objects&amp;#10;for i in range(len(objs_display)):&amp;#10;    display_obj = objs_display[i]&amp;#10;    display_obj.setAutoDraw(False)&amp;#10;&amp;#10;objs_display = []&amp;#10;response_obj = None&amp;#10;&amp;#10;# hide the cursor&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeOriTest" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="responseMouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="responseMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="PreTrial">
      <RoutineSettingsComponent name="PreTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="PreTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePretrial" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="fixation = DefaultFixation(win)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="cur_trial_i = trialLoop.thisN;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="cur_trial_i = trialLoop.thisN&amp;#10;cur_trial_stim_perturbs = cur_block_stim_perturbs[cur_trial_i]&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="fixation.draw()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePretrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPreTrialPlaceholder" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPreTrialPlaceholder" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="FIXATION_LENGTH" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="postTrial">
      <RoutineSettingsComponent name="postTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="postTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="PreBlock">
      <RoutineSettingsComponent name="PreBlock" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="PreBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePreBlock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="cur_block_stim_perturbs = all_repats_stims[blockLoop.thisN];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="block_id = blockLoop.thisN&amp;#10;cur_block_stim_perturbs = all_repeats_stims[blockLoop.thisN]&amp;#10;cur_block_perturb_type = all_perturb_types[blockLoop.thisN]&amp;#10;&amp;#10;# prepare data recording&amp;#10;block_error_records = []&amp;#10;block_perturb_acc_records = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# hide the cursor&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePreBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPreBlock" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPreBlock" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.1)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;Starting Block &quot; + str(block_id+1)" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ButtonComponent name="buttonPreBlock" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="0" valType="num" updates="constant" name="borderWidth"/>
        <Param val="" valType="extendedCode" updates="constant" name="callback"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="darkgrey" valType="color" updates="constant" name="fillColor"/>
        <Param val="Arvo" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="buttonPreBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="oncePerClick"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="" valType="num" updates="constant" name="padding"/>
        <Param val="(0.0, -0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="every click" valType="str" updates="None" name="save"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.08)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="continue" valType="str" updates="constant" name="text"/>
        <Param val="button onset" valType="str" updates="constant" name="timeRelativeTo"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ButtonComponent>
    </Routine>
    <Routine name="AfterMask">
      <RoutineSettingsComponent name="AfterMask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="AfterMask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeAfterMask" plugin="None">
        <Param val="class NoisePatch:&amp;#10;    def __init__(self, window, loc, display_r):&amp;#10;        noise_img_path = &quot;resources/noise.png&quot;&amp;#10;        self.obj = visual.ImageStim(&amp;#10;            win=window, image=noise_img_path,&amp;#10;            ori=0, size=2*display_r, pos=loc) &amp;#10;        &amp;#10;    def rotate(self):&amp;#10;        noise_ori = 180 * random.random()&amp;#10;        self.obj.setOri(noise_ori)&amp;#10;        &amp;#10;    def draw(self):&amp;#10;        self.obj.draw()" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class NoisePatch {&amp;#10;    constructor(window, loc, display_r) {&amp;#10;        var noise_img_path, noise_ori;&amp;#10;        noise_img_path = &quot;resources/noise.png&quot;;&amp;#10;        noise_ori = (180 * Math.random.random());&amp;#10;        this.obj = new visual.ImageStim({&quot;win&quot;: window, &quot;image&quot;: noise_img_path, &quot;ori&quot;: noise_ori, &quot;size&quot;: (2 * display_r), &quot;pos&quot;: loc});&amp;#10;        this.setAutoDraw(true);&amp;#10;    }&amp;#10;    setAutoDraw(autoDraw) {&amp;#10;        this.obj.setAutoDraw(autoDraw);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="mask_obj = NoisePatch(win, [0, 0], PATCH_RADIUS)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="mask_obj.rotate()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="mask_obj.draw()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeAfterMask" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textMaskPlaceholder" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textMaskPlaceholder" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="MASK_LENGTH" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="postBlock">
      <RoutineSettingsComponent name="postBlock" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="postBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePostBlock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_avg_acc = (1 - (np.mean(block_error_records) / 180));&amp;#10;block_avg_perturb_acc = np.mean(block_perturb_acc_records);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# show the cursor&amp;#10;win.mouseVisible = True&amp;#10;&amp;#10;# compute metrics&amp;#10;block_avg_acc = 1 - np.mean(block_error_records) / 180&amp;#10;block_avg_acc_str = f&quot;{int(block_avg_acc*100)}%&quot;&amp;#10;block_avg_perturb_acc = np.mean(block_perturb_acc_records)&amp;#10;block_avg_perturb_acc_str = f&quot;{int(block_avg_perturb_acc*100)}%&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePostBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPostBlock" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPostBlock" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;Your get orientation &quot;+ block_avg_acc_str + &quot; correct\n(with &quot; +block_avg_perturb_acc_str + &quot; number of rings judgement correct)&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ButtonComponent name="buttonPostBlock" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="0" valType="num" updates="constant" name="borderWidth"/>
        <Param val="" valType="extendedCode" updates="constant" name="callback"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="darkgrey" valType="color" updates="constant" name="fillColor"/>
        <Param val="Arvo" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="buttonPostBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="oncePerClick"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="" valType="num" updates="constant" name="padding"/>
        <Param val="(0.0, -0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="every click" valType="str" updates="None" name="save"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.08)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="continue" valType="str" updates="constant" name="text"/>
        <Param val="button onset" valType="str" updates="constant" name="timeRelativeTo"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ButtonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="prepareExp"/>
    <LoopInitiator loopType="TrialHandler" name="blockLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="N_BLOCKS" valType="num"/>
      <Param name="name" updates="None" val="blockLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PreBlock"/>
    <LoopInitiator loopType="TrialHandler" name="trialLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="BLOCK_SIZE" valType="num"/>
      <Param name="name" updates="None" val="trialLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PreTrial"/>
    <Routine name="Display"/>
    <Routine name="AfterMask"/>
    <Routine name="Delay"/>
    <Routine name="OriTest"/>
    <Routine name="postTrial"/>
    <LoopTerminator name="trialLoop"/>
    <Routine name="postBlock"/>
    <LoopTerminator name="blockLoop"/>
  </Flow>
</PsychoPy2experiment>
