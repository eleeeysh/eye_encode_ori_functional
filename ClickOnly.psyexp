<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2025.1.1">
  <Settings>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001', 'dominant_hand': &quot;'right','left'&quot;}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[2560, 1440]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="ClickOnly" valType="str" updates="None" name="expName"/>
    <Param val="" valType="str" updates="None" name="expVersion"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="prepareExp">
      <RoutineSettingsComponent name="prepareExp" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="prepareExp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePrepareExp" plugin="None">
        <Param val="import random&amp;#10;import numpy as np&amp;#10;import itertools&amp;#10;&amp;#10;&quot;&quot;&quot; For sampling &quot;&quot;&quot;&amp;#10;class SimplePerturbationLoader:&amp;#10;    def __init__(self):&amp;#10;        # create stimulus samples&amp;#10;        self.stim_ranges = [&amp;#10;            [12, 36],&amp;#10;            [54, 78],&amp;#10;            [102, 126],&amp;#10;            [144, 168],&amp;#10;        ]&amp;#10;        self.n_sample_per_range = 5&amp;#10;        self.stim_samples = [&amp;#10;            np.linspace(s[0], s[1], self.n_sample_per_range) &amp;#10;            for s in self.stim_ranges]&amp;#10;        &amp;#10;        # create perturbation sampling range&amp;#10;        self.perturbations = [&amp;#10;            (1, 1), # quadrant 1&amp;#10;            (-1, 1), # quadrant 2&amp;#10;            (-1, -1), # quadrant 3&amp;#10;            (1, -1), # quadrant 4&amp;#10;        ]&amp;#10;        &amp;#10;        # set other configurations&amp;#10;        self.jittering = 2&amp;#10;        &amp;#10;    def stim_add_noise(self, xs):&amp;#10;        noise = np.random.uniform(low=-1, high=1, size=xs.shape) * self.jittering&amp;#10;        return xs + noise&amp;#10;        &amp;#10;    def generate_one_batch_stims(self):&amp;#10;        stim_list = np.concatenate(self.stim_samples)&amp;#10;        # add some noise&amp;#10;        sampled_stims = self.stim_add_noise(stim_list)&amp;#10;        # combination&amp;#10;        combinations = list(itertools.product(sampled_stims, self.perturbations))&amp;#10;        random.shuffle(combinations)&amp;#10;        return combinations&amp;#10;        &amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# set configrations&amp;#10;N_REPEATS = 4&amp;#10;N_REPEAT_BLOCK = 2&amp;#10;DELAY_LENGTH = 5&amp;#10;&amp;#10;# read exp settings&amp;#10;dominant_hand = expInfo['dominant_hand']&amp;#10;is_right_handed = dominant_hand == 'right'&amp;#10;&amp;#10;# add managers&amp;#10;stim_perturb_loader = SimplePerturbationLoader()&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# now generate the stimuli and perturbations&amp;#10;all_repats_stims = []&amp;#10;BLOCK_SIZE = 0&amp;#10;for _ in range(N_REPEATS):&amp;#10;    # generate stims and perturbations&amp;#10;    stim_perturb_list = stim_perturb_loader.generate_one_batch_stims()&amp;#10;    # logging.info('DEBUGGING')&amp;#10;    # logging.info(len(stim_perturb_list))&amp;#10;    # cut into blocks&amp;#10;    assert len(stim_perturb_list) % N_REPEAT_BLOCK == 0&amp;#10;    BLOCK_SIZE = len(stim_perturb_list) // N_REPEAT_BLOCK&amp;#10;    for i in range(N_REPEAT_BLOCK):&amp;#10;        all_repats_stims.append(stim_perturb_list[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE])&amp;#10;&amp;#10;N_BLOCKS = N_REPEATS * N_REPEAT_BLOCK&amp;#10;&amp;#10;logging.info(N_BLOCKS)&amp;#10;&amp;#10;        &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePrepareExp" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Display">
      <RoutineSettingsComponent name="Display" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Display" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="Delay">
      <RoutineSettingsComponent name="Delay" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Delay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="keyDelay" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyDelay" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="DELAY_LENGTH" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="codeDelay" plugin="None">
        <Param val="&quot;&quot;&quot; For generating perturbations &quot;&quot;&quot;&amp;#10;class PerturbationManager:&amp;#10;    def __init__(self, win):&amp;#10;        self.perturb_scale_range = [0.1, 0.25]&amp;#10;        self.radius = 0.05&amp;#10;        &amp;#10;        # load resources&amp;#10;        self.img = visual.ImageStim(&amp;#10;            win, image='resources/landolt_white.png', &amp;#10;            pos=(0, 0),&amp;#10;            ori=0,&amp;#10;            size=(self.radius, self.radius))&amp;#10;        &amp;#10;    def generate_perturb_position(self, perturb_code):&amp;#10;        perturb_center = np.random.uniform(&amp;#10;            self.perturb_scale_range[0],&amp;#10;            self.perturb_scale_range[1],&amp;#10;            size=2&amp;#10;        ) * np.array(perturb_code) # center of perturbation&amp;#10;        return perturb_center&amp;#10;        &amp;#10;    def generate_gradient_mask(self, win, perturb_code):&amp;#10;        ## position&amp;#10;        center = self.generate_perturb_position(perturb_code)&amp;#10;        self.img.pos = center&amp;#10;        ## rotation&amp;#10;        rotation = np.random.randint(10, 170) * (np.random.randint(2)+1) # avoid ambiguous&amp;#10;        self.img.ori = rotation&amp;#10;        &amp;#10;        perturb_info = {&amp;#10;            'pos': center,&amp;#10;            'radius': self.radius,&amp;#10;            'ori': rotation,&amp;#10;        }&amp;#10;        &amp;#10;        return self.img, perturb_info&amp;#10;&amp;#10;&amp;#10;class TimepointSchedueler:&amp;#10;    def __init__(self, timing_settings, delay_length):&amp;#10;        self.n_min, self.n_max = timing_settings['n']&amp;#10;        self.per_t_min, self.per_t_max = timing_settings['duration']&amp;#10;        self.earliest, self.latest = timing_settings['timing']&amp;#10;        self.min_gap = timing_settings['min_gap']&amp;#10;        self.delay_length = delay_length&amp;#10;        &amp;#10;        # check settings&amp;#10;        assert delay_length &gt;= self.latest&amp;#10;        assert (&amp;#10;            self.n_max * self.per_t_max + &amp;#10;            (self.n_max-1) * self.min_gap +&amp;#10;            self.earliest) &lt;= self.latest&amp;#10;        &amp;#10;        # reset schedule&amp;#10;        self.schedule = None&amp;#10;        self.current_id = -1&amp;#10;        self.on = False&amp;#10;        &amp;#10;    def reset_schedule(self):&amp;#10;        self.schedule = []&amp;#10;        &amp;#10;        # sample number of epochs&amp;#10;        n_epochs = np.random.choice(&amp;#10;            np.arange(self.n_min, self.n_max+1)&amp;#10;        )&amp;#10;        # determine duration of each epochs&amp;#10;        durations = np.random.uniform(&amp;#10;            self.per_t_min, self.per_t_max, size=n_epochs&amp;#10;        )&amp;#10;        &amp;#10;        # sample the start points&amp;#10;        reduced_duration = self.latest - self.earliest - np.sum(&amp;#10;            durations) - (n_epochs) * self.min_gap&amp;#10;        starts = np.random.uniform(0, reduced_duration, size=n_epochs)&amp;#10;        starts = np.sort(starts)&amp;#10;        &amp;#10;        # get time start end for each&amp;#10;        t_overhead = self.earliest&amp;#10;        for i in range(n_epochs):&amp;#10;            start_t = t_overhead + starts[i]&amp;#10;            end_t = start_t + durations[i]&amp;#10;            self.schedule.append([start_t, end_t])&amp;#10;            t_overhead += self.min_gap &amp;#10;            t_overhead += end_t - start_t&amp;#10;            &amp;#10;        # other stuffs&amp;#10;        self.on = False&amp;#10;        self.current_id = 0&amp;#10;        &amp;#10;    def check_schedule(self, t):&amp;#10;        # check whether it's on or off&amp;#10;        n_total = len(self.schedule)&amp;#10;        if self.current_id &lt; n_total:&amp;#10;            epoch = self.schedule[self.current_id]&amp;#10;            if t &lt; epoch[0]:&amp;#10;                self.on = False&amp;#10;            elif t &gt; epoch[1]:&amp;#10;                self.on = False&amp;#10;                self.current_id += 1&amp;#10;            else:&amp;#10;                self.on = True&amp;#10;        else:&amp;#10;            self.on = False&amp;#10;        &amp;#10;        return self.on&amp;#10;                " valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# a few configurations&amp;#10;perturbation_manager = PerturbationManager(win)&amp;#10;&amp;#10;## number of perturbations during the delay&amp;#10;PERTURB_TIMING_SETTINGS = {&amp;#10;    'n': (2, 2),&amp;#10;    'duration': (1.0, 1.5),&amp;#10;    'timing': (0.5, 4.5),&amp;#10;    'min_gap': 0.05,&amp;#10;}&amp;#10;perturb_scheduler = TimepointSchedueler(&amp;#10;    timing_settings=PERTURB_TIMING_SETTINGS, &amp;#10;    delay_length=DELAY_LENGTH,&amp;#10;)&amp;#10;&amp;#10;## left / right hand mapping&amp;#10;left_hand_keys = ['j', 'k'] # for left-handed&amp;#10;right_hand_keys = ['a', 's'] # for right-handed&amp;#10;assert len(left_hand_keys) == len(right_hand_keys)&amp;#10;resp_key_map = right_hand_keys if is_right_handed else left_hand_keys&amp;#10;&amp;#10;## load sound feedback&amp;#10;correct_sound = sound.Sound('bleep.wav')&amp;#10;wrong_sound   = sound.Sound('buzz.wav')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# set up the timing of displaying perturbations&amp;#10;cur_perturb_obj = None&amp;#10;state_on = False&amp;#10;perturb_scheduler.reset_schedule()&amp;#10;&amp;#10;# get stim perturb codes&amp;#10;perturb_code = cur_block_stim_perturbs[cur_trial_i][1]&amp;#10;perturb_mask = None&amp;#10;ans_key = None&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# check time first&amp;#10;new_state = perturb_scheduler.check_schedule(t)&amp;#10;if new_state:&amp;#10;    if not state_on:&amp;#10;        # create a new object&amp;#10;        perturb_mask, perturb_info = perturbation_manager.generate_gradient_mask(&amp;#10;            win, perturb_code)&amp;#10;        # TODO: save the info&amp;#10;        ans_is_left = perturb_info['ori'] &gt; 180&amp;#10;    perturb_mask.draw()&amp;#10;else:&amp;#10;    # destroy perturb mask&amp;#10;    perturb_mask = None&amp;#10;state_on = new_state&amp;#10;&amp;#10;# read the keyboard input&amp;#10;keys = keyDelay.getKeys(resp_key_map)&amp;#10;if state_on and keys:&amp;#10;    # stop sounds&amp;#10;    correct_sound.stop()&amp;#10;    wrong_sound.stop()&amp;#10;    &amp;#10;    # check the key&amp;#10;    last_key = keys[-1].name&amp;#10;    key_is_left = last_key.lower() == resp_key_map[0]&amp;#10;    key_is_correct = key_is_left == ans_is_left&amp;#10;    if key_is_correct:&amp;#10;        correct_sound.play()&amp;#10;    else:&amp;#10;        wrong_sound.play()&amp;#10;    &amp;#10;    # save the result&amp;#10;    cur_perturb_id = perturb_scheduler.current_id&amp;#10;    thisExp.addData(f'perturb_{cur_perturb_id}_correct', int(key_is_correct))" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeDelay" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="textDelayPlaceholder" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="textDelayPlaceholder" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="DELAY_LENGTH " valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </TextboxComponent>
    </Routine>
    <Routine name="OriTest">
      <RoutineSettingsComponent name="OriTest" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="OriTest" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="PreTrial">
      <RoutineSettingsComponent name="PreTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="PreTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePretrial" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="cur_trial_i = trialLoop.thisN;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="cur_trial_i = trialLoop.thisN&amp;#10;cur_trial_stim_perturbs = cur_block_stim_perturbs[cur_trial_i]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePretrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="postTrial">
      <RoutineSettingsComponent name="postTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="postTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="PreBlock">
      <RoutineSettingsComponent name="PreBlock" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="PreBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codePreBlock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="cur_block_stim_perturbs = all_repats_stims[blockLoop.thisN];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="cur_block_stim_perturbs = all_repats_stims[blockLoop.thisN]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePreBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="prepareExp"/>
    <LoopInitiator loopType="TrialHandler" name="DebugLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="DebugLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="blockLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="N_BLOCKS" valType="num"/>
      <Param name="name" updates="None" val="blockLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PreBlock"/>
    <LoopInitiator loopType="TrialHandler" name="trialLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="BLOCK_SIZE" valType="num"/>
      <Param name="name" updates="None" val="trialLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PreTrial"/>
    <Routine name="Display"/>
    <Routine name="Delay"/>
    <Routine name="OriTest"/>
    <Routine name="postTrial"/>
    <LoopTerminator name="trialLoop"/>
    <LoopTerminator name="blockLoop"/>
    <LoopTerminator name="DebugLoop"/>
  </Flow>
</PsychoPy2experiment>
